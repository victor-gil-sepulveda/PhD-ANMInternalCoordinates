/////////////////////////////////////////////////////////////////////////////
/// HarmonicDihedralConstraintFunctions.cpp
///
/// Implementation of HarmonicDihedralConstraintFunctions
///
///
/// \copyright Copyright 2010-2014 BARCELONA SUPERCOMPUTING CENTER. See the COPYRIGHT file at the top-level directory of this distribution.
///
/// \author arincon
/// \date 19/09/2012
/////////////////////////////////////////////////////////////////////////////

#include "HarmonicDihedralConstraintFunctions.h"

#include <vector>
#include <cmath>
#include "../../../../../Tools/Math/MathTools.h"
#include <iostream>
using namespace std;

///////////////////////////////////////////////////////////////
/// \remarks
/// Moves an angle into the [-PI,PI] range.
///
/// \param angle [In] initial angle in radians
///
/// \return The angle in the expected range
///
/// \author vgil
/// \date 07/01/2015
///////////////////////////////////////////////////////////////
double HarmonicDihedralConstraintFunctions::put_in_pi_minus_pi_range(double angle){

	if (angle > M_PI){
		return angle - (2*M_PI);
	}

	if (angle < -M_PI){
		return (2*M_PI) + angle;
	}

	return angle;
}

///////////////////////////////////////////////////////////////
/// \remarks
/// Moves an angle to the [0,2PI] range.
///
/// \param angle [In] initial angle in radians in [-PI,PI] range
///
/// \return The angle in the expected range
///
/// \author vgil
/// \date 07/01/2015
///////////////////////////////////////////////////////////////
double HarmonicDihedralConstraintFunctions::to_0_2PI_range(double angle){
	if(angle >= 0){
		return angle; // TODO: check if it is > 2pi
	}
	else{
		return (2*M_PI)+angle;
	}
}

///////////////////////////////////////////////////////////////
/// \remarks
/// Safe subtraction of two angles in radians (returns signed increment).
/// Note: subtractions were changed to this function using:
/// regex [ \((atan2\(+.*,.*\)+)-eq\) ] => [ rad_subtraction($1, eq) ]
///
/// \param ang1,ang2 [In] operators (angle in radians) are already in the range [-PI, PI]
///
/// \return The angle in the expected range
///
/// \author vgil
/// \date 07/01/2015
///////////////////////////////////////////////////////////////
double HarmonicDihedralConstraintFunctions::rad_subtraction(double ang1, double ang2){
	double new_a = to_0_2PI_range(ang1);
	double new_b = to_0_2PI_range(ang2);
	double difference = new_a - new_b;

	if (difference > M_PI){
		return difference-(2*M_PI); // Return the shorter increment, with changed sign (we are rotating
									 // in the other sense).
	}

	if (difference < -M_PI){
		return  difference + (2*M_PI); // Return the shorter increment
	}

	return difference;
}

///////////////////////////////////////////////////////////////
/// \remarks
/// This function calculates the dihedral angle formed by the four consecutive atoms
/// using the arcTan function
///
/// \param xa, ..., zd [In] (x, y, z) coordinates of each (a, b, c, d) atom, representing dihedral b->c of
///  a - b - c  - d
///
/// \return dihedral angle in range [-PI, PI]
///
/// \author arincon
/// \date
///////////////////////////////////////////////////////////////
double HarmonicDihedralConstraintFunctions::calculateDihedralAngleWithArcTanFunction(double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd) {
	double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18;
	v1 = xc-xd;
	v2 = yb-yc;
	v3 = xb-xc;
	v4 = yc-yd;
	v5 = v3*v4-v1*v2;
	v6 = ya-yb;
	v7 = xa-xb;
	v8 = v7*v2-v3*v6;
	v9 = za-zb;
	v10 = zb-zc;
	v11 = v3*v9-v7*v10;
	v12 = v6*v10-v2*v9;
	v13 = 1/sqrt(pow(v8,2)+pow(v12,2)+pow(v11,2));
	v14 = 1/sqrt(pow(v3,2)+pow(v2,2)+pow(v10,2));
	v15 = zc-zd;
	v16 = v1*v10-v3*v15;
	v17 = v2*v15-v4*v10;
	v18 = 1/sqrt(pow(v5,2)+pow(v17,2)+pow(v16,2));

	double angle = atan2((v13*v14*v11*v10-v8*v2*v13*v14)*v18*v17+(v3*v8*v13*v14-v13*v14*v12*v10)*v18*v16+v5*(v2*v13*v14*v12-v3*v13*v14*v11)*v18,v13*v12*v18*v17+v13*v11*v18*v16+v8*v5*v13*v18);

	return Math::radToDeg(angle);
}

///////////////////////////////////////////////////////////////
/// \remarks
/// This function calculates the energy of the term formed by the four consecutive atoms
/// using the arcTan function
///
/// \param k [In] spring force constant
/// \param xa, ..., zd [In] (x, y, z) coordinates of each (a, b, c, d) atom
/// \param eq [In] equilibrium angle
///
/// \return energy
///
/// \author arincon
/// \date
///////////////////////////////////////////////////////////////
double HarmonicDihedralConstraintFunctions::calculateEnergyWithArcTanFunction(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq) {
	double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18;

	v1 = xc-xd;
	v2 = yb-yc;
	v3 = xb-xc;
	v4 = yc-yd;
	v5 = v3*v4-v1*v2;
	v6 = ya-yb;
	v7 = xa-xb;
	v8 = v7*v2-v3*v6;
	v9 = za-zb;
	v10 = zb-zc;
	v11 = v3*v9-v7*v10;
	v12 = v6*v10-v2*v9;
	v13 = 1/sqrt(pow(v8,2)+pow(v12,2)+pow(v11,2));
	v14 = 1/sqrt(pow(v3,2)+pow(v2,2)+pow(v10,2));
	v15 = zc-zd;
	v16 = v1*v10-v3*v15;
	v17 = v2*v15-v4*v10;
	v18 = 1/sqrt(pow(v5,2)+pow(v17,2)+pow(v16,2));

	return pow(rad_subtraction(atan2((v13*v14*v11*v10-v8*v2*v13*v14)*v18*v17+(v3*v8*v13*v14-v13*v14*v12*v10)*v18*v16+v5*(v2*v13*v14*v12-v3*v13*v14*v11)*v18,v13*v12*v18*v17+v13*v11*v18*v16+v8*v5*v13*v18),eq),2)*k;
}

///////////////////////////////////////////////////////////////
/// \remarks
/// This function calculates the gradient vector using
/// derivativeXa, derivativeYa, ..., derivativeZd functions
///
/// \param k [In] spring force constant
/// \param xa, ..., zd [In] (x, y, z) coordinates of each (a, b, c, d) atom
/// \param eq [In] equilibrium angle
///
/// \return vector of size 12 representing the gradient
///
/// \author arincon
/// \date
///////////////////////////////////////////////////////////////
vector<double> HarmonicDihedralConstraintFunctions::calculateGradient(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq) {
	vector<double> gradient;

	gradient.push_back(derivativeXa(k, xa,  ya,  za,  xb,  yb,  zb,  xc,  yc,  zc,  xd,  yd,  zd, eq));
	gradient.push_back(derivativeYa(k, xa,  ya,  za,  xb,  yb,  zb,  xc,  yc,  zc,  xd,  yd,  zd, eq));
	gradient.push_back(derivativeZa(k, xa,  ya,  za,  xb,  yb,  zb,  xc,  yc,  zc,  xd,  yd,  zd, eq));
	gradient.push_back(derivativeXb(k, xa,  ya,  za,  xb,  yb,  zb,  xc,  yc,  zc,  xd,  yd,  zd, eq));
	gradient.push_back(derivativeYb(k, xa,  ya,  za,  xb,  yb,  zb,  xc,  yc,  zc,  xd,  yd,  zd, eq));
	gradient.push_back(derivativeZb(k, xa,  ya,  za,  xb,  yb,  zb,  xc,  yc,  zc,  xd,  yd,  zd, eq));
	gradient.push_back(derivativeXc(k, xa,  ya,  za,  xb,  yb,  zb,  xc,  yc,  zc,  xd,  yd,  zd, eq));
	gradient.push_back(derivativeYc(k, xa,  ya,  za,  xb,  yb,  zb,  xc,  yc,  zc,  xd,  yd,  zd, eq));
	gradient.push_back(derivativeZc(k, xa,  ya,  za,  xb,  yb,  zb,  xc,  yc,  zc,  xd,  yd,  zd, eq));
	gradient.push_back(derivativeXd(k, xa,  ya,  za,  xb,  yb,  zb,  xc,  yc,  zc,  xd,  yd,  zd, eq));
	gradient.push_back(derivativeYd(k, xa,  ya,  za,  xb,  yb,  zb,  xc,  yc,  zc,  xd,  yd,  zd, eq));
	gradient.push_back(derivativeZd(k, xa,  ya,  za,  xb,  yb,  zb,  xc,  yc,  zc,  xd,  yd,  zd, eq));

	return gradient;
}

///////////////////////////////////////////////////////////////
/// \remarks
/// This function calculates the hessian matrix using
/// hessianXaXa, hessianXaYa, ..., hessianZdZd functions
///
/// \param k [In] spring force constant
/// \param xa, ..., zd [In] (x, y, z) coordinates of each (a, b, c, d) atom
/// \param eq [In] equilibrium angle
///
/// \return hessian matrix
///
/// \author arincon
/// \date
///////////////////////////////////////////////////////////////
vector<double> HarmonicDihedralConstraintFunctions::calculateHessian(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq) {
	vector<double> hessian(78);

	hessian[0] = hessianXaXa(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[1] = hessianXaYa(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[2] = hessianXaZa(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[3] = hessianXaXb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[4] = hessianXaYb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[5] = hessianXaZb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[6] = hessianXaXc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[7] = hessianXaYc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[8] = hessianXaZc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[9] = hessianXaXd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[10] = hessianXaYd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[11] = hessianXaZd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[12] = hessianYaYa(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[13] = hessianYaZa(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[14] = hessianYaXb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[15] = hessianYaYb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[16] = hessianYaZb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[17] = hessianYaXc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[18] = hessianYaYc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[19] = hessianYaZc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[20] = hessianYaXd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[21] = hessianYaYd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[22] = hessianYaZd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[23] = hessianZaZa(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[24] = hessianZaXb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[25] = hessianZaYb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[26] = hessianZaZb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[27] = hessianZaXc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[28] = hessianZaYc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[29] = hessianZaZc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[30] = hessianZaXd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[31] = hessianZaYd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[32] = hessianZaZd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[33] = hessianXbXb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[34] = hessianXbYb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[35] = hessianXbZb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[36] = hessianXbXc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[37] = hessianXbYc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[38] = hessianXbZc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[39] = hessianXbXd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[40] = hessianXbYd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[41] = hessianXbZd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[42] = hessianYbYb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[43] = hessianYbZb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[44] = hessianYbXc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[45] = hessianYbYc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[46] = hessianYbZc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[47] = hessianYbXd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[48] = hessianYbYd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[49] = hessianYbZd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[50] = hessianZbZb(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[51] = hessianZbXc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[52] = hessianZbYc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[53] = hessianZbZc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[54] = hessianZbXd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[55] = hessianZbYd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[56] = hessianZbZd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[57] = hessianXcXc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[58] = hessianXcYc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[59] = hessianXcZc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[60] = hessianXcXd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[61] = hessianXcYd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[62] = hessianXcZd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[63] = hessianYcYc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[64] = hessianYcZc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[65] = hessianYcXd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[66] = hessianYcYd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[67] = hessianYcZd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[68] = hessianZcZc(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[69] = hessianZcXd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[70] = hessianZcYd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[71] = hessianZcZd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[72] = hessianXdXd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[73] = hessianXdYd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[74] = hessianXdZd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[75] = hessianYdYd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[76] = hessianYdZd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);
	hessian[77] = hessianZdZd(k,xa,ya,za,xb,yb,zb,xc,yc,zc,xd,yd,zd,eq);

	return hessian;
}

///////////////////////////////////////////////////////////////
/// \remarks
/// This function calculates energy first partial derivative in function of
/// Xi coordinate where X is one of {x, y, z} and i is one of {a, b, c, d}
/// There is one of this functions for each of the coordinates:
/// derivativeXa, derivativeYa, ..., derivativeZd.
///
/// \param k [In] spring force constant
/// \param xa, ..., zd [In] (x, y, z) coordinates of each (a, b, c, d) atom
/// \param eq [In] equilibrium angle
///
/// \return first derivative
///
/// \author arincon
/// \date
///////////////////////////////////////////////////////////////
double HarmonicDihedralConstraintFunctions::derivativeXa(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27;
v1 = xc-xd;
v2 = yb-yc;
v3 = xb-xc;
v4 = yc-yd;
v5 = v3*v4-v1*v2;
v6 = ya-yb;
v7 = xa-xb;
v8 = v7*v2-v3*v6;
v9 = -zb;
v10 = v9+za;
v11 = zb-zc;
v12 = v3*v10-v7*v11;
v13 = v6*v11-v2*v10;
v14 = sqrt(pow(v8,2)+pow(v13,2)+pow(v12,2));
v15 = 1/v14;
v16 = pow(v2,2);
v17 = 1/sqrt(pow(v3,2)+v16+pow(v11,2));
v18 = zc-zd;
v19 = v1*v11-v3*v18;
v20 = v2*v18-v4*v11;
v21 = 1/sqrt(pow(v5,2)+pow(v20,2)+pow(v19,2));
v22 = (v15*v17*v12*v11-v8*v2*v15*v17)*v21*v20+(v3*v8*v15*v17-v15*v17*v13*v11)*v21*v19+v5*(v2*v15*v17*v13-v3*v15*v17*v12)*v21;
v23 = v15*v13*v21*v20+v15*v12*v21*v19+v8*v5*v15*v21;
v24 = 1/(pow(v23,2)+pow(v22,2));
v25 = 1/pow(v14,3);
v26 = zc+v9;
v27 = 2*v12*v26+2*v8*v2;
return 2*k*rad_subtraction(atan2(v22,v23), eq)*(v24*v23*((-v25*v17*v12*v11*v27/2+v8*v2*v25*v17*v27/2+v15*v17*v11*v26-v16*v15*v17)*v21*v20+(v25*v17*v13*v11*v27/2-v3*v8*v25*v17*v27/2+v3*v2*v15*v17)*v21*v19+v5*(-v2*v25*v17*v13*v27/2+v3*v25*v17*v12*v27/2-v3*v15*v17*v26)*v21)-v24*v22*(-v25*v13*v27*v21*v20/2-v25*v12*v27*v21*v19/2+v15*v26*v21*v19-v8*v5*v25*v27*v21/2+v2*v5*v15*v21));
}

double HarmonicDihedralConstraintFunctions::derivativeYa(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27;
v1 = xc-xd;
v2 = yb-yc;
v3 = xb-xc;
v4 = yc-yd;
v5 = v3*v4-v1*v2;
v6 = ya-yb;
v7 = -xb;
v8 = v7+xa;
v9 = v8*v2-v3*v6;
v10 = za-zb;
v11 = zb-zc;
v12 = v3*v10-v8*v11;
v13 = v6*v11-v2*v10;
v14 = sqrt(pow(v9,2)+pow(v13,2)+pow(v12,2));
v15 = 1/v14;
v16 = pow(v11,2);
v17 = 1/sqrt(pow(v3,2)+pow(v2,2)+v16);
v18 = zc-zd;
v19 = v1*v11-v3*v18;
v20 = v2*v18-v4*v11;
v21 = 1/sqrt(pow(v5,2)+pow(v20,2)+pow(v19,2));
v22 = (v15*v17*v12*v11-v9*v2*v15*v17)*v21*v20+(v3*v9*v15*v17-v15*v17*v13*v11)*v21*v19+v5*(v2*v15*v17*v13-v3*v15*v17*v12)*v21;
v23 = v15*v13*v21*v20+v15*v12*v21*v19+v9*v5*v15*v21;
v24 = 1/(pow(v23,2)+pow(v22,2));
v25 = 1/pow(v14,3);
v26 = xc+v7;
v27 = 2*v13*v11+2*v26*v9;
return 2*k*rad_subtraction(atan2(v22,v23), eq)*(v24*v23*((-v25*v17*v12*v27*v11/2+v9*v2*v25*v17*v27/2-v26*v2*v15*v17)*v21*v20+(v25*v17*v13*v27*v11/2-v3*v9*v25*v17*v27/2-v15*v17*v16+v3*v26*v15*v17)*v21*v19+v5*(v2*v15*v17*v11-v2*v25*v17*v13*v27/2+v3*v25*v17*v12*v27/2)*v21)-v24*v22*(v15*v11*v21*v20-v25*v13*v27*v21*v20/2-v25*v12*v27*v21*v19/2-v9*v5*v25*v27*v21/2+v26*v5*v15*v21));
}

double HarmonicDihedralConstraintFunctions::derivativeZa(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27;
v1 = xc-xd;
v2 = yb-yc;
v3 = xb-xc;
v4 = yc-yd;
v5 = v3*v4-v1*v2;
v6 = -yb;
v7 = v6+ya;
v8 = xa-xb;
v9 = v8*v2-v3*v7;
v10 = za-zb;
v11 = zb-zc;
v12 = v3*v10-v8*v11;
v13 = v7*v11-v2*v10;
v14 = sqrt(pow(v9,2)+pow(v13,2)+pow(v12,2));
v15 = 1/v14;
v16 = pow(v3,2);
v17 = 1/sqrt(pow(v2,2)+v16+pow(v11,2));
v18 = zc-zd;
v19 = v1*v11-v3*v18;
v20 = v2*v18-v4*v11;
v21 = 1/sqrt(pow(v5,2)+pow(v20,2)+pow(v19,2));
v22 = (v15*v17*v12*v11-v9*v2*v15*v17)*v21*v20+(v3*v9*v15*v17-v15*v17*v13*v11)*v21*v19+v5*(v2*v15*v17*v13-v3*v15*v17*v12)*v21;
v23 = v15*v13*v21*v20+v15*v12*v21*v19+v9*v5*v15*v21;
v24 = 1/(pow(v23,2)+pow(v22,2));
v25 = 1/pow(v14,3);
v26 = yc+v6;
v27 = 2*v26*v13+2*v3*v12;
return 2*k*rad_subtraction(atan2(v22,v23), eq)*(v24*v23*((-v25*v17*v27*v12*v11/2+v3*v15*v17*v11+v9*v2*v25*v17*v27/2)*v21*v20+(v25*v17*v27*v13*v11/2-v26*v15*v17*v11-v3*v9*v25*v17*v27/2)*v21*v19+v5*(-v2*v25*v17*v27*v13/2+v3*v25*v17*v27*v12/2+v2*v26*v15*v17-v16*v15*v17)*v21)-v24*(-v25*v27*v13*v21*v20/2+v26*v15*v21*v20-v25*v27*v12*v21*v19/2+v3*v15*v21*v19-v9*v5*v25*v27*v21/2)*v22);
}

double HarmonicDihedralConstraintFunctions::derivativeXb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37;
v1 = xc-xd;
v2 = yb-yc;
v3 = xb-xc;
v4 = yc-yd;
v5 = v3*v4-v1*v2;
v6 = ya-yb;
v7 = xa-xb;
v8 = v7*v2-v3*v6;
v9 = za-zb;
v10 = -zc;
v11 = v10+zb;
v12 = v3*v9-v7*v11;
v13 = v6*v11-v2*v9;
v14 = sqrt(pow(v8,2)+pow(v13,2)+pow(v12,2));
v15 = 1/v14;
v16 = pow(v3,2);
v17 = sqrt(pow(v2,2)+v16+pow(v11,2));
v18 = 1/v17;
v19 = v2*v15*v18*v13-v3*v15*v18*v12;
v20 = zc-zd;
v21 = v1*v11-v3*v20;
v22 = v2*v20-v4*v11;
v23 = sqrt(pow(v5,2)+pow(v22,2)+pow(v21,2));
v24 = 1/v23;
v25 = v3*v8*v15*v18-v15*v18*v13*v11;
v26 = v15*v18*v12*v11-v8*v2*v15*v18;
v27 = v26*v24*v22+v25*v24*v21+v5*v19*v24;
v28 = v15*v13*v24*v22+v15*v12*v24*v21+v8*v5*v15*v24;
v29 = 1/(pow(v28,2)+pow(v27,2));
v30 = yc-ya;
v31 = 1/pow(v14,3);
v32 = v10+za;
v33 = 2*v12*v32+2*v8*v30;
v34 = zd+v10;
v35 = 1/pow(v23,3);
v36 = 2*v21*v34+2*v5*v4;
v37 = 1/pow(v17,3);
return 2*k*rad_subtraction(atan2(v27,v28), eq)*(v29*v28*(-v26*v35*v22*v36/2-v25*v35*v21*v36/2-v5*v19*v35*v36/2+v25*v24*v34+(v15*v18*v32*v11-v31*v18*v33*v12*v11/2-v3*v15*v37*v12*v11+v8*v2*v31*v18*v33/2-v2*v30*v15*v18+v3*v8*v2*v15*v37)*v24*v22+(v31*v18*v33*v13*v11/2+v3*v15*v37*v13*v11-v3*v8*v31*v18*v33/2+v3*v30*v15*v18+v8*v15*v18-v16*v8*v15*v37)*v24*v21+v5*(-v3*v15*v18*v32-v2*v31*v18*v33*v13/2-v3*v2*v15*v37*v13+v3*v31*v18*v33*v12/2-v15*v18*v12+v16*v15*v37*v12)*v24+v4*v19*v24)-v29*v27*(-v15*v13*v35*v22*v36/2-v15*v12*v35*v21*v36/2-v8*v5*v15*v35*v36/2+v15*v12*v24*v34-v31*v33*v13*v24*v22/2+v15*v32*v24*v21-v31*v33*v12*v24*v21/2-v8*v5*v31*v33*v24/2+v8*v4*v15*v24+v30*v5*v15*v24));
}

double HarmonicDihedralConstraintFunctions::derivativeYb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37;
v1 = xc-xd;
v2 = yb-yc;
v3 = -xc;
v4 = v3+xb;
v5 = yc-yd;
v6 = v4*v5-v1*v2;
v7 = ya-yb;
v8 = xa-xb;
v9 = v8*v2-v4*v7;
v10 = za-zb;
v11 = zb-zc;
v12 = v4*v10-v8*v11;
v13 = v7*v11-v2*v10;
v14 = sqrt(pow(v9,2)+pow(v13,2)+pow(v12,2));
v15 = 1/v14;
v16 = pow(v2,2);
v17 = sqrt(pow(v4,2)+v16+pow(v11,2));
v18 = 1/v17;
v19 = v2*v15*v18*v13-v4*v15*v18*v12;
v20 = zc-zd;
v21 = v1*v11-v4*v20;
v22 = v2*v20-v5*v11;
v23 = sqrt(pow(v6,2)+pow(v22,2)+pow(v21,2));
v24 = 1/v23;
v25 = v4*v9*v15*v18-v15*v18*v13*v11;
v26 = v15*v18*v12*v11-v9*v2*v15*v18;
v27 = v26*v24*v22+v25*v24*v21+v6*v19*v24;
v28 = v15*v13*v24*v22+v15*v12*v24*v21+v9*v6*v15*v24;
v29 = 1/(pow(v28,2)+pow(v27,2));
v30 = xd+v3;
v31 = v3+xa;
v32 = 1/pow(v14,3);
v33 = zc-za;
v34 = 2*v13*v33+2*v31*v9;
v35 = 1/pow(v23,3);
v36 = 2*v22*v20+2*v30*v6;
v37 = 1/pow(v17,3);
return 2*k*rad_subtraction(atan2(v27,v28), eq)*(v29*v28*(v26*v24*v20-v26*v35*v22*v36/2-v25*v35*v21*v36/2-v6*v19*v35*v36/2+(-v32*v18*v12*v11*v34/2+v9*v2*v32*v18*v34/2-v2*v15*v37*v12*v11-v31*v2*v15*v18-v9*v15*v18+v9*v16*v15*v37)*v24*v22+(v32*v18*v13*v11*v34/2-v4*v9*v32*v18*v34/2-v15*v18*v11*v33+v2*v15*v37*v13*v11+v31*v4*v15*v18-v4*v9*v2*v15*v37)*v24*v21+v6*(-v2*v32*v18*v13*v34/2+v4*v32*v18*v12*v34/2+v2*v15*v18*v33+v15*v18*v13-v16*v15*v37*v13+v4*v2*v15*v37*v12)*v24+v30*v19*v24)-v29*v27*(v15*v13*v24*v20-v15*v13*v35*v22*v36/2-v15*v12*v35*v21*v36/2-v9*v6*v15*v35*v36/2-v32*v13*v34*v24*v22/2+v15*v33*v24*v22-v32*v12*v34*v24*v21/2-v9*v6*v32*v34*v24/2+v31*v6*v15*v24+v30*v9*v15*v24));
}

double HarmonicDihedralConstraintFunctions::derivativeZb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37;
v1 = xc-xd;
v2 = -yc;
v3 = v2+yb;
v4 = xb-xc;
v5 = yc-yd;
v6 = v4*v5-v1*v3;
v7 = ya-yb;
v8 = xa-xb;
v9 = v8*v3-v4*v7;
v10 = za-zb;
v11 = zb-zc;
v12 = v4*v10-v8*v11;
v13 = v7*v11-v3*v10;
v14 = sqrt(pow(v9,2)+pow(v13,2)+pow(v12,2));
v15 = 1/v14;
v16 = pow(v11,2);
v17 = sqrt(pow(v4,2)+pow(v3,2)+v16);
v18 = 1/v17;
v19 = v3*v15*v18*v13-v4*v15*v18*v12;
v20 = zc-zd;
v21 = v1*v11-v4*v20;
v22 = v3*v20-v5*v11;
v23 = sqrt(pow(v6,2)+pow(v22,2)+pow(v21,2));
v24 = 1/v23;
v25 = v4*v9*v15*v18-v15*v18*v13*v11;
v26 = v15*v18*v12*v11-v9*v3*v15*v18;
v27 = v26*v24*v22+v25*v24*v21+v6*v19*v24;
v28 = v15*v13*v24*v22+v15*v12*v24*v21+v9*v6*v15*v24;
v29 = 1/(pow(v28,2)+pow(v27,2));
v30 = 1/pow(v14,3);
v31 = xc-xa;
v32 = v2+ya;
v33 = 2*v32*v13+2*v31*v12;
v34 = yd+v2;
v35 = 1/pow(v23,3);
v36 = 2*v34*v22+2*v1*v21;
v37 = 1/pow(v17,3);
return 2*k*rad_subtraction(atan2(v27,v28), eq)*(v29*v28*(-v26*v35*v36*v22/2+(-v30*v18*v33*v12*v11/2+v31*v15*v18*v11+v9*v3*v15*v37*v11+v15*v18*v12+v9*v3*v30*v18*v33/2-v15*v37*v12*v16)*v24*v22-v25*v35*v36*v21/2+(v30*v18*v33*v13*v11/2-v32*v15*v18*v11-v4*v9*v15*v37*v11-v15*v18*v13-v4*v9*v30*v18*v33/2+v15*v37*v13*v16)*v24*v21-v6*v19*v35*v36/2+v1*v25*v24+v6*(-v3*v15*v37*v13*v11+v4*v15*v37*v12*v11-v3*v30*v18*v33*v13/2+v4*v30*v18*v33*v12/2+v32*v3*v15*v18-v4*v31*v15*v18)*v24+v34*v26*v24)-v29*v27*(-v15*v13*v35*v36*v22/2-v30*v33*v13*v24*v22/2+v32*v15*v24*v22-v15*v12*v35*v36*v21/2-v30*v33*v12*v24*v21/2+v31*v15*v24*v21-v9*v6*v15*v35*v36/2+v34*v15*v13*v24+v1*v15*v12*v24-v9*v6*v30*v33*v24/2));
}

double HarmonicDihedralConstraintFunctions::derivativeXc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38;
v1 = xc-xd;
v2 = yb-yc;
v3 = xb-xc;
v4 = yc-yd;
v5 = v3*v4-v1*v2;
v6 = -yb;
v7 = v6+ya;
v8 = xa-xb;
v9 = v8*v2-v3*v7;
v10 = za-zb;
v11 = zb-zc;
v12 = v3*v10-v8*v11;
v13 = v7*v11-v2*v10;
v14 = sqrt(pow(v9,2)+pow(v13,2)+pow(v12,2));
v15 = 1/v14;
v16 = pow(v3,2);
v17 = sqrt(pow(v2,2)+v16+pow(v11,2));
v18 = 1/v17;
v19 = v2*v15*v18*v13-v3*v15*v18*v12;
v20 = -zd;
v21 = v20+zc;
v22 = v1*v11-v3*v21;
v23 = v2*v21-v4*v11;
v24 = sqrt(pow(v5,2)+pow(v23,2)+pow(v22,2));
v25 = 1/v24;
v26 = v3*v9*v15*v18-v15*v18*v13*v11;
v27 = v15*v18*v12*v11-v9*v2*v15*v18;
v28 = v27*v25*v23+v26*v25*v22+v5*v19*v25;
v29 = v15*v13*v25*v23+v15*v12*v25*v22+v9*v5*v15*v25;
v30 = 1/(pow(v29,2)+pow(v28,2));
v31 = yd+v6;
v32 = 1/pow(v14,3);
v33 = zb-za;
v34 = 2*v33*v12+2*v7*v9;
v35 = 1/pow(v24,3);
v36 = v20+zb;
v37 = 2*v22*v36+2*v5*v31;
v38 = 1/pow(v17,3);
return 2*k*rad_subtraction(atan2(v28,v29), eq)*(v30*v29*(v26*v25*v36-v27*v35*v37*v23/2+(-v32*v18*v34*v12*v11/2+v3*v15*v38*v12*v11+v33*v15*v18*v11+v9*v2*v32*v18*v34/2-v7*v2*v15*v18-v3*v9*v2*v15*v38)*v25*v23-v26*v35*v37*v22/2+(v32*v18*v34*v13*v11/2-v3*v15*v38*v13*v11-v3*v9*v32*v18*v34/2-v9*v15*v18+v3*v7*v15*v18+v16*v9*v15*v38)*v25*v22-v5*v19*v35*v37/2+v5*(-v2*v32*v18*v34*v13/2+v3*v2*v15*v38*v13+v3*v32*v18*v34*v12/2+v15*v18*v12-v16*v15*v38*v12-v3*v33*v15*v18)*v25+v31*v19*v25)-v30*v28*(v15*v12*v25*v36-v15*v13*v35*v37*v23/2-v32*v34*v13*v25*v23/2-v15*v12*v35*v37*v22/2-v32*v34*v12*v25*v22/2+v33*v15*v25*v22-v9*v5*v15*v35*v37/2-v9*v5*v32*v34*v25/2+v9*v31*v15*v25+v7*v5*v15*v25));
}

double HarmonicDihedralConstraintFunctions::derivativeYc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38;
v1 = -xd;
v2 = v1+xc;
v3 = yb-yc;
v4 = xb-xc;
v5 = yc-yd;
v6 = v4*v5-v2*v3;
v7 = ya-yb;
v8 = xa-xb;
v9 = v8*v3-v4*v7;
v10 = -zb;
v11 = v10+za;
v12 = zb-zc;
v13 = v4*v11-v8*v12;
v14 = v7*v12-v3*v11;
v15 = sqrt(pow(v9,2)+pow(v14,2)+pow(v13,2));
v16 = 1/v15;
v17 = pow(v3,2);
v18 = sqrt(pow(v4,2)+v17+pow(v12,2));
v19 = 1/v18;
v20 = v3*v16*v19*v14-v4*v16*v19*v13;
v21 = zc-zd;
v22 = v2*v12-v4*v21;
v23 = v3*v21-v5*v12;
v24 = sqrt(pow(v6,2)+pow(v23,2)+pow(v22,2));
v25 = 1/v24;
v26 = v4*v9*v16*v19-v16*v19*v14*v12;
v27 = v16*v19*v13*v12-v9*v3*v16*v19;
v28 = v27*v25*v23+v26*v25*v22+v6*v20*v25;
v29 = v16*v14*v25*v23+v16*v13*v25*v22+v9*v6*v16*v25;
v30 = 1/(pow(v29,2)+pow(v28,2));
v31 = v1+xb;
v32 = xb-xa;
v33 = 1/pow(v15,3);
v34 = 2*v11*v14+2*v32*v9;
v35 = zd+v10;
v36 = 1/pow(v24,3);
v37 = 2*v23*v35+2*v31*v6;
v38 = 1/pow(v18,3);
return 2*k*rad_subtraction(atan2(v28,v29), eq)*(v30*v29*(-v27*v36*v23*v37/2-v26*v36*v22*v37/2-v6*v20*v36*v37/2+v27*v25*v35+(-v33*v19*v34*v13*v12/2+v3*v16*v38*v13*v12+v9*v3*v33*v19*v34/2-v32*v3*v16*v19+v9*v16*v19-v9*v17*v16*v38)*v25*v23+(v33*v19*v34*v14*v12/2-v3*v16*v38*v14*v12-v11*v16*v19*v12-v4*v9*v33*v19*v34/2+v32*v4*v16*v19+v4*v9*v3*v16*v38)*v25*v22+v6*(-v3*v33*v19*v34*v14/2-v16*v19*v14+v17*v16*v38*v14+v4*v33*v19*v34*v13/2-v4*v3*v16*v38*v13+v3*v11*v16*v19)*v25+v31*v20*v25)-v30*v28*(-v16*v14*v36*v23*v37/2-v16*v13*v36*v22*v37/2-v9*v6*v16*v36*v37/2+v16*v14*v25*v35-v33*v34*v14*v25*v23/2+v11*v16*v25*v23-v33*v34*v13*v25*v22/2-v9*v6*v33*v34*v25/2+v32*v6*v16*v25+v31*v9*v16*v25));
}

double HarmonicDihedralConstraintFunctions::derivativeZc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38;
v1 = xc-xd;
v2 = yb-yc;
v3 = xb-xc;
v4 = -yd;
v5 = v4+yc;
v6 = v3*v5-v1*v2;
v7 = ya-yb;
v8 = -xb;
v9 = v8+xa;
v10 = v9*v2-v3*v7;
v11 = za-zb;
v12 = zb-zc;
v13 = v3*v11-v9*v12;
v14 = v7*v12-v2*v11;
v15 = sqrt(pow(v14,2)+pow(v13,2)+pow(v10,2));
v16 = 1/v15;
v17 = pow(v12,2);
v18 = sqrt(pow(v3,2)+pow(v2,2)+v17);
v19 = 1/v18;
v20 = v2*v16*v19*v14-v3*v16*v19*v13;
v21 = zc-zd;
v22 = v1*v12-v3*v21;
v23 = v2*v21-v5*v12;
v24 = sqrt(pow(v6,2)+pow(v23,2)+pow(v22,2));
v25 = 1/v24;
v26 = v3*v10*v16*v19-v16*v19*v14*v12;
v27 = v16*v19*v13*v12-v10*v2*v16*v19;
v28 = v27*v25*v23+v26*v25*v22+v6*v20*v25;
v29 = v16*v14*v25*v23+v16*v13*v25*v22+v10*v6*v16*v25;
v30 = 1/(pow(v29,2)+pow(v28,2));
v31 = 1/pow(v15,3);
v32 = yb-ya;
v33 = 2*v32*v14+2*v9*v13;
v34 = xd+v8;
v35 = v4+yb;
v36 = 1/pow(v24,3);
v37 = 2*v35*v23+2*v34*v22;
v38 = 1/pow(v18,3);
return 2*k*rad_subtraction(atan2(v28,v29), eq)*(v30*v29*(-v27*v36*v37*v23/2+(-v31*v19*v33*v13*v12/2+v9*v16*v19*v12-v10*v2*v16*v38*v12-v16*v19*v13+v10*v2*v31*v19*v33/2+v16*v38*v13*v17)*v25*v23-v26*v36*v37*v22/2+(v31*v19*v33*v14*v12/2-v32*v16*v19*v12+v3*v10*v16*v38*v12+v16*v19*v14-v3*v10*v31*v19*v33/2-v16*v38*v14*v17)*v25*v22-v6*v20*v36*v37/2+v34*v26*v25+v6*(v2*v16*v38*v14*v12-v3*v16*v38*v13*v12-v2*v31*v19*v33*v14/2+v3*v31*v19*v33*v13/2+v32*v2*v16*v19-v9*v3*v16*v19)*v25+v35*v27*v25)-v30*v28*(-v16*v14*v36*v37*v23/2-v31*v33*v14*v25*v23/2+v32*v16*v25*v23-v16*v13*v36*v37*v22/2-v31*v33*v13*v25*v22/2+v9*v16*v25*v22-v10*v6*v16*v36*v37/2+v35*v16*v14*v25+v34*v16*v13*v25-v10*v6*v31*v33*v25/2));
}

double HarmonicDihedralConstraintFunctions::derivativeXd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29;
v1 = xc-xd;
v2 = yb-yc;
v3 = xb-xc;
v4 = yc-yd;
v5 = v3*v4-v1*v2;
v6 = ya-yb;
v7 = xa-xb;
v8 = v7*v2-v3*v6;
v9 = -zb;
v10 = v9+za;
v11 = zb-zc;
v12 = v3*v10-v7*v11;
v13 = v6*v11-v2*v10;
v14 = 1/sqrt(pow(v8,2)+pow(v13,2)+pow(v12,2));
v15 = 1/sqrt(pow(v3,2)+pow(v2,2)+pow(v11,2));
v16 = v2*v14*v15*v13-v3*v14*v15*v12;
v17 = zc-zd;
v18 = v1*v11-v3*v17;
v19 = v2*v17-v4*v11;
v20 = sqrt(pow(v5,2)+pow(v19,2)+pow(v18,2));
v21 = 1/v20;
v22 = v3*v8*v14*v15-v14*v15*v13*v11;
v23 = v14*v15*v12*v11-v8*v2*v14*v15;
v24 = v23*v21*v19+v22*v21*v18+v5*v16*v21;
v25 = v14*v13*v21*v19+v14*v12*v21*v18+v8*v5*v14*v21;
v26 = 1/(pow(v25,2)+pow(v24,2));
v27 = zc+v9;
v28 = 1/pow(v20,3);
v29 = 2*v27*v18+2*v2*v5;
return 2*k*rad_subtraction(atan2(v24,v25), eq)*(v26*v25*(-v23*v28*v29*v19/2-v22*v28*v29*v18/2-v5*v16*v28*v29/2+v22*v27*v21+v2*v16*v21)-v26*v24*(-v14*v13*v28*v29*v19/2-v14*v12*v28*v29*v18/2-v8*v5*v14*v28*v29/2+v14*v12*v27*v21+v8*v2*v14*v21));
}

double HarmonicDihedralConstraintFunctions::derivativeYd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29;
v1 = xc-xd;
v2 = yb-yc;
v3 = xb-xc;
v4 = yc-yd;
v5 = v3*v4-v1*v2;
v6 = ya-yb;
v7 = -xb;
v8 = v7+xa;
v9 = v8*v2-v3*v6;
v10 = za-zb;
v11 = zb-zc;
v12 = v3*v10-v8*v11;
v13 = v6*v11-v2*v10;
v14 = 1/sqrt(pow(v9,2)+pow(v13,2)+pow(v12,2));
v15 = 1/sqrt(pow(v3,2)+pow(v2,2)+pow(v11,2));
v16 = v2*v14*v15*v13-v3*v14*v15*v12;
v17 = zc-zd;
v18 = v1*v11-v3*v17;
v19 = v2*v17-v4*v11;
v20 = sqrt(pow(v5,2)+pow(v19,2)+pow(v18,2));
v21 = 1/v20;
v22 = v3*v9*v14*v15-v14*v15*v13*v11;
v23 = v14*v15*v12*v11-v9*v2*v14*v15;
v24 = v23*v21*v19+v22*v21*v18+v5*v16*v21;
v25 = v14*v13*v21*v19+v14*v12*v21*v18+v9*v5*v14*v21;
v26 = 1/(pow(v25,2)+pow(v24,2));
v27 = xc+v7;
v28 = 1/pow(v20,3);
v29 = 2*v11*v19+2*v27*v5;
return 2*k*rad_subtraction(atan2(v24,v25), eq)*(v26*v25*(-v23*v28*v29*v19/2-v22*v28*v29*v18/2-v5*v16*v28*v29/2+v23*v11*v21+v27*v16*v21)-v26*v24*(-v14*v13*v28*v29*v19/2-v14*v12*v28*v29*v18/2-v9*v5*v14*v28*v29/2+v14*v13*v11*v21+v27*v9*v14*v21));
}

double HarmonicDihedralConstraintFunctions::derivativeZd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29;
v1 = xc-xd;
v2 = yb-yc;
v3 = xb-xc;
v4 = yc-yd;
v5 = v3*v4-v1*v2;
v6 = -yb;
v7 = v6+ya;
v8 = xa-xb;
v9 = v8*v2-v3*v7;
v10 = za-zb;
v11 = zb-zc;
v12 = v3*v10-v8*v11;
v13 = v7*v11-v2*v10;
v14 = 1/sqrt(pow(v9,2)+pow(v13,2)+pow(v12,2));
v15 = 1/sqrt(pow(v3,2)+pow(v2,2)+pow(v11,2));
v16 = v2*v14*v15*v13-v3*v14*v15*v12;
v17 = zc-zd;
v18 = v1*v11-v3*v17;
v19 = v2*v17-v4*v11;
v20 = sqrt(pow(v5,2)+pow(v19,2)+pow(v18,2));
v21 = 1/v20;
v22 = v3*v9*v14*v15-v14*v15*v13*v11;
v23 = v14*v15*v12*v11-v9*v2*v14*v15;
v24 = v23*v21*v19+v22*v21*v18+v5*v16*v21;
v25 = v14*v13*v21*v19+v14*v12*v21*v18+v9*v5*v14*v21;
v26 = 1/(pow(v25,2)+pow(v24,2));
v27 = yc+v6;
v28 = 1/pow(v20,3);
v29 = 2*v27*v19+2*v3*v18;
return 2*k*rad_subtraction(atan2(v24,v25), eq)*(v26*v25*(-v23*v28*v29*v19/2-v22*v28*v29*v18/2-v5*v16*v28*v29/2+v3*v22*v21+v27*v23*v21)-v26*v24*(-v14*v13*v28*v29*v19/2-v14*v12*v28*v29*v18/2-v9*v5*v14*v28*v29/2+v27*v14*v13*v21+v3*v14*v12*v21));
}

///////////////////////////////////////////////////////////////
/// \remarks
/// This function calculates energy second partial derivative in function of
/// Xi and Yj coordinates where X, Y are one of {x, y, z} and i, j are one of {a, b, c, d}
/// There is one of this functions for each pair coordinates:
/// hessianXaXa, hessianXaYa, ..., hessianZdZd.
///
/// \param k [In] spring force constant
/// \param xa, ..., zd [In] (x, y, z) coordinates of each (a, b, c, d) atom
/// \param eq [In] equilibrium angle
///
/// \return second derivative
///
/// \author arincon
/// \date
///////////////////////////////////////////////////////////////
double HarmonicDihedralConstraintFunctions::hessianXaXa(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = xd-xc ; v7 = -yc ; v8 = yd+v7 ; v9 = v1*v8-v6*v4 ; v10 = v7+yb ; v11 = zc-zb ; v12 = zb-za ; v13 = v1*v12-v3*v11 ; v14 = 2*v11*v13+2*v10*v5 ; v15 = v2*v11-v4*v12 ; v16 = sqrt(pow(v5,2)+pow(v15,2)+pow(v13,2)) ; v17 = 1/pow(v16,3) ; v18 = zd-zc ; v19 = v6*v11-v1*v18 ; v20 = v4*v18-v8*v11 ; v21 = 1/sqrt(pow(v9,2)+pow(v20,2)+pow(v19,2)) ; v22 = 1/v16 ; v23 = -v15*v14*v17*v20*v21/2+v11*v22*v19*v21-v13*v14*v17*v19*v21/2+v10*v9*v22*v21-v5*v9*v14*v17*v21/2 ; v24 = pow(v11,2) ; v25 = 1/sqrt(pow(v4,2)+v24+pow(v1,2)) ; v26 = (v11*v13*v25*v22-v4*v5*v25*v22)*v20*v21+(v1*v5*v25*v22-v11*v15*v25*v22)*v19*v21+v9*(v4*v15*v25*v22-v1*v13*v25*v22)*v21 ; v27 = v15*v22*v20*v21+v13*v22*v19*v21+v5*v9*v22*v21 ; v28 = pow(v27,2)+pow(v26,2) ; v29 = 1/v28 ; v30 = (v24*v25*v22-v10*v4*v25*v22-v11*v13*v14*v25*v17/2+v4*v5*v14*v25*v17/2)*v20*v21+(v1*v10*v25*v22+v11*v15*v14*v25*v17/2-v1*v5*v14*v25*v17/2)*v19*v21+v9*(-v1*v11*v25*v22-v4*v15*v14*v25*v17/2+v1*v13*v14*v25*v17/2)*v21 ; v31 = 2*v26*v30+2*v23*v27 ; v32 = 1/pow(v28,2) ; v33 = pow(v14,2) ; v34 = 1/pow(v16,5) ; v35 = 2*v24+2*pow(v10,2) ; return 2*pow(v27*v30*v29-v23*v26*v29,2)*k+2*k*(-(-v15*v35*v17*v20*v21/2+3*v15*v33*v34*v20*v21/4-v13*v35*v17*v19*v21/2-v11*v14*v17*v19*v21+3*v13*v33*v34*v19*v21/4-v5*v9*v35*v17*v21/2-v10*v9*v14*v17*v21+3*v5*v9*v33*v34*v21/4)*v26*v29+((-v24*v14*v25*v17+v10*v4*v14*v25*v17-v11*v13*v25*v35*v17/2+v4*v5*v25*v35*v17/2+3*v11*v13*v33*v25*v34/4-3*v4*v5*v33*v25*v34/4)*v20*v21+(-v1*v10*v14*v25*v17+v11*v15*v25*v35*v17/2-v1*v5*v25*v35*v17/2-3*v11*v15*v33*v25*v34/4+3*v1*v5*v33*v25*v34/4)*v19*v21+v9*(v1*v11*v14*v25*v17-v4*v15*v25*v35*v17/2+v1*v13*v25*v35*v17/2+3*v4*v15*v33*v25*v34/4-3*v1*v13*v33*v25*v34/4)*v21)*v27*v29-v27*v30*v31*v32+v23*v26*v31*v32)*rad_subtraction(atan2(v26,v27), eq) ; }

double HarmonicDihedralConstraintFunctions::hessianXaYa(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = xd-xc ; v7 = -yc ; v8 = yd+v7 ; v9 = v1*v8-v6*v4 ; v10 = zb-za ; v11 = zc-zb ; v12 = v1*v10-v3*v11 ; v13 = v2*v11-v4*v10 ; v14 = sqrt(pow(v5,2)+pow(v13,2)+pow(v12,2)) ; v15 = 1/v14 ; v16 = -zc ; v17 = zd+v16 ; v18 = v6*v11-v1*v17 ; v19 = v4*v17-v8*v11 ; v20 = 1/sqrt(pow(v9,2)+pow(v19,2)+pow(v18,2)) ; v21 = v13*v15*v19*v20+v12*v15*v18*v20+v5*v9*v15*v20 ; v22 = v16+zb ; v23 = 2*v22*v13+2*v1*v5 ; v24 = pow(v1,2) ; v25 = pow(v11,2) ; v26 = 1/sqrt(pow(v4,2)+v25+v24) ; v27 = 1/pow(v14,3) ; v28 = (-v1*v4*v26*v15-v11*v12*v23*v26*v27/2+v4*v5*v23*v26*v27/2)*v19*v20+(-v22*v11*v26*v15+v24*v26*v15+v11*v13*v23*v26*v27/2-v1*v5*v23*v26*v27/2)*v18*v20+v9*(v4*v22*v26*v15-v4*v13*v23*v26*v27/2+v1*v12*v23*v26*v27/2)*v20 ; v29 = (v11*v12*v26*v15-v4*v5*v26*v15)*v19*v20+(v1*v5*v26*v15-v11*v13*v26*v15)*v18*v20+v9*(v4*v13*v26*v15-v1*v12*v26*v15)*v20 ; v30 = pow(v29,2)+pow(v21,2) ; v31 = 1/v30 ; v32 = v22*v15*v19*v20-v13*v23*v27*v19*v20/2-v12*v23*v27*v18*v20/2+v1*v9*v15*v20-v5*v9*v23*v27*v20/2 ; v33 = v7+yb ; v34 = 2*v11*v12+2*v33*v5 ; v35 = -v13*v34*v27*v19*v20/2+v11*v15*v18*v20-v12*v34*v27*v18*v20/2+v33*v9*v15*v20-v5*v9*v34*v27*v20/2 ; v36 = (v25*v26*v15-v33*v4*v26*v15-v11*v12*v34*v26*v27/2+v4*v5*v34*v26*v27/2)*v19*v20+(v1*v33*v26*v15+v11*v13*v34*v26*v27/2-v1*v5*v34*v26*v27/2)*v18*v20+v9*(-v1*v11*v26*v15-v4*v13*v34*v26*v27/2+v1*v12*v34*v26*v27/2)*v20 ; v37 = 2*v28*v29+2*v32*v21 ; v38 = 1/pow(v30,2) ; v39 = 1/pow(v14,5) ; return 2*k*(v32*v36*v31-(-v22*v34*v27*v19*v20/2-v1*v33*v13*v27*v19*v20+3*v13*v34*v23*v39*v19*v20/4-v11*v23*v27*v18*v20/2-v1*v33*v12*v27*v18*v20+3*v12*v34*v23*v39*v18*v20/4-v33*v9*v23*v27*v20/2-v1*v9*v34*v27*v20/2-v1*v33*v5*v9*v27*v20+3*v5*v9*v34*v23*v39*v20/4)*v29*v31-v35*v28*v31+((-v25*v23*v26*v27/2+v33*v4*v23*v26*v27/2+v1*v4*v34*v26*v27/2-v1*v33*v11*v12*v26*v27+v1*v33*v4*v5*v26*v27+3*v11*v12*v34*v23*v26*v39/4-3*v4*v5*v34*v23*v26*v39/4)*v19*v20+(-v1*v33*v23*v26*v27/2+v22*v11*v34*v26*v27/2-v24*v34*v26*v27/2+v1*v33*v11*v13*v26*v27-v24*v33*v5*v26*v27-3*v11*v13*v34*v23*v26*v39/4+3*v1*v5*v34*v23*v26*v39/4)*v18*v20+v9*(v1*v11*v23*v26*v27/2-v4*v22*v34*v26*v27/2-v1*v33*v4*v13*v26*v27+v24*v33*v12*v26*v27+3*v4*v13*v34*v23*v26*v39/4-3*v1*v12*v34*v23*v26*v39/4)*v20)*v21*v31-v21*v36*v37*v38+v35*v29*v37*v38)*rad_subtraction(atan2(v29,v21), eq)+2*k*(v21*v28*v31-v32*v29*v31)*(v21*v36*v31-v35*v29*v31) ; }

double HarmonicDihedralConstraintFunctions::hessianXaZa(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = -xc ; v7 = xd+v6 ; v8 = -yc ; v9 = yd+v8 ; v10 = v1*v9-v7*v4 ; v11 = zb-za ; v12 = zc-zb ; v13 = v1*v11-v3*v12 ; v14 = v2*v12-v4*v11 ; v15 = sqrt(pow(v5,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = zd-zc ; v18 = v7*v12-v1*v17 ; v19 = v4*v17-v9*v12 ; v20 = 1/sqrt(pow(v19,2)+pow(v18,2)+pow(v10,2)) ; v21 = v14*v16*v19*v20+v13*v16*v18*v20+v5*v10*v16*v20 ; v22 = v6+xb ; v23 = 2*v4*v14+2*v22*v13 ; v24 = pow(v4,2) ; v25 = pow(v12,2) ; v26 = 1/sqrt(v25+v24+pow(v1,2)) ; v27 = 1/pow(v15,3) ; v28 = (v22*v12*v26*v16-v12*v13*v23*v26*v27/2+v4*v5*v23*v26*v27/2)*v19*v20+(-v4*v12*v26*v16+v12*v14*v23*v26*v27/2-v1*v5*v23*v26*v27/2)*v18*v20+v10*(v24*v26*v16-v22*v1*v26*v16-v4*v14*v23*v26*v27/2+v1*v13*v23*v26*v27/2)*v20 ; v29 = (v12*v13*v26*v16-v4*v5*v26*v16)*v19*v20+(v1*v5*v26*v16-v12*v14*v26*v16)*v18*v20+v10*(v4*v14*v26*v16-v1*v13*v26*v16)*v20 ; v30 = pow(v29,2)+pow(v21,2) ; v31 = 1/v30 ; v32 = v4*v16*v19*v20-v14*v23*v27*v19*v20/2+v22*v16*v18*v20-v13*v23*v27*v18*v20/2-v5*v10*v23*v27*v20/2 ; v33 = v8+yb ; v34 = 2*v12*v13+2*v33*v5 ; v35 = -v14*v34*v27*v19*v20/2+v12*v16*v18*v20-v13*v34*v27*v18*v20/2+v33*v10*v16*v20-v5*v10*v34*v27*v20/2 ; v36 = (v25*v26*v16-v33*v4*v26*v16-v12*v13*v34*v26*v27/2+v4*v5*v34*v26*v27/2)*v19*v20+(v1*v33*v26*v16+v12*v14*v34*v26*v27/2-v1*v5*v34*v26*v27/2)*v18*v20+v10*(-v1*v12*v26*v16-v4*v14*v34*v26*v27/2+v1*v13*v34*v26*v27/2)*v20 ; v37 = 2*v28*v29+2*v32*v21 ; v38 = 1/pow(v30,2) ; v39 = 1/pow(v15,5) ; return 2*k*(v32*v36*v31-(-v4*v34*v27*v19*v20/2-v22*v12*v14*v27*v19*v20+3*v14*v34*v23*v39*v19*v20/4-v12*v23*v27*v18*v20/2-v22*v34*v27*v18*v20/2-v22*v12*v13*v27*v18*v20+3*v13*v34*v23*v39*v18*v20/4-v33*v10*v23*v27*v20/2-v22*v5*v10*v12*v27*v20+3*v5*v10*v34*v23*v39*v20/4)*v29*v31-v35*v28*v31+((-v25*v23*v26*v27/2+v33*v4*v23*v26*v27/2-v22*v12*v34*v26*v27/2-v22*v25*v13*v26*v27+v22*v4*v5*v12*v26*v27+3*v12*v13*v34*v23*v26*v39/4-3*v4*v5*v34*v23*v26*v39/4)*v19*v20+(-v1*v33*v23*v26*v27/2+v4*v12*v34*v26*v27/2+v22*v25*v14*v26*v27-v22*v1*v5*v12*v26*v27-3*v12*v14*v34*v23*v26*v39/4+3*v1*v5*v34*v23*v26*v39/4)*v18*v20+v10*(v1*v12*v23*v26*v27/2-v24*v34*v26*v27/2+v22*v1*v34*v26*v27/2-v22*v4*v12*v14*v26*v27+v22*v1*v12*v13*v26*v27+3*v4*v14*v34*v23*v26*v39/4-3*v1*v13*v34*v23*v26*v39/4)*v20)*v21*v31-v21*v36*v37*v38+v35*v29*v37*v38)*rad_subtraction(atan2(v29,v21), eq)+2*k*(v21*v28*v31-v32*v29*v31)*(v21*v36*v31-v35*v29*v31) ; }

double HarmonicDihedralConstraintFunctions::hessianXaXb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54 ; v1 = xc-xb ; v2 = -ya ; v3 = yb+v2 ; v4 = xb-xa ; v5 = yc-yb ; v6 = v4*v5-v1*v3 ; v7 = xd-xc ; v8 = -yc ; v9 = yd+v8 ; v10 = v1*v9-v7*v5 ; v11 = zb-za ; v12 = zc-zb ; v13 = v1*v11-v4*v12 ; v14 = v3*v12-v5*v11 ; v15 = sqrt(pow(v6,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = -zc ; v18 = zd+v17 ; v19 = v7*v12-v1*v18 ; v20 = v5*v18-v9*v12 ; v21 = sqrt(pow(v20,2)+pow(v19,2)+pow(v10,2)) ; v22 = 1/v21 ; v23 = v14*v16*v20*v22+v13*v16*v19*v22+v6*v10*v16*v22 ; v24 = pow(v1,2) ; v25 = pow(v12,2) ; v26 = sqrt(pow(v5,2)+v25+v24) ; v27 = 1/v26 ; v28 = v5*v14*v27*v16-v1*v13*v27*v16 ; v29 = yc-yd ; v30 = 2*v18*v19+2*v29*v10 ; v31 = 1/pow(v21,3) ; v32 = v1*v6*v27*v16-v12*v14*v27*v16 ; v33 = v12*v13*v27*v16-v5*v6*v27*v16 ; v34 = yc+v2 ; v35 = v17+za ; v36 = 2*v35*v13+2*v34*v6 ; v37 = 1/pow(v15,3) ; v38 = 1/pow(v26,3) ; v39 = (v35*v12*v27*v16-v34*v5*v27*v16+v1*v12*v13*v38*v16-v1*v5*v6*v38*v16-v12*v13*v36*v27*v37/2+v5*v6*v36*v27*v37/2)*v20*v22+(-v6*v27*v16+v1*v34*v27*v16-v1*v12*v14*v38*v16+v24*v6*v38*v16+v12*v14*v36*v27*v37/2-v1*v6*v36*v27*v37/2)*v19*v22+v32*v18*v22+v29*v28*v22+v10*(v13*v27*v16-v1*v35*v27*v16+v1*v5*v14*v38*v16-v24*v13*v38*v16-v5*v14*v36*v27*v37/2+v1*v13*v36*v27*v37/2)*v22-v33*v20*v30*v31/2-v32*v19*v30*v31/2-v10*v28*v30*v31/2 ; v40 = v33*v20*v22+v32*v19*v22+v10*v28*v22 ; v41 = pow(v40,2)+pow(v23,2) ; v42 = 1/v41 ; v43 = -v14*v36*v37*v20*v22/2+v35*v16*v19*v22-v13*v36*v37*v19*v22/2+v13*v16*v18*v22+v34*v10*v16*v22+v6*v29*v16*v22-v6*v10*v36*v37*v22/2-v14*v16*v20*v30*v31/2-v13*v16*v19*v30*v31/2-v6*v10*v16*v30*v31/2 ; v44 = v8+yb ; v45 = 2*v12*v13+2*v44*v6 ; v46 = -v14*v45*v37*v20*v22/2+v12*v16*v19*v22-v13*v45*v37*v19*v22/2+v44*v10*v16*v22-v6*v10*v45*v37*v22/2 ; v47 = -v1*v12*v27*v16-v5*v14*v45*v27*v37/2+v1*v13*v45*v27*v37/2 ; v48 = v1*v44*v27*v16+v12*v14*v45*v27*v37/2-v1*v6*v45*v27*v37/2 ; v49 = v25*v27*v16-v44*v5*v27*v16-v12*v13*v45*v27*v37/2+v5*v6*v45*v27*v37/2 ; v50 = v49*v20*v22+v48*v19*v22+v10*v47*v22 ; v51 = 2*v39*v40+2*v43*v23 ; v52 = 1/pow(v41,2) ; v53 = 1/pow(v15,5) ; v54 = 2*v35*v12+2*v44*v34 ; return 2*k*(v43*v50*v42-(-v14*v54*v37*v20*v22/2+3*v14*v36*v45*v53*v20*v22/4-v35*v45*v37*v19*v22/2-v12*v36*v37*v19*v22/2-v13*v54*v37*v19*v22/2+3*v13*v36*v45*v53*v19*v22/4+v12*v16*v18*v22-v13*v45*v37*v18*v22/2+v44*v29*v16*v22-v34*v10*v45*v37*v22/2-v6*v29*v45*v37*v22/2-v44*v10*v36*v37*v22/2-v6*v10*v54*v37*v22/2+3*v6*v10*v36*v45*v53*v22/4+v14*v45*v37*v20*v30*v31/4-v12*v16*v19*v30*v31/2+v13*v45*v37*v19*v30*v31/4-v44*v10*v16*v30*v31/2+v6*v10*v45*v37*v30*v31/4)*v40*v42-v46*v39*v42+v23*((v1*v25*v38*v16-v1*v44*v5*v38*v16-v35*v12*v45*v27*v37/2+v34*v5*v45*v27*v37/2-v25*v36*v27*v37/2+v44*v5*v36*v27*v37/2-v12*v13*v54*v27*v37/2+v5*v6*v54*v27*v37/2-v1*v12*v13*v45*v38*v37/2+v1*v5*v6*v45*v38*v37/2+3*v12*v13*v36*v45*v27*v53/4-3*v5*v6*v36*v45*v27*v53/4)*v20*v22+(-v44*v27*v16+v24*v44*v38*v16+v6*v45*v27*v37/2-v1*v34*v45*v27*v37/2-v1*v44*v36*v27*v37/2+v12*v14*v54*v27*v37/2-v1*v6*v54*v27*v37/2+v1*v12*v14*v45*v38*v37/2-v24*v6*v45*v38*v37/2-3*v12*v14*v36*v45*v27*v53/4+3*v1*v6*v36*v45*v27*v53/4)*v19*v22+v48*v18*v22+v29*v47*v22+v10*(v12*v27*v16-v24*v12*v38*v16-v13*v45*v27*v37/2+v1*v35*v45*v27*v37/2+v1*v12*v36*v27*v37/2-v5*v14*v54*v27*v37/2+v1*v13*v54*v27*v37/2-v1*v5*v14*v45*v38*v37/2+v24*v13*v45*v38*v37/2+3*v5*v14*v36*v45*v27*v53/4-3*v1*v13*v36*v45*v27*v53/4)*v22-v49*v20*v30*v31/2-v48*v19*v30*v31/2-v10*v47*v30*v31/2)*v42-v23*v50*v51*v52+v46*v40*v51*v52)*rad_subtraction(atan2(v40,v23), eq)+2*k*(v23*v39*v42-v43*v40*v42)*(v23*v50*v42-v46*v40*v42) ; }

double HarmonicDihedralConstraintFunctions::hessianXaYb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = -xc ; v7 = xd+v6 ; v8 = -yc ; v9 = yd+v8 ; v10 = v1*v9-v7*v4 ; v11 = -za ; v12 = zb+v11 ; v13 = zc-zb ; v14 = v1*v12-v3*v13 ; v15 = v2*v13-v4*v12 ; v16 = sqrt(pow(v5,2)+pow(v15,2)+pow(v14,2)) ; v17 = 1/v16 ; v18 = zd-zc ; v19 = v7*v13-v1*v18 ; v20 = v4*v18-v9*v13 ; v21 = sqrt(pow(v20,2)+pow(v19,2)+pow(v10,2)) ; v22 = 1/v21 ; v23 = v15*v17*v20*v22+v14*v17*v19*v22+v5*v10*v17*v22 ; v24 = pow(v4,2) ; v25 = pow(v13,2) ; v26 = sqrt(v25+v24+pow(v1,2)) ; v27 = 1/v26 ; v28 = v4*v15*v27*v17-v1*v14*v27*v17 ; v29 = zc-zd ; v30 = 2*v29*v20+2*v7*v10 ; v31 = 1/pow(v21,3) ; v32 = v1*v5*v27*v17-v13*v15*v27*v17 ; v33 = v13*v14*v27*v17-v4*v5*v27*v17 ; v34 = v6+xa ; v35 = zc+v11 ; v36 = 2*v35*v15+2*v34*v5 ; v37 = 1/pow(v16,3) ; v38 = 1/pow(v26,3) ; v39 = (v5*v27*v17-v34*v4*v27*v17+v4*v13*v14*v38*v17-v24*v5*v38*v17-v13*v14*v36*v27*v37/2+v4*v5*v36*v27*v37/2)*v20*v22+(-v35*v13*v27*v17+v34*v1*v27*v17-v4*v13*v15*v38*v17+v1*v4*v5*v38*v17+v13*v15*v36*v27*v37/2-v1*v5*v36*v27*v37/2)*v19*v22+v33*v29*v22+v7*v28*v22+v10*(-v15*v27*v17+v4*v35*v27*v17+v24*v15*v38*v17-v1*v4*v14*v38*v17-v4*v15*v36*v27*v37/2+v1*v14*v36*v27*v37/2)*v22-v33*v20*v30*v31/2-v32*v19*v30*v31/2-v10*v28*v30*v31/2 ; v40 = v33*v20*v22+v32*v19*v22+v10*v28*v22 ; v41 = pow(v40,2)+pow(v23,2) ; v42 = 1/v41 ; v43 = v35*v17*v20*v22-v15*v36*v37*v20*v22/2-v14*v36*v37*v19*v22/2+v15*v17*v29*v22+v34*v10*v17*v22+v7*v5*v17*v22-v5*v10*v36*v37*v22/2-v15*v17*v20*v30*v31/2-v14*v17*v19*v30*v31/2-v5*v10*v17*v30*v31/2 ; v44 = v8+yb ; v45 = 2*v13*v14+2*v44*v5 ; v46 = -v15*v45*v37*v20*v22/2+v13*v17*v19*v22-v14*v45*v37*v19*v22/2+v44*v10*v17*v22-v5*v10*v45*v37*v22/2 ; v47 = -v1*v13*v27*v17-v4*v15*v45*v27*v37/2+v1*v14*v45*v27*v37/2 ; v48 = v1*v44*v27*v17+v13*v15*v45*v27*v37/2-v1*v5*v45*v27*v37/2 ; v49 = v25*v27*v17-v44*v4*v27*v17-v13*v14*v45*v27*v37/2+v4*v5*v45*v27*v37/2 ; v50 = v49*v20*v22+v48*v19*v22+v10*v47*v22 ; v51 = 2*v39*v40+2*v43*v23 ; v52 = 1/pow(v41,2) ; v53 = 1/pow(v16,5) ; v54 = 2*v5+2*v34*v44 ; return 2*k*(v43*v50*v42-(-v35*v45*v37*v20*v22/2-v54*v15*v37*v20*v22/2+3*v15*v45*v36*v53*v20*v22/4-v13*v36*v37*v19*v22/2-v54*v14*v37*v19*v22/2+3*v14*v45*v36*v53*v19*v22/4-v15*v45*v37*v29*v22/2+v10*v17*v22+v7*v44*v17*v22-v44*v10*v36*v37*v22/2-v34*v10*v45*v37*v22/2-v7*v5*v45*v37*v22/2-v5*v54*v10*v37*v22/2+3*v5*v10*v45*v36*v53*v22/4+v15*v45*v37*v20*v30*v31/4-v13*v17*v19*v30*v31/2+v14*v45*v37*v19*v30*v31/4-v44*v10*v17*v30*v31/2+v5*v10*v45*v37*v30*v31/4)*v40*v42-v46*v39*v42+v23*((-v4*v27*v17+v44*v27*v17+v4*v25*v38*v17-v44*v24*v38*v17-v25*v36*v27*v37/2+v44*v4*v36*v27*v37/2-v5*v45*v27*v37/2+v34*v4*v45*v27*v37/2-v54*v13*v14*v27*v37/2+v4*v5*v54*v27*v37/2-v4*v13*v14*v45*v38*v37/2+v24*v5*v45*v38*v37/2+3*v13*v14*v45*v36*v27*v53/4-3*v4*v5*v45*v36*v27*v53/4)*v20*v22+(v1*v27*v17+v1*v44*v4*v38*v17-v1*v44*v36*v27*v37/2+v35*v13*v45*v27*v37/2-v34*v1*v45*v27*v37/2+v54*v13*v15*v27*v37/2-v1*v5*v54*v27*v37/2+v4*v13*v15*v45*v38*v37/2-v1*v4*v5*v45*v38*v37/2-3*v13*v15*v45*v36*v27*v53/4+3*v1*v5*v45*v36*v27*v53/4)*v19*v22+v49*v29*v22+v7*v47*v22+v10*(-v1*v4*v13*v38*v17+v1*v13*v36*v27*v37/2+v15*v45*v27*v37/2-v4*v35*v45*v27*v37/2-v4*v54*v15*v27*v37/2+v1*v54*v14*v27*v37/2-v24*v15*v45*v38*v37/2+v1*v4*v14*v45*v38*v37/2+3*v4*v15*v45*v36*v27*v53/4-3*v1*v14*v45*v36*v27*v53/4)*v22-v49*v20*v30*v31/2-v48*v19*v30*v31/2-v10*v47*v30*v31/2)*v42-v23*v50*v51*v52+v46*v40*v51*v52)*rad_subtraction(atan2(v40,v23), eq)+2*k*(v23*v39*v42-v43*v40*v42)*(v23*v50*v42-v46*v40*v42) ; }

double HarmonicDihedralConstraintFunctions::hessianXaZb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = xc-xb ; v2 = yb-ya ; v3 = -xa ; v4 = xb+v3 ; v5 = yc-yb ; v6 = v4*v5-v1*v2 ; v7 = xd-xc ; v8 = -yc ; v9 = yd+v8 ; v10 = v1*v9-v7*v5 ; v11 = zb-za ; v12 = zc-zb ; v13 = v1*v11-v4*v12 ; v14 = v2*v12-v5*v11 ; v15 = sqrt(pow(v6,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = zd-zc ; v18 = v7*v12-v1*v17 ; v19 = v5*v17-v9*v12 ; v20 = sqrt(pow(v19,2)+pow(v18,2)+pow(v10,2)) ; v21 = 1/v20 ; v22 = v14*v16*v19*v21+v13*v16*v18*v21+v6*v10*v16*v21 ; v23 = pow(v12,2) ; v24 = sqrt(pow(v5,2)+v23+pow(v1,2)) ; v25 = 1/v24 ; v26 = v5*v14*v25*v16-v1*v13*v25*v16 ; v27 = xc-xd ; v28 = 2*v9*v19+2*v27*v18 ; v29 = 1/pow(v20,3) ; v30 = v1*v6*v25*v16-v12*v14*v25*v16 ; v31 = v12*v13*v25*v16-v5*v6*v25*v16 ; v32 = xc+v3 ; v33 = v8+ya ; v34 = 2*v33*v14+2*v32*v13 ; v35 = 1/pow(v15,3) ; v36 = 1/pow(v24,3) ; v37 = (-v13*v25*v16+v32*v12*v25*v16+v23*v13*v36*v16-v5*v6*v12*v36*v16-v12*v13*v34*v25*v35/2+v5*v6*v34*v25*v35/2)*v19*v21+(v14*v25*v16-v33*v12*v25*v16-v23*v14*v36*v16+v1*v6*v12*v36*v16+v12*v14*v34*v25*v35/2-v1*v6*v34*v25*v35/2)*v18*v21+v27*v30*v21+v9*v31*v21+v10*(v33*v5*v25*v16-v32*v1*v25*v16+v5*v12*v14*v36*v16-v1*v12*v13*v36*v16-v5*v14*v34*v25*v35/2+v1*v13*v34*v25*v35/2)*v21-v31*v19*v28*v29/2-v30*v18*v28*v29/2-v10*v26*v28*v29/2 ; v38 = v31*v19*v21+v30*v18*v21+v10*v26*v21 ; v39 = pow(v38,2)+pow(v22,2) ; v40 = 1/v39 ; v41 = v33*v16*v19*v21-v14*v34*v35*v19*v21/2+v32*v16*v18*v21-v13*v34*v35*v18*v21/2+v9*v14*v16*v21+v27*v13*v16*v21-v6*v10*v34*v35*v21/2-v14*v16*v19*v28*v29/2-v13*v16*v18*v28*v29/2-v6*v10*v16*v28*v29/2 ; v42 = v8+yb ; v43 = 2*v12*v13+2*v42*v6 ; v44 = -v14*v43*v35*v19*v21/2+v12*v16*v18*v21-v13*v43*v35*v18*v21/2+v42*v10*v16*v21-v6*v10*v43*v35*v21/2 ; v45 = -v1*v12*v25*v16-v5*v14*v43*v25*v35/2+v1*v13*v43*v25*v35/2 ; v46 = v1*v42*v25*v16+v12*v14*v43*v25*v35/2-v1*v6*v43*v25*v35/2 ; v47 = v23*v25*v16-v42*v5*v25*v16-v12*v13*v43*v25*v35/2+v5*v6*v43*v25*v35/2 ; v48 = v47*v19*v21+v46*v18*v21+v10*v45*v21 ; v49 = 2*v37*v38+2*v41*v22 ; v50 = 1/pow(v39,2) ; v51 = 1/pow(v15,5) ; v52 = 2*v32*v12-2*v13 ; return 2*rad_subtraction(atan2(v38,v22), eq)*(v22*v40*(v19*v21*(-3*v5*v6*v43*v34*v25*v51/4+3*v12*v13*v43*v34*v25*v51/4+pow(v12,3)*v16*v36-v23*v13*v43*v36*v35/2+v5*v6*v12*v43*v36*v35/2+v5*v6*v52*v25*v35/2-v12*v13*v52*v25*v35/2+v13*v43*v25*v35/2-v32*v12*v43*v25*v35/2+v42*v5*v34*v25*v35/2-v23*v34*v25*v35/2-v42*v5*v12*v36*v16-2*v12*v25*v16)-v10*v45*v28*v29/2-v47*v19*v28*v29/2-v46*v18*v28*v29/2+v9*v47*v21+v27*v46*v21+(v1*v42*v12*v36*v16-v1*v42*v34*v25*v35/2-v14*v43*v25*v35/2+v33*v12*v43*v25*v35/2+v12*v14*v52*v25*v35/2-v1*v6*v52*v25*v35/2+v23*v14*v43*v36*v35/2-v1*v6*v12*v43*v36*v35/2-3*v12*v14*v43*v34*v25*v51/4+3*v1*v6*v43*v34*v25*v51/4)*v18*v21+v10*(v1*v25*v16-v1*v23*v36*v16+v1*v12*v34*v25*v35/2-v33*v5*v43*v25*v35/2+v32*v1*v43*v25*v35/2-v5*v14*v52*v25*v35/2+v1*v13*v52*v25*v35/2-v5*v12*v14*v43*v36*v35/2+v1*v12*v13*v43*v36*v35/2+3*v5*v14*v43*v34*v25*v51/4-3*v1*v13*v43*v34*v25*v51/4)*v21)-v22*v48*v49*v50+v44*v38*v49*v50+v41*v48*v40-(-v33*v43*v35*v19*v21/2-v14*v52*v35*v19*v21/2+3*v14*v43*v34*v51*v19*v21/4-v16*v18*v21-v12*v34*v35*v18*v21/2-v32*v43*v35*v18*v21/2-v13*v52*v35*v18*v21/2+3*v13*v43*v34*v51*v18*v21/4+v27*v12*v16*v21-v42*v10*v34*v35*v21/2-v9*v14*v43*v35*v21/2-v27*v13*v43*v35*v21/2-v6*v10*v52*v35*v21/2+3*v6*v10*v43*v34*v51*v21/4+v14*v43*v35*v19*v28*v29/4-v12*v16*v18*v28*v29/2+v13*v43*v35*v18*v28*v29/4-v42*v10*v16*v28*v29/2+v6*v10*v43*v35*v28*v29/4)*v38*v40-v44*v37*v40)*k+2*k*(v22*v37*v40-v41*v38*v40)*(v22*v48*v40-v44*v38*v40) ; }

double HarmonicDihedralConstraintFunctions::hessianXaXc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = -yb ; v5 = yc+v4 ; v6 = v3*v5-v1*v2 ; v7 = xd-xc ; v8 = -yc ; v9 = yd+v8 ; v10 = v1*v9-v7*v5 ; v11 = zb-za ; v12 = zc-zb ; v13 = v1*v11-v3*v12 ; v14 = v2*v12-v5*v11 ; v15 = sqrt(pow(v6,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = zd-zc ; v18 = v7*v12-v1*v17 ; v19 = v5*v17-v9*v12 ; v20 = sqrt(pow(v19,2)+pow(v18,2)+pow(v10,2)) ; v21 = 1/v20 ; v22 = v14*v16*v19*v21+v13*v16*v18*v21+v6*v10*v16*v21 ; v23 = pow(v1,2) ; v24 = pow(v12,2) ; v25 = sqrt(pow(v5,2)+v24+v23) ; v26 = 1/v25 ; v27 = v5*v14*v26*v16-v1*v13*v26*v16 ; v28 = yd+v4 ; v29 = zb-zd ; v30 = 2*v29*v18+2*v28*v10 ; v31 = 1/pow(v20,3) ; v32 = v1*v6*v26*v16-v12*v14*v26*v16 ; v33 = v12*v13*v26*v16-v5*v6*v26*v16 ; v34 = v4+ya ; v35 = 2*v11*v13+2*v34*v6 ; v36 = 1/pow(v15,3) ; v37 = 1/pow(v25,3) ; v38 = (v11*v12*v26*v16-v34*v5*v26*v16-v1*v12*v13*v37*v16+v1*v5*v6*v37*v16-v12*v13*v35*v26*v36/2+v5*v6*v35*v26*v36/2)*v19*v21+(v6*v26*v16+v1*v34*v26*v16+v1*v12*v14*v37*v16-v23*v6*v37*v16+v12*v14*v35*v26*v36/2-v1*v6*v35*v26*v36/2)*v18*v21+v32*v29*v21+v28*v27*v21+v10*(-v13*v26*v16-v1*v11*v26*v16-v1*v5*v14*v37*v16+v23*v13*v37*v16-v5*v14*v35*v26*v36/2+v1*v13*v35*v26*v36/2)*v21-v33*v19*v30*v31/2-v32*v18*v30*v31/2-v10*v27*v30*v31/2 ; v39 = v33*v19*v21+v32*v18*v21+v10*v27*v21 ; v40 = pow(v39,2)+pow(v22,2) ; v41 = 1/v40 ; v42 = -v14*v35*v36*v19*v21/2+v11*v16*v18*v21-v13*v35*v36*v18*v21/2+v13*v16*v29*v21+v34*v10*v16*v21+v6*v28*v16*v21-v6*v10*v35*v36*v21/2-v14*v16*v19*v30*v31/2-v13*v16*v18*v30*v31/2-v6*v10*v16*v30*v31/2 ; v43 = v8+yb ; v44 = 2*v12*v13+2*v43*v6 ; v45 = -v14*v44*v36*v19*v21/2+v12*v16*v18*v21-v13*v44*v36*v18*v21/2+v43*v10*v16*v21-v6*v10*v44*v36*v21/2 ; v46 = -v1*v12*v26*v16-v5*v14*v44*v26*v36/2+v1*v13*v44*v26*v36/2 ; v47 = v1*v43*v26*v16+v12*v14*v44*v26*v36/2-v1*v6*v44*v26*v36/2 ; v48 = v24*v26*v16-v43*v5*v26*v16-v12*v13*v44*v26*v36/2+v5*v6*v44*v26*v36/2 ; v49 = v48*v19*v21+v47*v18*v21+v10*v46*v21 ; v50 = 2*v38*v39+2*v42*v22 ; v51 = 1/pow(v40,2) ; v52 = 1/pow(v15,5) ; v53 = 2*v11*v12+2*v34*v43 ; return 2*k*(v42*v49*v41-(-v14*v53*v36*v19*v21/2+3*v14*v35*v44*v52*v19*v21/4-v11*v44*v36*v18*v21/2-v12*v35*v36*v18*v21/2-v13*v53*v36*v18*v21/2+3*v13*v35*v44*v52*v18*v21/4+v12*v16*v29*v21-v13*v44*v36*v29*v21/2+v43*v28*v16*v21-v34*v10*v44*v36*v21/2-v6*v28*v44*v36*v21/2-v43*v10*v35*v36*v21/2-v6*v10*v53*v36*v21/2+3*v6*v10*v35*v44*v52*v21/4+v14*v44*v36*v19*v30*v31/4-v12*v16*v18*v30*v31/2+v13*v44*v36*v18*v30*v31/4-v43*v10*v16*v30*v31/2+v6*v10*v44*v36*v30*v31/4)*v39*v41-v45*v38*v41+v22*((-v1*v24*v37*v16+v1*v43*v5*v37*v16-v11*v12*v44*v26*v36/2+v34*v5*v44*v26*v36/2-v24*v35*v26*v36/2+v43*v5*v35*v26*v36/2-v12*v13*v53*v26*v36/2+v5*v6*v53*v26*v36/2+v1*v12*v13*v44*v37*v36/2-v1*v5*v6*v44*v37*v36/2+3*v12*v13*v35*v44*v26*v52/4-3*v5*v6*v35*v44*v26*v52/4)*v19*v21+(v43*v26*v16-v23*v43*v37*v16-v6*v44*v26*v36/2-v1*v34*v44*v26*v36/2-v1*v43*v35*v26*v36/2+v12*v14*v53*v26*v36/2-v1*v6*v53*v26*v36/2-v1*v12*v14*v44*v37*v36/2+v23*v6*v44*v37*v36/2-3*v12*v14*v35*v44*v26*v52/4+3*v1*v6*v35*v44*v26*v52/4)*v18*v21+v47*v29*v21+v28*v46*v21+v10*(-v12*v26*v16+v23*v12*v37*v16+v13*v44*v26*v36/2+v1*v11*v44*v26*v36/2+v1*v12*v35*v26*v36/2-v5*v14*v53*v26*v36/2+v1*v13*v53*v26*v36/2+v1*v5*v14*v44*v37*v36/2-v23*v13*v44*v37*v36/2+3*v5*v14*v35*v44*v26*v52/4-3*v1*v13*v35*v44*v26*v52/4)*v21-v48*v19*v30*v31/2-v47*v18*v30*v31/2-v10*v46*v30*v31/2)*v41-v22*v49*v50*v51+v45*v39*v50*v51)*rad_subtraction(atan2(v39,v22), eq)+2*k*(v22*v38*v41-v42*v39*v41)*(v22*v49*v41-v45*v39*v41) ; }

double HarmonicDihedralConstraintFunctions::hessianXaYc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = xd-xc ; v7 = -yc ; v8 = yd+v7 ; v9 = v1*v8-v6*v4 ; v10 = zb-za ; v11 = -zb ; v12 = zc+v11 ; v13 = v1*v10-v3*v12 ; v14 = v2*v12-v4*v10 ; v15 = sqrt(pow(v5,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = zd-zc ; v18 = v6*v12-v1*v17 ; v19 = v4*v17-v8*v12 ; v20 = sqrt(pow(v9,2)+pow(v19,2)+pow(v18,2)) ; v21 = 1/v20 ; v22 = v14*v16*v19*v21+v13*v16*v18*v21+v5*v9*v16*v21 ; v23 = pow(v4,2) ; v24 = pow(v12,2) ; v25 = sqrt(v24+v23+pow(v1,2)) ; v26 = 1/v25 ; v27 = v4*v14*v26*v16-v1*v13*v26*v16 ; v28 = xb-xd ; v29 = zd+v11 ; v30 = 2*v29*v19+2*v28*v9 ; v31 = 1/pow(v20,3) ; v32 = v1*v5*v26*v16-v12*v14*v26*v16 ; v33 = v12*v13*v26*v16-v4*v5*v26*v16 ; v34 = v11+za ; v35 = 2*v34*v14+2*v3*v5 ; v36 = 1/pow(v15,3) ; v37 = 1/pow(v25,3) ; v38 = (-v5*v26*v16-v3*v4*v26*v16-v4*v12*v13*v37*v16+v23*v5*v37*v16-v12*v13*v35*v26*v36/2+v4*v5*v35*v26*v36/2)*v19*v21+(-v34*v12*v26*v16+v3*v1*v26*v16+v4*v12*v14*v37*v16-v1*v4*v5*v37*v16+v12*v14*v35*v26*v36/2-v1*v5*v35*v26*v36/2)*v18*v21+v33*v29*v21+v28*v27*v21+v9*(v14*v26*v16+v4*v34*v26*v16-v23*v14*v37*v16+v1*v4*v13*v37*v16-v4*v14*v35*v26*v36/2+v1*v13*v35*v26*v36/2)*v21-v33*v19*v30*v31/2-v32*v18*v30*v31/2-v9*v27*v30*v31/2 ; v39 = v33*v19*v21+v32*v18*v21+v9*v27*v21 ; v40 = pow(v39,2)+pow(v22,2) ; v41 = 1/v40 ; v42 = v34*v16*v19*v21-v14*v35*v36*v19*v21/2-v13*v35*v36*v18*v21/2+v14*v16*v29*v21+v3*v9*v16*v21+v28*v5*v16*v21-v5*v9*v35*v36*v21/2-v14*v16*v19*v30*v31/2-v13*v16*v18*v30*v31/2-v5*v9*v16*v30*v31/2 ; v43 = v7+yb ; v44 = 2*v12*v13+2*v43*v5 ; v45 = -v14*v44*v36*v19*v21/2+v12*v16*v18*v21-v13*v44*v36*v18*v21/2+v43*v9*v16*v21-v5*v9*v44*v36*v21/2 ; v46 = -v1*v12*v26*v16-v4*v14*v44*v26*v36/2+v1*v13*v44*v26*v36/2 ; v47 = v1*v43*v26*v16+v12*v14*v44*v26*v36/2-v1*v5*v44*v26*v36/2 ; v48 = v24*v26*v16-v43*v4*v26*v16-v12*v13*v44*v26*v36/2+v4*v5*v44*v26*v36/2 ; v49 = v48*v19*v21+v47*v18*v21+v9*v46*v21 ; v50 = 2*v38*v39+2*v42*v22 ; v51 = 1/pow(v40,2) ; v52 = 1/pow(v15,5) ; v53 = 2*v3*v43-2*v5 ; return 2*k*(v42*v49*v41-(-v34*v44*v36*v19*v21/2-v53*v14*v36*v19*v21/2+3*v14*v44*v35*v52*v19*v21/4-v12*v35*v36*v18*v21/2-v53*v13*v36*v18*v21/2+3*v13*v44*v35*v52*v18*v21/4-v14*v44*v36*v29*v21/2-v9*v16*v21+v28*v43*v16*v21-v43*v9*v35*v36*v21/2-v3*v9*v44*v36*v21/2-v28*v5*v44*v36*v21/2-v5*v53*v9*v36*v21/2+3*v5*v9*v44*v35*v52*v21/4+v14*v44*v36*v19*v30*v31/4-v12*v16*v18*v30*v31/2+v13*v44*v36*v18*v30*v31/4-v43*v9*v16*v30*v31/2+v5*v9*v44*v36*v30*v31/4)*v39*v41-v45*v38*v41+v22*((v4*v26*v16-v43*v26*v16-v4*v24*v37*v16+v43*v23*v37*v16-v24*v35*v26*v36/2+v43*v4*v35*v26*v36/2+v5*v44*v26*v36/2+v3*v4*v44*v26*v36/2-v53*v12*v13*v26*v36/2+v4*v5*v53*v26*v36/2+v4*v12*v13*v44*v37*v36/2-v23*v5*v44*v37*v36/2+3*v12*v13*v44*v35*v26*v52/4-3*v4*v5*v44*v35*v26*v52/4)*v19*v21+(-v1*v26*v16-v1*v43*v4*v37*v16-v1*v43*v35*v26*v36/2+v34*v12*v44*v26*v36/2-v3*v1*v44*v26*v36/2+v53*v12*v14*v26*v36/2-v1*v5*v53*v26*v36/2-v4*v12*v14*v44*v37*v36/2+v1*v4*v5*v44*v37*v36/2-3*v12*v14*v44*v35*v26*v52/4+3*v1*v5*v44*v35*v26*v52/4)*v18*v21+v48*v29*v21+v28*v46*v21+v9*(v1*v4*v12*v37*v16+v1*v12*v35*v26*v36/2-v14*v44*v26*v36/2-v4*v34*v44*v26*v36/2-v4*v53*v14*v26*v36/2+v1*v53*v13*v26*v36/2+v23*v14*v44*v37*v36/2-v1*v4*v13*v44*v37*v36/2+3*v4*v14*v44*v35*v26*v52/4-3*v1*v13*v44*v35*v26*v52/4)*v21-v48*v19*v30*v31/2-v47*v18*v30*v31/2-v9*v46*v30*v31/2)*v41-v22*v49*v50*v51+v45*v39*v50*v51)*rad_subtraction(atan2(v39,v22), eq)+2*k*(v22*v38*v41-v42*v39*v41)*(v22*v49*v41-v45*v39*v41) ; }

double HarmonicDihedralConstraintFunctions::hessianXaZc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = -xb ; v2 = xc+v1 ; v3 = yb-ya ; v4 = xb-xa ; v5 = yc-yb ; v6 = v4*v5-v2*v3 ; v7 = xd-xc ; v8 = -yc ; v9 = yd+v8 ; v10 = v2*v9-v7*v5 ; v11 = zb-za ; v12 = zc-zb ; v13 = v2*v11-v4*v12 ; v14 = v3*v12-v5*v11 ; v15 = sqrt(pow(v6,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = zd-zc ; v18 = v7*v12-v2*v17 ; v19 = v5*v17-v9*v12 ; v20 = sqrt(pow(v19,2)+pow(v18,2)+pow(v10,2)) ; v21 = 1/v20 ; v22 = v14*v16*v19*v21+v13*v16*v18*v21+v6*v10*v16*v21 ; v23 = pow(v12,2) ; v24 = sqrt(pow(v5,2)+v23+pow(v2,2)) ; v25 = 1/v24 ; v26 = v5*v14*v25*v16-v2*v13*v25*v16 ; v27 = xd+v1 ; v28 = yb-yd ; v29 = 2*v28*v19+2*v27*v18 ; v30 = 1/pow(v20,3) ; v31 = v2*v6*v25*v16-v12*v14*v25*v16 ; v32 = v12*v13*v25*v16-v5*v6*v25*v16 ; v33 = v1+xa ; v34 = 2*v3*v14+2*v33*v13 ; v35 = 1/pow(v15,3) ; v36 = 1/pow(v24,3) ; v37 = (v13*v25*v16+v33*v12*v25*v16-v23*v13*v36*v16+v5*v6*v12*v36*v16-v12*v13*v34*v25*v35/2+v5*v6*v34*v25*v35/2)*v19*v21+(-v14*v25*v16-v3*v12*v25*v16+v23*v14*v36*v16-v2*v6*v12*v36*v16+v12*v14*v34*v25*v35/2-v2*v6*v34*v25*v35/2)*v18*v21+v27*v31*v21+v28*v32*v21+v10*(v3*v5*v25*v16-v33*v2*v25*v16-v5*v12*v14*v36*v16+v2*v12*v13*v36*v16-v5*v14*v34*v25*v35/2+v2*v13*v34*v25*v35/2)*v21-v32*v19*v29*v30/2-v31*v18*v29*v30/2-v10*v26*v29*v30/2 ; v38 = v32*v19*v21+v31*v18*v21+v10*v26*v21 ; v39 = pow(v38,2)+pow(v22,2) ; v40 = 1/v39 ; v41 = v3*v16*v19*v21-v14*v34*v35*v19*v21/2+v33*v16*v18*v21-v13*v34*v35*v18*v21/2+v28*v14*v16*v21+v27*v13*v16*v21-v6*v10*v34*v35*v21/2-v14*v16*v19*v29*v30/2-v13*v16*v18*v29*v30/2-v6*v10*v16*v29*v30/2 ; v42 = v8+yb ; v43 = 2*v12*v13+2*v42*v6 ; v44 = -v14*v43*v35*v19*v21/2+v12*v16*v18*v21-v13*v43*v35*v18*v21/2+v42*v10*v16*v21-v6*v10*v43*v35*v21/2 ; v45 = -v2*v12*v25*v16-v5*v14*v43*v25*v35/2+v2*v13*v43*v25*v35/2 ; v46 = v2*v42*v25*v16+v12*v14*v43*v25*v35/2-v2*v6*v43*v25*v35/2 ; v47 = v23*v25*v16-v42*v5*v25*v16-v12*v13*v43*v25*v35/2+v5*v6*v43*v25*v35/2 ; v48 = v47*v19*v21+v46*v18*v21+v10*v45*v21 ; v49 = 2*v37*v38+2*v41*v22 ; v50 = 1/pow(v39,2) ; v51 = 1/pow(v15,5) ; v52 = 2*v13+2*v33*v12 ; return 2*rad_subtraction(atan2(v38,v22), eq)*(v22*v40*(v19*v21*(-3*v5*v6*v43*v34*v25*v51/4+3*v12*v13*v43*v34*v25*v51/4-pow(v12,3)*v16*v36+v23*v13*v43*v36*v35/2-v5*v6*v12*v43*v36*v35/2+v5*v6*v52*v25*v35/2-v12*v13*v52*v25*v35/2-v13*v43*v25*v35/2-v33*v12*v43*v25*v35/2+v42*v5*v34*v25*v35/2-v23*v34*v25*v35/2+v42*v5*v12*v36*v16+2*v12*v25*v16)-v10*v45*v29*v30/2-v47*v19*v29*v30/2-v46*v18*v29*v30/2+v28*v47*v21+v27*v46*v21+(-v2*v42*v12*v36*v16-v2*v42*v34*v25*v35/2+v14*v43*v25*v35/2+v3*v12*v43*v25*v35/2+v12*v14*v52*v25*v35/2-v2*v6*v52*v25*v35/2-v23*v14*v43*v36*v35/2+v2*v6*v12*v43*v36*v35/2-3*v12*v14*v43*v34*v25*v51/4+3*v2*v6*v43*v34*v25*v51/4)*v18*v21+v10*(-v2*v25*v16+v2*v23*v36*v16+v2*v12*v34*v25*v35/2-v3*v5*v43*v25*v35/2+v33*v2*v43*v25*v35/2-v5*v14*v52*v25*v35/2+v2*v13*v52*v25*v35/2+v5*v12*v14*v43*v36*v35/2-v2*v12*v13*v43*v36*v35/2+3*v5*v14*v43*v34*v25*v51/4-3*v2*v13*v43*v34*v25*v51/4)*v21)-v22*v48*v49*v50+v44*v38*v49*v50+v41*v48*v40-(-v3*v43*v35*v19*v21/2-v14*v52*v35*v19*v21/2+3*v14*v43*v34*v51*v19*v21/4+v16*v18*v21-v12*v34*v35*v18*v21/2-v33*v43*v35*v18*v21/2-v13*v52*v35*v18*v21/2+3*v13*v43*v34*v51*v18*v21/4+v27*v12*v16*v21-v42*v10*v34*v35*v21/2-v28*v14*v43*v35*v21/2-v27*v13*v43*v35*v21/2-v6*v10*v52*v35*v21/2+3*v6*v10*v43*v34*v51*v21/4+v14*v43*v35*v19*v29*v30/4-v12*v16*v18*v29*v30/2+v13*v43*v35*v18*v29*v30/4-v42*v10*v16*v29*v30/2+v6*v10*v43*v35*v29*v30/4)*v38*v40-v44*v37*v40)*k+2*k*(v22*v37*v40-v41*v38*v40)*(v22*v48*v40-v44*v38*v40) ; }

double HarmonicDihedralConstraintFunctions::hessianXaXd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43 ; v1 = xd-xc ; v2 = yc-yb ; v3 = xc-xb ; v4 = -yc ; v5 = yd+v4 ; v6 = v3*v5-v1*v2 ; v7 = zb-za ; v8 = xb-xa ; v9 = zc-zb ; v10 = v3*v7-v8*v9 ; v11 = pow(v9,2) ; v12 = 1/sqrt(pow(v3,2)+pow(v2,2)+v11) ; v13 = yb-ya ; v14 = v8*v2-v3*v13 ; v15 = v13*v9-v2*v7 ; v16 = sqrt(pow(v15,2)+pow(v14,2)+pow(v10,2)) ; v17 = 1/v16 ; v18 = v2*v15*v12*v17-v3*v10*v12*v17 ; v19 = v4+yb ; v20 = zd-zc ; v21 = v1*v9-v3*v20 ; v22 = 2*v9*v21+2*v19*v6 ; v23 = v2*v20-v5*v9 ; v24 = sqrt(pow(v6,2)+pow(v23,2)+pow(v21,2)) ; v25 = 1/pow(v24,3) ; v26 = v3*v14*v12*v17-v9*v15*v12*v17 ; v27 = v9*v10*v12*v17-v2*v14*v12*v17 ; v28 = 1/v24 ; v29 = v9*v26*v28+v19*v18*v28-v27*v23*v22*v25/2-v26*v21*v22*v25/2-v6*v18*v22*v25/2 ; v30 = v15*v17*v23*v28+v10*v17*v21*v28+v14*v6*v17*v28 ; v31 = v27*v23*v28+v26*v21*v28+v6*v18*v28 ; v32 = pow(v31,2)+pow(v30,2) ; v33 = 1/v32 ; v34 = v9*v10*v17*v28+v19*v14*v17*v28-v15*v17*v23*v22*v25/2-v10*v17*v21*v22*v25/2-v14*v6*v17*v22*v25/2 ; v35 = 2*v9*v10+2*v19*v14 ; v36 = 1/pow(v16,3) ; v37 = -v15*v35*v36*v23*v28/2+v9*v17*v21*v28-v10*v35*v36*v21*v28/2+v19*v6*v17*v28-v14*v6*v35*v36*v28/2 ; v38 = -v3*v9*v12*v17-v2*v15*v35*v12*v36/2+v3*v10*v35*v12*v36/2 ; v39 = v3*v19*v12*v17+v9*v15*v35*v12*v36/2-v3*v14*v35*v12*v36/2 ; v40 = v11*v12*v17-v19*v2*v12*v17-v9*v10*v35*v12*v36/2+v2*v14*v35*v12*v36/2 ; v41 = v40*v23*v28+v39*v21*v28+v6*v38*v28 ; v42 = 2*v29*v31+2*v34*v30 ; v43 = 1/pow(v32,2) ; return 2*rad_subtraction(atan2(v31,v30), eq)*(-v30*v41*v42*v43+v37*v31*v42*v43+v34*v41*v33-v29*v37*v33-(-v19*v14*v35*v36*v28/2-v9*v10*v35*v36*v28/2+v17*pow(v19,2)*v28+v11*v17*v28+v14*v6*v35*v36*v22*v25/4+v15*v35*v36*v23*v22*v25/4+v10*v35*v36*v21*v22*v25/4-v9*v17*v21*v22*v25/2-v19*v6*v17*v22*v25/2)*v31*v33+(v19*v38*v28+v9*v39*v28-v40*v23*v22*v25/2-v39*v21*v22*v25/2-v6*v38*v22*v25/2)*v30*v33)*k+2*k*(v29*v30*v33-v34*v31*v33)*(v30*v41*v33-v37*v31*v33) ; }

double HarmonicDihedralConstraintFunctions::hessianXaYd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45 ; v1 = xd-xc ; v2 = yc-yb ; v3 = xc-xb ; v4 = -yc ; v5 = yd+v4 ; v6 = v3*v5-v1*v2 ; v7 = zb-za ; v8 = xb-xa ; v9 = zc-zb ; v10 = v3*v7-v8*v9 ; v11 = pow(v9,2) ; v12 = 1/sqrt(pow(v3,2)+pow(v2,2)+v11) ; v13 = yb-ya ; v14 = v8*v2-v3*v13 ; v15 = v13*v9-v2*v7 ; v16 = sqrt(pow(v15,2)+pow(v14,2)+pow(v10,2)) ; v17 = 1/v16 ; v18 = v2*v15*v12*v17-v3*v10*v12*v17 ; v19 = -zc ; v20 = v19+zb ; v21 = zd+v19 ; v22 = v2*v21-v5*v9 ; v23 = 2*v20*v22+2*v3*v6 ; v24 = v1*v9-v3*v21 ; v25 = sqrt(pow(v6,2)+pow(v24,2)+pow(v22,2)) ; v26 = 1/pow(v25,3) ; v27 = v3*v14*v12*v17-v9*v15*v12*v17 ; v28 = v9*v10*v12*v17-v2*v14*v12*v17 ; v29 = 1/v25 ; v30 = v3*v18*v29+v20*v28*v29-v28*v22*v23*v26/2-v27*v24*v23*v26/2-v6*v18*v23*v26/2 ; v31 = v15*v17*v22*v29+v10*v17*v24*v29+v14*v6*v17*v29 ; v32 = v28*v22*v29+v27*v24*v29+v6*v18*v29 ; v33 = pow(v32,2)+pow(v31,2) ; v34 = 1/v33 ; v35 = v20*v15*v17*v29+v3*v14*v17*v29-v15*v17*v22*v23*v26/2-v10*v17*v24*v23*v26/2-v14*v6*v17*v23*v26/2 ; v36 = v4+yb ; v37 = 2*v9*v10+2*v36*v14 ; v38 = 1/pow(v16,3) ; v39 = -v15*v37*v38*v22*v29/2+v9*v17*v24*v29-v10*v37*v38*v24*v29/2+v36*v6*v17*v29-v14*v6*v37*v38*v29/2 ; v40 = -v3*v9*v12*v17-v2*v15*v37*v12*v38/2+v3*v10*v37*v12*v38/2 ; v41 = v3*v36*v12*v17+v9*v15*v37*v12*v38/2-v3*v14*v37*v12*v38/2 ; v42 = v11*v12*v17-v36*v2*v12*v17-v9*v10*v37*v12*v38/2+v2*v14*v37*v12*v38/2 ; v43 = v42*v22*v29+v41*v24*v29+v6*v40*v29 ; v44 = 2*v30*v32+2*v35*v31 ; v45 = 1/pow(v33,2) ; return 2*k*(v35*v43*v34-(v3*v36*v17*v29-v20*v15*v37*v38*v29/2-v3*v14*v37*v38*v29/2+v15*v37*v38*v22*v23*v26/4-v9*v17*v24*v23*v26/2+v10*v37*v38*v24*v23*v26/4-v36*v6*v17*v23*v26/2+v14*v6*v37*v38*v23*v26/4)*v32*v34+(v20*v42*v29+v3*v40*v29-v42*v22*v23*v26/2-v41*v24*v23*v26/2-v6*v40*v23*v26/2)*v31*v34-v30*v39*v34-v31*v43*v44*v45+v39*v32*v44*v45)*rad_subtraction(atan2(v32,v31), eq)+2*k*(v30*v31*v34-v35*v32*v34)*(v31*v43*v34-v39*v32*v34) ; }

double HarmonicDihedralConstraintFunctions::hessianXaZd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = xc-xb ; v5 = -yc ; v6 = yd+v5 ; v7 = v4*v6-v2*v3 ; v8 = zb-za ; v9 = xb-xa ; v10 = zc-zb ; v11 = v4*v8-v9*v10 ; v12 = pow(v10,2) ; v13 = 1/sqrt(pow(v4,2)+pow(v3,2)+v12) ; v14 = yb-ya ; v15 = v9*v3-v4*v14 ; v16 = v14*v10-v3*v8 ; v17 = sqrt(pow(v16,2)+pow(v15,2)+pow(v11,2)) ; v18 = 1/v17 ; v19 = v3*v16*v13*v18-v4*v11*v13*v18 ; v20 = v1+xb ; v21 = zd-zc ; v22 = v2*v10-v4*v21 ; v23 = v3*v21-v6*v10 ; v24 = 2*v3*v23+2*v20*v22 ; v25 = sqrt(pow(v7,2)+pow(v23,2)+pow(v22,2)) ; v26 = 1/pow(v25,3) ; v27 = v4*v15*v13*v18-v10*v16*v13*v18 ; v28 = v10*v11*v13*v18-v3*v15*v13*v18 ; v29 = 1/v25 ; v30 = v20*v27*v29+v3*v28*v29-v28*v23*v24*v26/2-v27*v22*v24*v26/2-v7*v19*v24*v26/2 ; v31 = v16*v18*v23*v29+v11*v18*v22*v29+v15*v7*v18*v29 ; v32 = v28*v23*v29+v27*v22*v29+v7*v19*v29 ; v33 = pow(v32,2)+pow(v31,2) ; v34 = 1/v33 ; v35 = v3*v16*v18*v29+v20*v11*v18*v29-v16*v18*v23*v24*v26/2-v11*v18*v22*v24*v26/2-v15*v7*v18*v24*v26/2 ; v36 = v5+yb ; v37 = 2*v10*v11+2*v36*v15 ; v38 = 1/pow(v17,3) ; v39 = -v16*v37*v38*v23*v29/2+v10*v18*v22*v29-v11*v37*v38*v22*v29/2+v36*v7*v18*v29-v15*v7*v37*v38*v29/2 ; v40 = -v4*v10*v13*v18-v3*v16*v37*v13*v38/2+v4*v11*v37*v13*v38/2 ; v41 = v4*v36*v13*v18+v10*v16*v37*v13*v38/2-v4*v15*v37*v13*v38/2 ; v42 = v12*v13*v18-v36*v3*v13*v18-v10*v11*v37*v13*v38/2+v3*v15*v37*v13*v38/2 ; v43 = v42*v23*v29+v41*v22*v29+v7*v40*v29 ; v44 = 2*v30*v32+2*v35*v31 ; v45 = 1/pow(v33,2) ; return 2*k*(v35*v43*v34-(v20*v10*v18*v29-v3*v16*v37*v38*v29/2-v20*v11*v37*v38*v29/2+v16*v37*v38*v23*v24*v26/4-v10*v18*v22*v24*v26/2+v11*v37*v38*v22*v24*v26/4-v36*v7*v18*v24*v26/2+v15*v7*v37*v38*v24*v26/4)*v32*v34+(v3*v42*v29+v20*v41*v29-v42*v23*v24*v26/2-v41*v22*v24*v26/2-v7*v40*v24*v26/2)*v31*v34-v30*v39*v34-v31*v43*v44*v45+v39*v32*v44*v45)*rad_subtraction(atan2(v32,v31), eq)+2*k*(v30*v31*v34-v35*v32*v34)*(v31*v43*v34-v39*v32*v34) ; }

double HarmonicDihedralConstraintFunctions::hessianYaYa(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = xd-xc ; v7 = yd-yc ; v8 = v1*v7-v6*v4 ; v9 = zb-za ; v10 = zc-zb ; v11 = v1*v9-v3*v10 ; v12 = v2*v10-v4*v9 ; v13 = sqrt(pow(v5,2)+pow(v12,2)+pow(v11,2)) ; v14 = 1/v13 ; v15 = -zc ; v16 = zd+v15 ; v17 = v6*v10-v1*v16 ; v18 = v4*v16-v7*v10 ; v19 = 1/sqrt(pow(v8,2)+pow(v18,2)+pow(v17,2)) ; v20 = v12*v14*v18*v19+v11*v14*v17*v19+v5*v8*v14*v19 ; v21 = v15+zb ; v22 = 2*v21*v12+2*v1*v5 ; v23 = pow(v1,2) ; v24 = 1/sqrt(pow(v4,2)+v23+pow(v10,2)) ; v25 = 1/pow(v13,3) ; v26 = (-v1*v4*v24*v14-v10*v11*v22*v24*v25/2+v4*v5*v22*v24*v25/2)*v18*v19+(-v21*v10*v24*v14+v23*v24*v14+v10*v12*v22*v24*v25/2-v1*v5*v22*v24*v25/2)*v17*v19+v8*(v4*v21*v24*v14-v4*v12*v22*v24*v25/2+v1*v11*v22*v24*v25/2)*v19 ; v27 = (v10*v11*v24*v14-v4*v5*v24*v14)*v18*v19+(v1*v5*v24*v14-v10*v12*v24*v14)*v17*v19+v8*(v4*v12*v24*v14-v1*v11*v24*v14)*v19 ; v28 = pow(v27,2)+pow(v20,2) ; v29 = 1/v28 ; v30 = v21*v14*v18*v19-v12*v22*v25*v18*v19/2-v11*v22*v25*v17*v19/2+v1*v8*v14*v19-v5*v8*v22*v25*v19/2 ; v31 = 2*v26*v27+2*v30*v20 ; v32 = 1/pow(v28,2) ; v33 = pow(v22,2) ; v34 = 1/pow(v13,5) ; v35 = 2*v23+2*pow(v21,2) ; return 2*pow(v20*v26*v29-v30*v27*v29,2)*k+2*k*(-(-v21*v22*v25*v18*v19-v35*v12*v25*v18*v19/2+3*v12*v33*v34*v18*v19/4-v35*v11*v25*v17*v19/2+3*v11*v33*v34*v17*v19/4-v1*v8*v22*v25*v19-v5*v8*v35*v25*v19/2+3*v5*v8*v33*v34*v19/4)*v27*v29+((v1*v4*v22*v24*v25-v35*v10*v11*v24*v25/2+v4*v5*v35*v24*v25/2+3*v10*v11*v33*v24*v34/4-3*v4*v5*v33*v24*v34/4)*v18*v19+(v21*v10*v22*v24*v25-v23*v22*v24*v25+v35*v10*v12*v24*v25/2-v1*v5*v35*v24*v25/2-3*v10*v12*v33*v24*v34/4+3*v1*v5*v33*v24*v34/4)*v17*v19+v8*(-v4*v21*v22*v24*v25-v4*v35*v12*v24*v25/2+v1*v35*v11*v24*v25/2+3*v4*v12*v33*v24*v34/4-3*v1*v11*v33*v24*v34/4)*v19)*v20*v29+v30*v27*v31*v32-v20*v26*v31*v32)*rad_subtraction(atan2(v27,v20), eq) ; }

double HarmonicDihedralConstraintFunctions::hessianYaZa(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = -xc ; v7 = xd+v6 ; v8 = yd-yc ; v9 = v1*v8-v7*v4 ; v10 = zb-za ; v11 = zc-zb ; v12 = v1*v10-v3*v11 ; v13 = v2*v11-v4*v10 ; v14 = sqrt(pow(v5,2)+pow(v13,2)+pow(v12,2)) ; v15 = 1/v14 ; v16 = -zc ; v17 = zd+v16 ; v18 = v7*v11-v1*v17 ; v19 = v4*v17-v8*v11 ; v20 = 1/sqrt(pow(v9,2)+pow(v19,2)+pow(v18,2)) ; v21 = v13*v15*v19*v20+v12*v15*v18*v20+v5*v9*v15*v20 ; v22 = v6+xb ; v23 = 2*v4*v13+2*v22*v12 ; v24 = pow(v1,2) ; v25 = pow(v4,2) ; v26 = 1/sqrt(v25+v24+pow(v11,2)) ; v27 = 1/pow(v14,3) ; v28 = (v22*v11*v26*v15-v11*v12*v23*v26*v27/2+v4*v5*v23*v26*v27/2)*v19*v20+(-v4*v11*v26*v15+v11*v13*v23*v26*v27/2-v1*v5*v23*v26*v27/2)*v18*v20+v9*(v25*v26*v15-v22*v1*v26*v15-v4*v13*v23*v26*v27/2+v1*v12*v23*v26*v27/2)*v20 ; v29 = (v11*v12*v26*v15-v4*v5*v26*v15)*v19*v20+(v1*v5*v26*v15-v11*v13*v26*v15)*v18*v20+v9*(v4*v13*v26*v15-v1*v12*v26*v15)*v20 ; v30 = pow(v29,2)+pow(v21,2) ; v31 = 1/v30 ; v32 = v4*v15*v19*v20-v13*v23*v27*v19*v20/2+v22*v15*v18*v20-v12*v23*v27*v18*v20/2-v5*v9*v23*v27*v20/2 ; v33 = v16+zb ; v34 = 2*v33*v13+2*v1*v5 ; v35 = (-v1*v4*v26*v15-v11*v12*v34*v26*v27/2+v4*v5*v34*v26*v27/2)*v19*v20+(-v33*v11*v26*v15+v24*v26*v15+v11*v13*v34*v26*v27/2-v1*v5*v34*v26*v27/2)*v18*v20+v9*(v4*v33*v26*v15-v4*v13*v34*v26*v27/2+v1*v12*v34*v26*v27/2)*v20 ; v36 = v33*v15*v19*v20-v13*v34*v27*v19*v20/2-v12*v34*v27*v18*v20/2+v1*v9*v15*v20-v5*v9*v34*v27*v20/2 ; v37 = 2*v28*v29+2*v32*v21 ; v38 = 1/pow(v30,2) ; v39 = 1/pow(v14,5) ; return 2*k*(-(-v4*v34*v27*v19*v20/2-v33*v23*v27*v19*v20/2-v4*v33*v13*v27*v19*v20+3*v13*v23*v34*v39*v19*v20/4-v22*v34*v27*v18*v20/2-v4*v33*v12*v27*v18*v20+3*v12*v23*v34*v39*v18*v20/4-v1*v9*v23*v27*v20/2-v4*v5*v9*v33*v27*v20+3*v5*v9*v23*v34*v39*v20/4)*v29*v31-v36*v28*v31+v32*v35*v31+((-v22*v11*v34*v26*v27/2+v1*v4*v23*v26*v27/2-v4*v33*v11*v12*v26*v27+v25*v5*v33*v26*v27+3*v11*v12*v23*v34*v26*v39/4-3*v4*v5*v23*v34*v26*v39/4)*v19*v20+(v4*v11*v34*v26*v27/2+v33*v11*v23*v26*v27/2-v24*v23*v26*v27/2+v4*v33*v11*v13*v26*v27-v1*v4*v5*v33*v26*v27-3*v11*v13*v23*v34*v26*v39/4+3*v1*v5*v23*v34*v26*v39/4)*v18*v20+v9*(-v25*v34*v26*v27/2+v22*v1*v34*v26*v27/2-v4*v33*v23*v26*v27/2-v25*v33*v13*v26*v27+v1*v4*v33*v12*v26*v27+3*v4*v13*v23*v34*v26*v39/4-3*v1*v12*v23*v34*v26*v39/4)*v20)*v21*v31+v36*v29*v37*v38-v21*v35*v37*v38)*rad_subtraction(atan2(v29,v21), eq)+2*k*(v21*v28*v31-v32*v29*v31)*(v21*v35*v31-v36*v29*v31) ; }

double HarmonicDihedralConstraintFunctions::hessianYaXb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = xc-xb ; v2 = -ya ; v3 = yb+v2 ; v4 = xb-xa ; v5 = yc-yb ; v6 = v4*v5-v1*v3 ; v7 = xd-xc ; v8 = yd-yc ; v9 = v1*v8-v7*v5 ; v10 = zb-za ; v11 = zc-zb ; v12 = v1*v10-v4*v11 ; v13 = v3*v11-v5*v10 ; v14 = sqrt(pow(v6,2)+pow(v13,2)+pow(v12,2)) ; v15 = 1/v14 ; v16 = -zc ; v17 = zd+v16 ; v18 = v7*v11-v1*v17 ; v19 = v5*v17-v8*v11 ; v20 = sqrt(pow(v9,2)+pow(v19,2)+pow(v18,2)) ; v21 = 1/v20 ; v22 = v13*v15*v19*v21+v12*v15*v18*v21+v6*v9*v15*v21 ; v23 = pow(v1,2) ; v24 = sqrt(pow(v5,2)+v23+pow(v11,2)) ; v25 = 1/v24 ; v26 = v5*v13*v25*v15-v1*v12*v25*v15 ; v27 = yc-yd ; v28 = 2*v17*v18+2*v27*v9 ; v29 = 1/pow(v20,3) ; v30 = v1*v6*v25*v15-v11*v13*v25*v15 ; v31 = v11*v12*v25*v15-v5*v6*v25*v15 ; v32 = yc+v2 ; v33 = v16+za ; v34 = 2*v33*v12+2*v32*v6 ; v35 = 1/pow(v14,3) ; v36 = 1/pow(v24,3) ; v37 = (v33*v11*v25*v15-v32*v5*v25*v15+v1*v11*v12*v36*v15-v1*v5*v6*v36*v15-v11*v12*v34*v25*v35/2+v5*v6*v34*v25*v35/2)*v19*v21+(-v6*v25*v15+v1*v32*v25*v15-v1*v11*v13*v36*v15+v23*v6*v36*v15+v11*v13*v34*v25*v35/2-v1*v6*v34*v25*v35/2)*v18*v21+v30*v17*v21+v27*v26*v21+v9*(v12*v25*v15-v1*v33*v25*v15+v1*v5*v13*v36*v15-v23*v12*v36*v15-v5*v13*v34*v25*v35/2+v1*v12*v34*v25*v35/2)*v21-v31*v19*v28*v29/2-v30*v18*v28*v29/2-v9*v26*v28*v29/2 ; v38 = v31*v19*v21+v30*v18*v21+v9*v26*v21 ; v39 = pow(v38,2)+pow(v22,2) ; v40 = 1/v39 ; v41 = -v13*v34*v35*v19*v21/2+v33*v15*v18*v21-v12*v34*v35*v18*v21/2+v12*v15*v17*v21+v32*v9*v15*v21+v6*v27*v15*v21-v6*v9*v34*v35*v21/2-v13*v15*v19*v28*v29/2-v12*v15*v18*v28*v29/2-v6*v9*v15*v28*v29/2 ; v42 = v16+zb ; v43 = 2*v42*v13+2*v1*v6 ; v44 = v5*v42*v25*v15-v5*v13*v43*v25*v35/2+v1*v12*v43*v25*v35/2 ; v45 = -v42*v11*v25*v15+v23*v25*v15+v11*v13*v43*v25*v35/2-v1*v6*v43*v25*v35/2 ; v46 = -v1*v5*v25*v15-v11*v12*v43*v25*v35/2+v5*v6*v43*v25*v35/2 ; v47 = v46*v19*v21+v45*v18*v21+v9*v44*v21 ; v48 = v42*v15*v19*v21-v13*v43*v35*v19*v21/2-v12*v43*v35*v18*v21/2+v1*v9*v15*v21-v6*v9*v43*v35*v21/2 ; v49 = 2*v37*v38+2*v41*v22 ; v50 = 1/pow(v39,2) ; v51 = 1/pow(v14,5) ; v52 = 2*v1*v32-2*v6 ; return 2*rad_subtraction(atan2(v38,v22), eq)*(v22*v40*(v18*v21*(3*v1*v6*v34*v43*v25*v51/4-3*v11*v13*v34*v43*v25*v51/4+pow(v1,3)*v15*v36-v23*v6*v43*v36*v35/2+v1*v11*v13*v43*v36*v35/2-v1*v6*v52*v25*v35/2+v6*v43*v25*v35/2-v1*v32*v43*v25*v35/2-v23*v34*v25*v35/2+v42*v11*v34*v25*v35/2+v52*v11*v13*v25*v35/2-v1*v42*v11*v36*v15-2*v1*v25*v15)-v9*v44*v28*v29/2-v46*v19*v28*v29/2-v45*v18*v28*v29/2+v27*v44*v21+(v5*v25*v15-v23*v5*v36*v15-v33*v11*v43*v25*v35/2+v32*v5*v43*v25*v35/2+v1*v5*v34*v25*v35/2-v52*v11*v12*v25*v35/2+v5*v6*v52*v25*v35/2-v1*v11*v12*v43*v36*v35/2+v1*v5*v6*v43*v36*v35/2+3*v11*v12*v34*v43*v25*v51/4-3*v5*v6*v34*v43*v25*v51/4)*v19*v21+v45*v17*v21+v9*(v1*v5*v42*v36*v15-v12*v43*v25*v35/2+v1*v33*v43*v25*v35/2-v5*v42*v34*v25*v35/2-v5*v52*v13*v25*v35/2+v1*v52*v12*v25*v35/2-v1*v5*v13*v43*v36*v35/2+v23*v12*v43*v36*v35/2+3*v5*v13*v34*v43*v25*v51/4-3*v1*v12*v34*v43*v25*v51/4)*v21)-v22*v47*v49*v50+v48*v38*v49*v50+v41*v47*v40-(-v42*v34*v35*v19*v21/2-v52*v13*v35*v19*v21/2+3*v13*v34*v43*v51*v19*v21/4-v33*v43*v35*v18*v21/2-v52*v12*v35*v18*v21/2+3*v12*v34*v43*v51*v18*v21/4-v12*v43*v35*v17*v21/2-v9*v15*v21+v1*v27*v15*v21-v32*v9*v43*v35*v21/2-v6*v27*v43*v35*v21/2-v1*v9*v34*v35*v21/2-v6*v52*v9*v35*v21/2+3*v6*v9*v34*v43*v51*v21/4-v42*v15*v19*v28*v29/2+v13*v43*v35*v19*v28*v29/4+v12*v43*v35*v18*v28*v29/4-v1*v9*v15*v28*v29/2+v6*v9*v43*v35*v28*v29/4)*v38*v40-v48*v37*v40)*k+2*k*(v22*v37*v40-v41*v38*v40)*(v22*v47*v40-v48*v38*v40) ; }

double HarmonicDihedralConstraintFunctions::hessianYaYb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = -xc ; v7 = xd+v6 ; v8 = yd-yc ; v9 = v1*v8-v7*v4 ; v10 = -za ; v11 = zb+v10 ; v12 = zc-zb ; v13 = v1*v11-v3*v12 ; v14 = v2*v12-v4*v11 ; v15 = sqrt(pow(v5,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = -zc ; v18 = zd+v17 ; v19 = v7*v12-v1*v18 ; v20 = v4*v18-v8*v12 ; v21 = sqrt(pow(v9,2)+pow(v20,2)+pow(v19,2)) ; v22 = 1/v21 ; v23 = v14*v16*v20*v22+v13*v16*v19*v22+v5*v9*v16*v22 ; v24 = v17+zb ; v25 = 2*v24*v14+2*v1*v5 ; v26 = pow(v1,2) ; v27 = pow(v4,2) ; v28 = sqrt(v27+v26+pow(v12,2)) ; v29 = 1/v28 ; v30 = 1/pow(v15,3) ; v31 = v4*v24*v29*v16-v4*v14*v25*v29*v30/2+v1*v13*v25*v29*v30/2 ; v32 = -v24*v12*v29*v16+v26*v29*v16+v12*v14*v25*v29*v30/2-v1*v5*v25*v29*v30/2 ; v33 = -v1*v4*v29*v16-v12*v13*v25*v29*v30/2+v4*v5*v25*v29*v30/2 ; v34 = v33*v20*v22+v32*v19*v22+v9*v31*v22 ; v35 = v4*v14*v29*v16-v1*v13*v29*v16 ; v36 = v1*v5*v29*v16-v12*v14*v29*v16 ; v37 = v12*v13*v29*v16-v4*v5*v29*v16 ; v38 = v37*v20*v22+v36*v19*v22+v9*v35*v22 ; v39 = pow(v38,2)+pow(v23,2) ; v40 = 1/v39 ; v41 = v24*v16*v20*v22-v14*v25*v30*v20*v22/2-v13*v25*v30*v19*v22/2+v1*v9*v16*v22-v5*v9*v25*v30*v22/2 ; v42 = zc-zd ; v43 = 2*v42*v20+2*v7*v9 ; v44 = 1/pow(v21,3) ; v45 = v6+xa ; v46 = zc+v10 ; v47 = 2*v46*v14+2*v45*v5 ; v48 = 1/pow(v28,3) ; v49 = (v5*v29*v16-v45*v4*v29*v16+v4*v12*v13*v48*v16-v27*v5*v48*v16-v12*v13*v47*v29*v30/2+v4*v5*v47*v29*v30/2)*v20*v22+(-v46*v12*v29*v16+v45*v1*v29*v16-v4*v12*v14*v48*v16+v1*v4*v5*v48*v16+v12*v14*v47*v29*v30/2-v1*v5*v47*v29*v30/2)*v19*v22+v37*v42*v22+v7*v35*v22+v9*(-v14*v29*v16+v4*v46*v29*v16+v27*v14*v48*v16-v1*v4*v13*v48*v16-v4*v14*v47*v29*v30/2+v1*v13*v47*v29*v30/2)*v22-v37*v20*v43*v44/2-v36*v19*v43*v44/2-v9*v35*v43*v44/2 ; v50 = v46*v16*v20*v22-v14*v47*v30*v20*v22/2-v13*v47*v30*v19*v22/2+v14*v16*v42*v22+v45*v9*v16*v22+v7*v5*v16*v22-v5*v9*v47*v30*v22/2-v14*v16*v20*v43*v44/2-v13*v16*v19*v43*v44/2-v5*v9*v16*v43*v44/2 ; v51 = 2*v49*v38+2*v50*v23 ; v52 = 1/pow(v39,2) ; v53 = 1/pow(v15,5) ; v54 = 2*v24*v46+2*v45*v1 ; return 2*k*(-(-v24*v47*v30*v20*v22/2-v46*v25*v30*v20*v22/2-v54*v14*v30*v20*v22/2+3*v14*v25*v47*v53*v20*v22/4-v54*v13*v30*v19*v22/2+3*v13*v25*v47*v53*v19*v22/4+v24*v16*v42*v22-v14*v25*v30*v42*v22/2+v1*v7*v16*v22-v1*v9*v47*v30*v22/2-v45*v9*v25*v30*v22/2-v7*v5*v25*v30*v22/2-v5*v9*v54*v30*v22/2+3*v5*v9*v25*v47*v53*v22/4-v24*v16*v20*v43*v44/2+v14*v25*v30*v20*v43*v44/4+v13*v25*v30*v19*v43*v44/4-v1*v9*v16*v43*v44/2+v5*v9*v25*v30*v43*v44/4)*v38*v40-v41*v49*v40+v50*v34*v40+v23*((v1*v29*v16-v1*v27*v48*v16+v1*v4*v47*v29*v30/2-v5*v25*v29*v30/2+v45*v4*v25*v29*v30/2-v12*v54*v13*v29*v30/2+v4*v5*v54*v29*v30/2-v4*v12*v13*v25*v48*v30/2+v27*v5*v25*v48*v30/2+3*v12*v13*v25*v47*v29*v53/4-3*v4*v5*v25*v47*v29*v53/4)*v20*v22+(-v4*v24*v12*v48*v16+v26*v4*v48*v16+v24*v12*v47*v29*v30/2-v26*v47*v29*v30/2+v46*v12*v25*v29*v30/2-v45*v1*v25*v29*v30/2+v12*v54*v14*v29*v30/2-v1*v5*v54*v29*v30/2+v4*v12*v14*v25*v48*v30/2-v1*v4*v5*v25*v48*v30/2-3*v12*v14*v25*v47*v29*v53/4+3*v1*v5*v25*v47*v29*v53/4)*v19*v22+v33*v42*v22+v7*v31*v22+v9*(-v24*v29*v16+v27*v24*v48*v16-v4*v24*v47*v29*v30/2+v14*v25*v29*v30/2-v4*v46*v25*v29*v30/2-v4*v54*v14*v29*v30/2+v1*v54*v13*v29*v30/2-v27*v14*v25*v48*v30/2+v1*v4*v13*v25*v48*v30/2+3*v4*v14*v25*v47*v29*v53/4-3*v1*v13*v25*v47*v29*v53/4)*v22-v33*v20*v43*v44/2-v32*v19*v43*v44/2-v9*v31*v43*v44/2)*v40+v41*v38*v51*v52-v23*v34*v51*v52)*rad_subtraction(atan2(v38,v23), eq)+2*k*(v23*v34*v40-v41*v38*v40)*(v23*v49*v40-v50*v38*v40) ; }

double HarmonicDihedralConstraintFunctions::hessianYaZb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54 ; v1 = xc-xb ; v2 = yb-ya ; v3 = -xa ; v4 = xb+v3 ; v5 = yc-yb ; v6 = v4*v5-v1*v2 ; v7 = xd-xc ; v8 = -yc ; v9 = yd+v8 ; v10 = v1*v9-v7*v5 ; v11 = zb-za ; v12 = zc-zb ; v13 = v1*v11-v4*v12 ; v14 = v2*v12-v5*v11 ; v15 = sqrt(pow(v6,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = -zc ; v18 = zd+v17 ; v19 = v7*v12-v1*v18 ; v20 = v5*v18-v9*v12 ; v21 = sqrt(pow(v20,2)+pow(v19,2)+pow(v10,2)) ; v22 = 1/v21 ; v23 = v14*v16*v20*v22+v13*v16*v19*v22+v6*v10*v16*v22 ; v24 = pow(v1,2) ; v25 = pow(v12,2) ; v26 = sqrt(pow(v5,2)+v25+v24) ; v27 = 1/v26 ; v28 = v5*v14*v27*v16-v1*v13*v27*v16 ; v29 = xc-xd ; v30 = 2*v9*v20+2*v29*v19 ; v31 = 1/pow(v21,3) ; v32 = v1*v6*v27*v16-v12*v14*v27*v16 ; v33 = v12*v13*v27*v16-v5*v6*v27*v16 ; v34 = xc+v3 ; v35 = v8+ya ; v36 = 2*v35*v14+2*v34*v13 ; v37 = 1/pow(v15,3) ; v38 = 1/pow(v26,3) ; v39 = (-v13*v27*v16+v34*v12*v27*v16+v25*v13*v38*v16-v5*v6*v12*v38*v16-v12*v13*v36*v27*v37/2+v5*v6*v36*v27*v37/2)*v20*v22+(v14*v27*v16-v35*v12*v27*v16-v25*v14*v38*v16+v1*v6*v12*v38*v16+v12*v14*v36*v27*v37/2-v1*v6*v36*v27*v37/2)*v19*v22+v29*v32*v22+v9*v33*v22+v10*(v35*v5*v27*v16-v34*v1*v27*v16+v5*v12*v14*v38*v16-v1*v12*v13*v38*v16-v5*v14*v36*v27*v37/2+v1*v13*v36*v27*v37/2)*v22-v33*v20*v30*v31/2-v32*v19*v30*v31/2-v10*v28*v30*v31/2 ; v40 = v33*v20*v22+v32*v19*v22+v10*v28*v22 ; v41 = pow(v40,2)+pow(v23,2) ; v42 = 1/v41 ; v43 = v35*v16*v20*v22-v14*v36*v37*v20*v22/2+v34*v16*v19*v22-v13*v36*v37*v19*v22/2+v9*v14*v16*v22+v29*v13*v16*v22-v6*v10*v36*v37*v22/2-v14*v16*v20*v30*v31/2-v13*v16*v19*v30*v31/2-v6*v10*v16*v30*v31/2 ; v44 = v17+zb ; v45 = 2*v44*v14+2*v1*v6 ; v46 = v5*v44*v27*v16-v5*v14*v45*v27*v37/2+v1*v13*v45*v27*v37/2 ; v47 = -v44*v12*v27*v16+v24*v27*v16+v12*v14*v45*v27*v37/2-v1*v6*v45*v27*v37/2 ; v48 = -v1*v5*v27*v16-v12*v13*v45*v27*v37/2+v5*v6*v45*v27*v37/2 ; v49 = v48*v20*v22+v47*v19*v22+v10*v46*v22 ; v50 = v44*v16*v20*v22-v14*v45*v37*v20*v22/2-v13*v45*v37*v19*v22/2+v1*v10*v16*v22-v6*v10*v45*v37*v22/2 ; v51 = 2*v39*v40+2*v43*v23 ; v52 = 1/pow(v41,2) ; v53 = 1/pow(v15,5) ; v54 = 2*v14+2*v35*v44 ; return 2*k*(-(v16*v20*v22-v35*v45*v37*v20*v22/2-v44*v36*v37*v20*v22/2-v14*v54*v37*v20*v22/2+3*v14*v36*v45*v53*v20*v22/4-v34*v45*v37*v19*v22/2-v13*v54*v37*v19*v22/2+3*v13*v36*v45*v53*v19*v22/4+v9*v44*v16*v22-v9*v14*v45*v37*v22/2-v29*v13*v45*v37*v22/2-v1*v10*v36*v37*v22/2-v6*v10*v54*v37*v22/2+3*v6*v10*v36*v45*v53*v22/4-v44*v16*v20*v30*v31/2+v14*v45*v37*v20*v30*v31/4+v13*v45*v37*v19*v30*v31/4-v1*v10*v16*v30*v31/2+v6*v10*v45*v37*v30*v31/4)*v40*v42-v50*v39*v42+v43*v49*v42+v23*((-v1*v5*v12*v38*v16+v13*v45*v27*v37/2-v34*v12*v45*v27*v37/2+v1*v5*v36*v27*v37/2-v12*v13*v54*v27*v37/2+v5*v6*v54*v27*v37/2-v25*v13*v45*v38*v37/2+v5*v6*v12*v45*v38*v37/2+3*v12*v13*v36*v45*v27*v53/4-3*v5*v6*v36*v45*v27*v53/4)*v20*v22+(-v12*v27*v16+v44*v27*v16-v44*v25*v38*v16+v24*v12*v38*v16-v14*v45*v27*v37/2+v35*v12*v45*v27*v37/2+v44*v12*v36*v27*v37/2-v24*v36*v27*v37/2+v12*v14*v54*v27*v37/2-v1*v6*v54*v27*v37/2+v25*v14*v45*v38*v37/2-v1*v6*v12*v45*v38*v37/2-3*v12*v14*v36*v45*v27*v53/4+3*v1*v6*v36*v45*v27*v53/4)*v19*v22+v29*v47*v22+v9*v48*v22+v10*(v5*v27*v16+v5*v44*v12*v38*v16-v35*v5*v45*v27*v37/2+v34*v1*v45*v27*v37/2-v5*v44*v36*v27*v37/2-v5*v14*v54*v27*v37/2+v1*v13*v54*v27*v37/2-v5*v12*v14*v45*v38*v37/2+v1*v12*v13*v45*v38*v37/2+3*v5*v14*v36*v45*v27*v53/4-3*v1*v13*v36*v45*v27*v53/4)*v22-v48*v20*v30*v31/2-v47*v19*v30*v31/2-v10*v46*v30*v31/2)*v42+v50*v40*v51*v52-v23*v49*v51*v52)*rad_subtraction(atan2(v40,v23), eq)+2*k*(v23*v39*v42-v43*v40*v42)*(v23*v49*v42-v50*v40*v42) ; }

double HarmonicDihedralConstraintFunctions::hessianYaXc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = -yb ; v5 = yc+v4 ; v6 = v3*v5-v1*v2 ; v7 = xd-xc ; v8 = yd-yc ; v9 = v1*v8-v7*v5 ; v10 = zb-za ; v11 = zc-zb ; v12 = v1*v10-v3*v11 ; v13 = v2*v11-v5*v10 ; v14 = sqrt(pow(v6,2)+pow(v13,2)+pow(v12,2)) ; v15 = 1/v14 ; v16 = -zc ; v17 = zd+v16 ; v18 = v7*v11-v1*v17 ; v19 = v5*v17-v8*v11 ; v20 = sqrt(pow(v9,2)+pow(v19,2)+pow(v18,2)) ; v21 = 1/v20 ; v22 = v13*v15*v19*v21+v12*v15*v18*v21+v6*v9*v15*v21 ; v23 = pow(v1,2) ; v24 = sqrt(pow(v5,2)+v23+pow(v11,2)) ; v25 = 1/v24 ; v26 = v5*v13*v25*v15-v1*v12*v25*v15 ; v27 = yd+v4 ; v28 = zb-zd ; v29 = 2*v28*v18+2*v27*v9 ; v30 = 1/pow(v20,3) ; v31 = v1*v6*v25*v15-v11*v13*v25*v15 ; v32 = v11*v12*v25*v15-v5*v6*v25*v15 ; v33 = v4+ya ; v34 = 2*v10*v12+2*v33*v6 ; v35 = 1/pow(v14,3) ; v36 = 1/pow(v24,3) ; v37 = (v10*v11*v25*v15-v33*v5*v25*v15-v1*v11*v12*v36*v15+v1*v5*v6*v36*v15-v11*v12*v34*v25*v35/2+v5*v6*v34*v25*v35/2)*v19*v21+(v6*v25*v15+v1*v33*v25*v15+v1*v11*v13*v36*v15-v23*v6*v36*v15+v11*v13*v34*v25*v35/2-v1*v6*v34*v25*v35/2)*v18*v21+v31*v28*v21+v27*v26*v21+v9*(-v12*v25*v15-v1*v10*v25*v15-v1*v5*v13*v36*v15+v23*v12*v36*v15-v5*v13*v34*v25*v35/2+v1*v12*v34*v25*v35/2)*v21-v32*v19*v29*v30/2-v31*v18*v29*v30/2-v9*v26*v29*v30/2 ; v38 = v32*v19*v21+v31*v18*v21+v9*v26*v21 ; v39 = pow(v38,2)+pow(v22,2) ; v40 = 1/v39 ; v41 = -v13*v34*v35*v19*v21/2+v10*v15*v18*v21-v12*v34*v35*v18*v21/2+v12*v15*v28*v21+v33*v9*v15*v21+v6*v27*v15*v21-v6*v9*v34*v35*v21/2-v13*v15*v19*v29*v30/2-v12*v15*v18*v29*v30/2-v6*v9*v15*v29*v30/2 ; v42 = v16+zb ; v43 = 2*v42*v13+2*v1*v6 ; v44 = v5*v42*v25*v15-v5*v13*v43*v25*v35/2+v1*v12*v43*v25*v35/2 ; v45 = -v42*v11*v25*v15+v23*v25*v15+v11*v13*v43*v25*v35/2-v1*v6*v43*v25*v35/2 ; v46 = -v1*v5*v25*v15-v11*v12*v43*v25*v35/2+v5*v6*v43*v25*v35/2 ; v47 = v46*v19*v21+v45*v18*v21+v9*v44*v21 ; v48 = v42*v15*v19*v21-v13*v43*v35*v19*v21/2-v12*v43*v35*v18*v21/2+v1*v9*v15*v21-v6*v9*v43*v35*v21/2 ; v49 = 2*v37*v38+2*v41*v22 ; v50 = 1/pow(v39,2) ; v51 = 1/pow(v14,5) ; v52 = 2*v6+2*v1*v33 ; return 2*rad_subtraction(atan2(v38,v22), eq)*(v22*v40*(v18*v21*(3*v1*v6*v34*v43*v25*v51/4-3*v11*v13*v34*v43*v25*v51/4-pow(v1,3)*v15*v36+v23*v6*v43*v36*v35/2-v1*v11*v13*v43*v36*v35/2-v1*v6*v52*v25*v35/2-v6*v43*v25*v35/2-v1*v33*v43*v25*v35/2-v23*v34*v25*v35/2+v42*v11*v34*v25*v35/2+v52*v11*v13*v25*v35/2+v1*v42*v11*v36*v15+2*v1*v25*v15)-v9*v44*v29*v30/2-v46*v19*v29*v30/2-v45*v18*v29*v30/2+v27*v44*v21+v45*v28*v21+(-v5*v25*v15+v23*v5*v36*v15-v10*v11*v43*v25*v35/2+v33*v5*v43*v25*v35/2+v1*v5*v34*v25*v35/2-v52*v11*v12*v25*v35/2+v5*v6*v52*v25*v35/2+v1*v11*v12*v43*v36*v35/2-v1*v5*v6*v43*v36*v35/2+3*v11*v12*v34*v43*v25*v51/4-3*v5*v6*v34*v43*v25*v51/4)*v19*v21+v9*(-v1*v5*v42*v36*v15+v12*v43*v25*v35/2+v1*v10*v43*v25*v35/2-v5*v42*v34*v25*v35/2-v5*v52*v13*v25*v35/2+v1*v52*v12*v25*v35/2+v1*v5*v13*v43*v36*v35/2-v23*v12*v43*v36*v35/2+3*v5*v13*v34*v43*v25*v51/4-3*v1*v12*v34*v43*v25*v51/4)*v21)-v22*v47*v49*v50+v48*v38*v49*v50+v41*v47*v40-(-v42*v34*v35*v19*v21/2-v52*v13*v35*v19*v21/2+3*v13*v34*v43*v51*v19*v21/4-v10*v43*v35*v18*v21/2-v52*v12*v35*v18*v21/2+3*v12*v34*v43*v51*v18*v21/4-v12*v43*v35*v28*v21/2+v9*v15*v21+v1*v27*v15*v21-v33*v9*v43*v35*v21/2-v6*v27*v43*v35*v21/2-v1*v9*v34*v35*v21/2-v6*v52*v9*v35*v21/2+3*v6*v9*v34*v43*v51*v21/4-v42*v15*v19*v29*v30/2+v13*v43*v35*v19*v29*v30/4+v12*v43*v35*v18*v29*v30/4-v1*v9*v15*v29*v30/2+v6*v9*v43*v35*v29*v30/4)*v38*v40-v48*v37*v40)*k+2*k*(v22*v37*v40-v41*v38*v40)*(v22*v47*v40-v48*v38*v40) ; }

double HarmonicDihedralConstraintFunctions::hessianYaYc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = xd-xc ; v7 = yd-yc ; v8 = v1*v7-v6*v4 ; v9 = zb-za ; v10 = -zb ; v11 = zc+v10 ; v12 = v1*v9-v3*v11 ; v13 = v2*v11-v4*v9 ; v14 = sqrt(pow(v5,2)+pow(v13,2)+pow(v12,2)) ; v15 = 1/v14 ; v16 = -zc ; v17 = zd+v16 ; v18 = v6*v11-v1*v17 ; v19 = v4*v17-v7*v11 ; v20 = sqrt(pow(v8,2)+pow(v19,2)+pow(v18,2)) ; v21 = 1/v20 ; v22 = v13*v15*v19*v21+v12*v15*v18*v21+v5*v8*v15*v21 ; v23 = pow(v1,2) ; v24 = pow(v4,2) ; v25 = sqrt(v24+v23+pow(v11,2)) ; v26 = 1/v25 ; v27 = v4*v13*v26*v15-v1*v12*v26*v15 ; v28 = xb-xd ; v29 = zd+v10 ; v30 = 2*v29*v19+2*v28*v8 ; v31 = 1/pow(v20,3) ; v32 = v1*v5*v26*v15-v11*v13*v26*v15 ; v33 = v11*v12*v26*v15-v4*v5*v26*v15 ; v34 = v10+za ; v35 = 2*v34*v13+2*v3*v5 ; v36 = 1/pow(v14,3) ; v37 = 1/pow(v25,3) ; v38 = (-v5*v26*v15-v3*v4*v26*v15-v4*v11*v12*v37*v15+v24*v5*v37*v15-v11*v12*v35*v26*v36/2+v4*v5*v35*v26*v36/2)*v19*v21+(-v34*v11*v26*v15+v3*v1*v26*v15+v4*v11*v13*v37*v15-v1*v4*v5*v37*v15+v11*v13*v35*v26*v36/2-v1*v5*v35*v26*v36/2)*v18*v21+v33*v29*v21+v28*v27*v21+v8*(v13*v26*v15+v4*v34*v26*v15-v24*v13*v37*v15+v1*v4*v12*v37*v15-v4*v13*v35*v26*v36/2+v1*v12*v35*v26*v36/2)*v21-v33*v19*v30*v31/2-v32*v18*v30*v31/2-v8*v27*v30*v31/2 ; v39 = v33*v19*v21+v32*v18*v21+v8*v27*v21 ; v40 = pow(v39,2)+pow(v22,2) ; v41 = 1/v40 ; v42 = v34*v15*v19*v21-v13*v35*v36*v19*v21/2-v12*v35*v36*v18*v21/2+v13*v15*v29*v21+v3*v8*v15*v21+v28*v5*v15*v21-v5*v8*v35*v36*v21/2-v13*v15*v19*v30*v31/2-v12*v15*v18*v30*v31/2-v5*v8*v15*v30*v31/2 ; v43 = v16+zb ; v44 = 2*v43*v13+2*v1*v5 ; v45 = v4*v43*v26*v15-v4*v13*v44*v26*v36/2+v1*v12*v44*v26*v36/2 ; v46 = -v43*v11*v26*v15+v23*v26*v15+v11*v13*v44*v26*v36/2-v1*v5*v44*v26*v36/2 ; v47 = -v1*v4*v26*v15-v11*v12*v44*v26*v36/2+v4*v5*v44*v26*v36/2 ; v48 = v47*v19*v21+v46*v18*v21+v8*v45*v21 ; v49 = v43*v15*v19*v21-v13*v44*v36*v19*v21/2-v12*v44*v36*v18*v21/2+v1*v8*v15*v21-v5*v8*v44*v36*v21/2 ; v50 = 2*v38*v39+2*v42*v22 ; v51 = 1/pow(v40,2) ; v52 = 1/pow(v14,5) ; v53 = 2*v34*v43+2*v3*v1 ; return 2*k*(-(-v34*v44*v36*v19*v21/2-v43*v35*v36*v19*v21/2-v53*v13*v36*v19*v21/2+3*v13*v35*v44*v52*v19*v21/4-v53*v12*v36*v18*v21/2+3*v12*v35*v44*v52*v18*v21/4+v43*v15*v29*v21-v13*v44*v36*v29*v21/2+v1*v28*v15*v21-v3*v8*v44*v36*v21/2-v28*v5*v44*v36*v21/2-v1*v8*v35*v36*v21/2-v5*v8*v53*v36*v21/2+3*v5*v8*v35*v44*v52*v21/4-v43*v15*v19*v30*v31/2+v13*v44*v36*v19*v30*v31/4+v12*v44*v36*v18*v30*v31/4-v1*v8*v15*v30*v31/2+v5*v8*v44*v36*v30*v31/4)*v39*v41-v49*v38*v41+v42*v48*v41+v22*((-v1*v26*v15+v1*v24*v37*v15+v5*v44*v26*v36/2+v3*v4*v44*v26*v36/2+v1*v4*v35*v26*v36/2-v53*v11*v12*v26*v36/2+v4*v5*v53*v26*v36/2+v4*v11*v12*v44*v37*v36/2-v24*v5*v44*v37*v36/2+3*v11*v12*v35*v44*v26*v52/4-3*v4*v5*v35*v44*v26*v52/4)*v19*v21+(v4*v43*v11*v37*v15-v23*v4*v37*v15+v34*v11*v44*v26*v36/2-v3*v1*v44*v26*v36/2+v43*v11*v35*v26*v36/2-v23*v35*v26*v36/2+v53*v11*v13*v26*v36/2-v1*v5*v53*v26*v36/2-v4*v11*v13*v44*v37*v36/2+v1*v4*v5*v44*v37*v36/2-3*v11*v13*v35*v44*v26*v52/4+3*v1*v5*v35*v44*v26*v52/4)*v18*v21+v47*v29*v21+v28*v45*v21+v8*(v43*v26*v15-v24*v43*v37*v15-v13*v44*v26*v36/2-v4*v34*v44*v26*v36/2-v4*v43*v35*v26*v36/2-v4*v53*v13*v26*v36/2+v1*v53*v12*v26*v36/2+v24*v13*v44*v37*v36/2-v1*v4*v12*v44*v37*v36/2+3*v4*v13*v35*v44*v26*v52/4-3*v1*v12*v35*v44*v26*v52/4)*v21-v47*v19*v30*v31/2-v46*v18*v30*v31/2-v8*v45*v30*v31/2)*v41+v49*v39*v50*v51-v22*v48*v50*v51)*rad_subtraction(atan2(v39,v22), eq)+2*k*(v22*v38*v41-v42*v39*v41)*(v22*v48*v41-v49*v39*v41) ; }

double HarmonicDihedralConstraintFunctions::hessianYaZc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = -xb ; v2 = xc+v1 ; v3 = yb-ya ; v4 = xb-xa ; v5 = yc-yb ; v6 = v4*v5-v2*v3 ; v7 = xd-xc ; v8 = yd-yc ; v9 = v2*v8-v7*v5 ; v10 = zb-za ; v11 = zc-zb ; v12 = v2*v10-v4*v11 ; v13 = v3*v11-v5*v10 ; v14 = sqrt(pow(v6,2)+pow(v13,2)+pow(v12,2)) ; v15 = 1/v14 ; v16 = -zc ; v17 = zd+v16 ; v18 = v7*v11-v2*v17 ; v19 = v5*v17-v8*v11 ; v20 = sqrt(pow(v9,2)+pow(v19,2)+pow(v18,2)) ; v21 = 1/v20 ; v22 = v13*v15*v19*v21+v12*v15*v18*v21+v6*v9*v15*v21 ; v23 = pow(v2,2) ; v24 = pow(v11,2) ; v25 = sqrt(pow(v5,2)+v24+v23) ; v26 = 1/v25 ; v27 = v5*v13*v26*v15-v2*v12*v26*v15 ; v28 = xd+v1 ; v29 = yb-yd ; v30 = 2*v29*v19+2*v28*v18 ; v31 = 1/pow(v20,3) ; v32 = v2*v6*v26*v15-v11*v13*v26*v15 ; v33 = v11*v12*v26*v15-v5*v6*v26*v15 ; v34 = v1+xa ; v35 = 2*v3*v13+2*v34*v12 ; v36 = 1/pow(v14,3) ; v37 = 1/pow(v25,3) ; v38 = (v12*v26*v15+v34*v11*v26*v15-v24*v12*v37*v15+v5*v6*v11*v37*v15-v11*v12*v35*v26*v36/2+v5*v6*v35*v26*v36/2)*v19*v21+(-v13*v26*v15-v3*v11*v26*v15+v24*v13*v37*v15-v2*v6*v11*v37*v15+v11*v13*v35*v26*v36/2-v2*v6*v35*v26*v36/2)*v18*v21+v28*v32*v21+v29*v33*v21+v9*(v3*v5*v26*v15-v34*v2*v26*v15-v5*v11*v13*v37*v15+v2*v11*v12*v37*v15-v5*v13*v35*v26*v36/2+v2*v12*v35*v26*v36/2)*v21-v33*v19*v30*v31/2-v32*v18*v30*v31/2-v9*v27*v30*v31/2 ; v39 = v33*v19*v21+v32*v18*v21+v9*v27*v21 ; v40 = pow(v39,2)+pow(v22,2) ; v41 = 1/v40 ; v42 = v3*v15*v19*v21-v13*v35*v36*v19*v21/2+v34*v15*v18*v21-v12*v35*v36*v18*v21/2+v29*v13*v15*v21+v28*v12*v15*v21-v6*v9*v35*v36*v21/2-v13*v15*v19*v30*v31/2-v12*v15*v18*v30*v31/2-v6*v9*v15*v30*v31/2 ; v43 = v16+zb ; v44 = 2*v43*v13+2*v2*v6 ; v45 = v5*v43*v26*v15-v5*v13*v44*v26*v36/2+v2*v12*v44*v26*v36/2 ; v46 = -v43*v11*v26*v15+v23*v26*v15+v11*v13*v44*v26*v36/2-v2*v6*v44*v26*v36/2 ; v47 = -v2*v5*v26*v15-v11*v12*v44*v26*v36/2+v5*v6*v44*v26*v36/2 ; v48 = v47*v19*v21+v46*v18*v21+v9*v45*v21 ; v49 = v43*v15*v19*v21-v13*v44*v36*v19*v21/2-v12*v44*v36*v18*v21/2+v2*v9*v15*v21-v6*v9*v44*v36*v21/2 ; v50 = 2*v38*v39+2*v42*v22 ; v51 = 1/pow(v40,2) ; v52 = 1/pow(v14,5) ; v53 = 2*v3*v43-2*v13 ; return 2*k*(-(-v15*v19*v21-v3*v44*v36*v19*v21/2-v43*v35*v36*v19*v21/2-v13*v53*v36*v19*v21/2+3*v13*v35*v44*v52*v19*v21/4-v34*v44*v36*v18*v21/2-v12*v53*v36*v18*v21/2+3*v12*v35*v44*v52*v18*v21/4+v29*v43*v15*v21-v29*v13*v44*v36*v21/2-v28*v12*v44*v36*v21/2-v2*v9*v35*v36*v21/2-v6*v9*v53*v36*v21/2+3*v6*v9*v35*v44*v52*v21/4-v43*v15*v19*v30*v31/2+v13*v44*v36*v19*v30*v31/4+v12*v44*v36*v18*v30*v31/4-v2*v9*v15*v30*v31/2+v6*v9*v44*v36*v30*v31/4)*v39*v41-v49*v38*v41+v42*v48*v41+v22*((v2*v5*v11*v37*v15-v12*v44*v26*v36/2-v34*v11*v44*v26*v36/2+v2*v5*v35*v26*v36/2-v11*v12*v53*v26*v36/2+v5*v6*v53*v26*v36/2+v24*v12*v44*v37*v36/2-v5*v6*v11*v44*v37*v36/2+3*v11*v12*v35*v44*v26*v52/4-3*v5*v6*v35*v44*v26*v52/4)*v19*v21+(v11*v26*v15-v43*v26*v15+v43*v24*v37*v15-v23*v11*v37*v15+v13*v44*v26*v36/2+v3*v11*v44*v26*v36/2+v43*v11*v35*v26*v36/2-v23*v35*v26*v36/2+v11*v13*v53*v26*v36/2-v2*v6*v53*v26*v36/2-v24*v13*v44*v37*v36/2+v2*v6*v11*v44*v37*v36/2-3*v11*v13*v35*v44*v26*v52/4+3*v2*v6*v35*v44*v26*v52/4)*v18*v21+v28*v46*v21+v29*v47*v21+v9*(-v5*v26*v15-v5*v43*v11*v37*v15-v3*v5*v44*v26*v36/2+v34*v2*v44*v26*v36/2-v5*v43*v35*v26*v36/2-v5*v13*v53*v26*v36/2+v2*v12*v53*v26*v36/2+v5*v11*v13*v44*v37*v36/2-v2*v11*v12*v44*v37*v36/2+3*v5*v13*v35*v44*v26*v52/4-3*v2*v12*v35*v44*v26*v52/4)*v21-v47*v19*v30*v31/2-v46*v18*v30*v31/2-v9*v45*v30*v31/2)*v41+v49*v39*v50*v51-v22*v48*v50*v51)*rad_subtraction(atan2(v39,v22), eq)+2*k*(v22*v38*v41-v42*v39*v41)*(v22*v48*v41-v49*v39*v41) ; }

double HarmonicDihedralConstraintFunctions::hessianYaXd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45 ; v1 = xd-xc ; v2 = yc-yb ; v3 = xc-xb ; v4 = -yc ; v5 = yd+v4 ; v6 = v3*v5-v1*v2 ; v7 = zb-za ; v8 = xb-xa ; v9 = zc-zb ; v10 = v3*v7-v8*v9 ; v11 = pow(v3,2) ; v12 = 1/sqrt(pow(v9,2)+pow(v2,2)+v11) ; v13 = yb-ya ; v14 = v8*v2-v3*v13 ; v15 = v13*v9-v2*v7 ; v16 = sqrt(pow(v15,2)+pow(v14,2)+pow(v10,2)) ; v17 = 1/v16 ; v18 = v2*v15*v12*v17-v3*v10*v12*v17 ; v19 = v4+yb ; v20 = -zc ; v21 = zd+v20 ; v22 = v1*v9-v3*v21 ; v23 = 2*v9*v22+2*v19*v6 ; v24 = v2*v21-v5*v9 ; v25 = sqrt(pow(v6,2)+pow(v24,2)+pow(v22,2)) ; v26 = 1/pow(v25,3) ; v27 = v3*v14*v12*v17-v9*v15*v12*v17 ; v28 = v9*v10*v12*v17-v2*v14*v12*v17 ; v29 = 1/v25 ; v30 = v9*v27*v29+v19*v18*v29-v28*v24*v23*v26/2-v27*v22*v23*v26/2-v6*v18*v23*v26/2 ; v31 = v15*v17*v24*v29+v10*v17*v22*v29+v14*v6*v17*v29 ; v32 = v28*v24*v29+v27*v22*v29+v6*v18*v29 ; v33 = pow(v32,2)+pow(v31,2) ; v34 = 1/v33 ; v35 = v9*v10*v17*v29+v19*v14*v17*v29-v15*v17*v24*v23*v26/2-v10*v17*v22*v23*v26/2-v14*v6*v17*v23*v26/2 ; v36 = v20+zb ; v37 = 2*v36*v15+2*v3*v14 ; v38 = 1/pow(v16,3) ; v39 = v2*v36*v12*v17-v2*v15*v37*v12*v38/2+v3*v10*v37*v12*v38/2 ; v40 = -v36*v9*v12*v17+v11*v12*v17+v9*v15*v37*v12*v38/2-v3*v14*v37*v12*v38/2 ; v41 = -v3*v2*v12*v17-v9*v10*v37*v12*v38/2+v2*v14*v37*v12*v38/2 ; v42 = v41*v24*v29+v40*v22*v29+v6*v39*v29 ; v43 = v36*v17*v24*v29-v15*v37*v38*v24*v29/2-v10*v37*v38*v22*v29/2+v3*v6*v17*v29-v14*v6*v37*v38*v29/2 ; v44 = 2*v30*v32+2*v35*v31 ; v45 = 1/pow(v33,2) ; return 2*k*(-(v3*v19*v17*v29-v9*v10*v37*v38*v29/2-v19*v14*v37*v38*v29/2-v36*v17*v24*v23*v26/2+v15*v37*v38*v24*v23*v26/4+v10*v37*v38*v22*v23*v26/4-v3*v6*v17*v23*v26/2+v14*v6*v37*v38*v23*v26/4)*v32*v34+v35*v42*v34+(v9*v40*v29+v19*v39*v29-v41*v24*v23*v26/2-v40*v22*v23*v26/2-v6*v39*v23*v26/2)*v31*v34-v30*v43*v34+v43*v32*v44*v45-v31*v42*v44*v45)*rad_subtraction(atan2(v32,v31), eq)+2*k*(v30*v31*v34-v35*v32*v34)*(v31*v42*v34-v43*v32*v34) ; }

double HarmonicDihedralConstraintFunctions::hessianYaYd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43 ; v1 = xd-xc ; v2 = yc-yb ; v3 = xc-xb ; v4 = yd-yc ; v5 = v3*v4-v1*v2 ; v6 = zb-za ; v7 = xb-xa ; v8 = zc-zb ; v9 = v3*v6-v7*v8 ; v10 = pow(v3,2) ; v11 = 1/sqrt(pow(v8,2)+pow(v2,2)+v10) ; v12 = yb-ya ; v13 = v7*v2-v3*v12 ; v14 = v12*v8-v2*v6 ; v15 = sqrt(pow(v9,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = v2*v14*v11*v16-v3*v9*v11*v16 ; v18 = -zc ; v19 = v18+zb ; v20 = zd+v18 ; v21 = v2*v20-v4*v8 ; v22 = 2*v19*v21+2*v3*v5 ; v23 = v1*v8-v3*v20 ; v24 = sqrt(pow(v5,2)+pow(v23,2)+pow(v21,2)) ; v25 = 1/pow(v24,3) ; v26 = v3*v13*v11*v16-v8*v14*v11*v16 ; v27 = v8*v9*v11*v16-v2*v13*v11*v16 ; v28 = 1/v24 ; v29 = v3*v17*v28+v19*v27*v28-v27*v21*v22*v25/2-v26*v23*v22*v25/2-v5*v17*v22*v25/2 ; v30 = v14*v16*v21*v28+v9*v16*v23*v28+v13*v5*v16*v28 ; v31 = v27*v21*v28+v26*v23*v28+v5*v17*v28 ; v32 = pow(v31,2)+pow(v30,2) ; v33 = 1/v32 ; v34 = v19*v14*v16*v28+v3*v13*v16*v28-v14*v16*v21*v22*v25/2-v9*v16*v23*v22*v25/2-v13*v5*v16*v22*v25/2 ; v35 = 2*v19*v14+2*v3*v13 ; v36 = 1/pow(v15,3) ; v37 = v2*v19*v11*v16-v2*v14*v35*v11*v36/2+v3*v9*v35*v11*v36/2 ; v38 = -v19*v8*v11*v16+v10*v11*v16+v8*v14*v35*v11*v36/2-v3*v13*v35*v11*v36/2 ; v39 = -v3*v2*v11*v16-v8*v9*v35*v11*v36/2+v2*v13*v35*v11*v36/2 ; v40 = v39*v21*v28+v38*v23*v28+v5*v37*v28 ; v41 = v19*v16*v21*v28-v14*v35*v36*v21*v28/2-v9*v35*v36*v23*v28/2+v3*v5*v16*v28-v13*v5*v35*v36*v28/2 ; v42 = 2*v29*v31+2*v34*v30 ; v43 = 1/pow(v32,2) ; return 2*rad_subtraction(atan2(v31,v30), eq)*(-v30*v40*v42*v43+v41*v31*v42*v43-v29*v41*v33+v34*v40*v33-(-v19*v14*v35*v36*v28/2-v3*v13*v35*v36*v28/2+v16*pow(v19,2)*v28+v10*v16*v28+v13*v5*v35*v36*v22*v25/4+v9*v35*v36*v23*v22*v25/4+v14*v35*v36*v21*v22*v25/4-v19*v16*v21*v22*v25/2-v3*v5*v16*v22*v25/2)*v31*v33+(v3*v37*v28+v19*v39*v28-v39*v21*v22*v25/2-v38*v23*v22*v25/2-v5*v37*v22*v25/2)*v30*v33)*k+2*k*(v29*v30*v33-v34*v31*v33)*(v30*v40*v33-v41*v31*v33) ; }

double HarmonicDihedralConstraintFunctions::hessianYaZd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = xc-xb ; v5 = yd-yc ; v6 = v4*v5-v2*v3 ; v7 = zb-za ; v8 = xb-xa ; v9 = zc-zb ; v10 = v4*v7-v8*v9 ; v11 = pow(v4,2) ; v12 = 1/sqrt(pow(v9,2)+pow(v3,2)+v11) ; v13 = yb-ya ; v14 = v8*v3-v4*v13 ; v15 = v13*v9-v3*v7 ; v16 = sqrt(pow(v15,2)+pow(v14,2)+pow(v10,2)) ; v17 = 1/v16 ; v18 = v3*v15*v12*v17-v4*v10*v12*v17 ; v19 = v1+xb ; v20 = -zc ; v21 = zd+v20 ; v22 = v2*v9-v4*v21 ; v23 = v3*v21-v5*v9 ; v24 = 2*v3*v23+2*v19*v22 ; v25 = sqrt(pow(v6,2)+pow(v23,2)+pow(v22,2)) ; v26 = 1/pow(v25,3) ; v27 = v4*v14*v12*v17-v9*v15*v12*v17 ; v28 = v9*v10*v12*v17-v3*v14*v12*v17 ; v29 = 1/v25 ; v30 = v19*v27*v29+v3*v28*v29-v28*v23*v24*v26/2-v27*v22*v24*v26/2-v6*v18*v24*v26/2 ; v31 = v15*v17*v23*v29+v10*v17*v22*v29+v14*v6*v17*v29 ; v32 = v28*v23*v29+v27*v22*v29+v6*v18*v29 ; v33 = pow(v32,2)+pow(v31,2) ; v34 = 1/v33 ; v35 = v3*v15*v17*v29+v19*v10*v17*v29-v15*v17*v23*v24*v26/2-v10*v17*v22*v24*v26/2-v14*v6*v17*v24*v26/2 ; v36 = v20+zb ; v37 = 2*v36*v15+2*v4*v14 ; v38 = 1/pow(v16,3) ; v39 = v3*v36*v12*v17-v3*v15*v37*v12*v38/2+v4*v10*v37*v12*v38/2 ; v40 = -v36*v9*v12*v17+v11*v12*v17+v9*v15*v37*v12*v38/2-v4*v14*v37*v12*v38/2 ; v41 = -v4*v3*v12*v17-v9*v10*v37*v12*v38/2+v3*v14*v37*v12*v38/2 ; v42 = v41*v23*v29+v40*v22*v29+v6*v39*v29 ; v43 = v36*v17*v23*v29-v15*v37*v38*v23*v29/2-v10*v37*v38*v22*v29/2+v4*v6*v17*v29-v14*v6*v37*v38*v29/2 ; v44 = 2*v30*v32+2*v35*v31 ; v45 = 1/pow(v33,2) ; return 2*k*(-(v3*v36*v17*v29-v3*v15*v37*v38*v29/2-v19*v10*v37*v38*v29/2-v36*v17*v23*v24*v26/2+v15*v37*v38*v23*v24*v26/4+v10*v37*v38*v22*v24*v26/4-v4*v6*v17*v24*v26/2+v14*v6*v37*v38*v24*v26/4)*v32*v34+v35*v42*v34+(v19*v40*v29+v3*v41*v29-v41*v23*v24*v26/2-v40*v22*v24*v26/2-v6*v39*v24*v26/2)*v31*v34-v30*v43*v34+v43*v32*v44*v45-v31*v42*v44*v45)*rad_subtraction(atan2(v32,v31), eq)+2*k*(v30*v31*v34-v35*v32*v34)*(v31*v42*v34-v43*v32*v34) ; }

double HarmonicDihedralConstraintFunctions::hessianZaZa(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = -xc ; v7 = xd+v6 ; v8 = yd-yc ; v9 = v1*v8-v7*v4 ; v10 = zb-za ; v11 = zc-zb ; v12 = v1*v10-v3*v11 ; v13 = v2*v11-v4*v10 ; v14 = sqrt(pow(v5,2)+pow(v13,2)+pow(v12,2)) ; v15 = 1/v14 ; v16 = zd-zc ; v17 = v7*v11-v1*v16 ; v18 = v4*v16-v8*v11 ; v19 = 1/sqrt(pow(v9,2)+pow(v18,2)+pow(v17,2)) ; v20 = v13*v15*v18*v19+v12*v15*v17*v19+v5*v9*v15*v19 ; v21 = v6+xb ; v22 = 2*v4*v13+2*v21*v12 ; v23 = pow(v4,2) ; v24 = 1/sqrt(v23+pow(v11,2)+pow(v1,2)) ; v25 = 1/pow(v14,3) ; v26 = (v21*v11*v24*v15-v11*v12*v22*v24*v25/2+v4*v5*v22*v24*v25/2)*v18*v19+(-v4*v11*v24*v15+v11*v13*v22*v24*v25/2-v1*v5*v22*v24*v25/2)*v17*v19+v9*(v23*v24*v15-v21*v1*v24*v15-v4*v13*v22*v24*v25/2+v1*v12*v22*v24*v25/2)*v19 ; v27 = (v11*v12*v24*v15-v4*v5*v24*v15)*v18*v19+(v1*v5*v24*v15-v11*v13*v24*v15)*v17*v19+v9*(v4*v13*v24*v15-v1*v12*v24*v15)*v19 ; v28 = pow(v27,2)+pow(v20,2) ; v29 = 1/v28 ; v30 = v4*v15*v18*v19-v13*v22*v25*v18*v19/2+v21*v15*v17*v19-v12*v22*v25*v17*v19/2-v5*v9*v22*v25*v19/2 ; v31 = 2*v26*v27+2*v30*v20 ; v32 = 1/pow(v28,2) ; v33 = pow(v22,2) ; v34 = 1/pow(v14,5) ; v35 = 2*v23+2*pow(v21,2) ; return 2*pow(v20*v26*v29-v30*v27*v29,2)*k+2*k*(-(-v4*v22*v25*v18*v19-v35*v13*v25*v18*v19/2+3*v13*v33*v34*v18*v19/4-v21*v22*v25*v17*v19-v35*v12*v25*v17*v19/2+3*v12*v33*v34*v17*v19/4-v5*v35*v9*v25*v19/2+3*v5*v9*v33*v34*v19/4)*v27*v29+((-v21*v11*v22*v24*v25-v35*v11*v12*v24*v25/2+v4*v5*v35*v24*v25/2+3*v11*v12*v33*v24*v34/4-3*v4*v5*v33*v24*v34/4)*v18*v19+(v4*v11*v22*v24*v25+v35*v11*v13*v24*v25/2-v1*v5*v35*v24*v25/2-3*v11*v13*v33*v24*v34/4+3*v1*v5*v33*v24*v34/4)*v17*v19+v9*(-v23*v22*v24*v25+v21*v1*v22*v24*v25-v4*v35*v13*v24*v25/2+v1*v35*v12*v24*v25/2+3*v4*v13*v33*v24*v34/4-3*v1*v12*v33*v24*v34/4)*v19)*v20*v29+v30*v27*v31*v32-v20*v26*v31*v32)*rad_subtraction(atan2(v27,v20), eq) ; }

double HarmonicDihedralConstraintFunctions::hessianZaXb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54 ; v1 = xc-xb ; v2 = -ya ; v3 = yb+v2 ; v4 = xb-xa ; v5 = yc-yb ; v6 = v4*v5-v1*v3 ; v7 = -xc ; v8 = xd+v7 ; v9 = yd-yc ; v10 = v1*v9-v8*v5 ; v11 = zb-za ; v12 = zc-zb ; v13 = v1*v11-v4*v12 ; v14 = v3*v12-v5*v11 ; v15 = sqrt(pow(v6,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = -zc ; v18 = zd+v17 ; v19 = v8*v12-v1*v18 ; v20 = v5*v18-v9*v12 ; v21 = sqrt(pow(v20,2)+pow(v19,2)+pow(v10,2)) ; v22 = 1/v21 ; v23 = v14*v16*v20*v22+v13*v16*v19*v22+v6*v10*v16*v22 ; v24 = pow(v1,2) ; v25 = pow(v5,2) ; v26 = sqrt(v25+v24+pow(v12,2)) ; v27 = 1/v26 ; v28 = v5*v14*v27*v16-v1*v13*v27*v16 ; v29 = yc-yd ; v30 = 2*v18*v19+2*v29*v10 ; v31 = 1/pow(v21,3) ; v32 = v1*v6*v27*v16-v12*v14*v27*v16 ; v33 = v12*v13*v27*v16-v5*v6*v27*v16 ; v34 = yc+v2 ; v35 = v17+za ; v36 = 2*v35*v13+2*v34*v6 ; v37 = 1/pow(v15,3) ; v38 = 1/pow(v26,3) ; v39 = (v35*v12*v27*v16-v34*v5*v27*v16+v1*v12*v13*v38*v16-v1*v5*v6*v38*v16-v12*v13*v36*v27*v37/2+v5*v6*v36*v27*v37/2)*v20*v22+(-v6*v27*v16+v1*v34*v27*v16-v1*v12*v14*v38*v16+v24*v6*v38*v16+v12*v14*v36*v27*v37/2-v1*v6*v36*v27*v37/2)*v19*v22+v32*v18*v22+v29*v28*v22+v10*(v13*v27*v16-v1*v35*v27*v16+v1*v5*v14*v38*v16-v24*v13*v38*v16-v5*v14*v36*v27*v37/2+v1*v13*v36*v27*v37/2)*v22-v33*v20*v30*v31/2-v32*v19*v30*v31/2-v10*v28*v30*v31/2 ; v40 = v33*v20*v22+v32*v19*v22+v10*v28*v22 ; v41 = pow(v40,2)+pow(v23,2) ; v42 = 1/v41 ; v43 = -v14*v36*v37*v20*v22/2+v35*v16*v19*v22-v13*v36*v37*v19*v22/2+v13*v16*v18*v22+v34*v10*v16*v22+v6*v29*v16*v22-v6*v10*v36*v37*v22/2-v14*v16*v20*v30*v31/2-v13*v16*v19*v30*v31/2-v6*v10*v16*v30*v31/2 ; v44 = v7+xb ; v45 = 2*v5*v14+2*v44*v13 ; v46 = v25*v27*v16-v44*v1*v27*v16-v5*v14*v45*v27*v37/2+v1*v13*v45*v27*v37/2 ; v47 = -v5*v12*v27*v16+v12*v14*v45*v27*v37/2-v1*v6*v45*v27*v37/2 ; v48 = v44*v12*v27*v16-v12*v13*v45*v27*v37/2+v5*v6*v45*v27*v37/2 ; v49 = v48*v20*v22+v47*v19*v22+v10*v46*v22 ; v50 = v5*v16*v20*v22-v14*v45*v37*v20*v22/2+v44*v16*v19*v22-v13*v45*v37*v19*v22/2-v6*v10*v45*v37*v22/2 ; v51 = 2*v39*v40+2*v43*v23 ; v52 = 1/pow(v41,2) ; v53 = 1/pow(v15,5) ; v54 = 2*v13+2*v44*v35 ; return 2*k*(-(-v5*v36*v37*v20*v22/2-v14*v54*v37*v20*v22/2+3*v14*v36*v45*v53*v20*v22/4+v16*v19*v22-v35*v45*v37*v19*v22/2-v44*v36*v37*v19*v22/2-v13*v54*v37*v19*v22/2+3*v13*v36*v45*v53*v19*v22/4+v44*v16*v18*v22-v13*v45*v37*v18*v22/2-v34*v10*v45*v37*v22/2-v6*v29*v45*v37*v22/2-v6*v10*v54*v37*v22/2+3*v6*v10*v36*v45*v53*v22/4-v5*v16*v20*v30*v31/2+v14*v45*v37*v20*v30*v31/4-v44*v16*v19*v30*v31/2+v13*v45*v37*v19*v30*v31/4+v6*v10*v45*v37*v30*v31/4)*v40*v42-v50*v39*v42+v43*v49*v42+v23*((v12*v27*v16+v44*v1*v12*v38*v16-v35*v12*v45*v27*v37/2+v34*v5*v45*v27*v37/2-v44*v12*v36*v27*v37/2-v12*v13*v54*v27*v37/2+v5*v6*v54*v27*v37/2-v1*v12*v13*v45*v38*v37/2+v1*v5*v6*v45*v38*v37/2+3*v12*v13*v36*v45*v27*v53/4-3*v5*v6*v36*v45*v27*v53/4)*v20*v22+(-v1*v5*v12*v38*v16+v6*v45*v27*v37/2-v1*v34*v45*v27*v37/2+v5*v12*v36*v27*v37/2+v12*v14*v54*v27*v37/2-v1*v6*v54*v27*v37/2+v1*v12*v14*v45*v38*v37/2-v24*v6*v45*v38*v37/2-3*v12*v14*v36*v45*v27*v53/4+3*v1*v6*v36*v45*v27*v53/4)*v19*v22+v47*v18*v22+v29*v46*v22+v10*(-v1*v27*v16+v44*v27*v16+v1*v25*v38*v16-v44*v24*v38*v16-v13*v45*v27*v37/2+v1*v35*v45*v27*v37/2-v25*v36*v27*v37/2+v44*v1*v36*v27*v37/2-v5*v14*v54*v27*v37/2+v1*v13*v54*v27*v37/2-v1*v5*v14*v45*v38*v37/2+v24*v13*v45*v38*v37/2+3*v5*v14*v36*v45*v27*v53/4-3*v1*v13*v36*v45*v27*v53/4)*v22-v48*v20*v30*v31/2-v47*v19*v30*v31/2-v10*v46*v30*v31/2)*v42+v50*v40*v51*v52-v23*v49*v51*v52)*rad_subtraction(atan2(v40,v23), eq)+2*k*(v23*v39*v42-v43*v40*v42)*(v23*v49*v42-v50*v40*v42) ; }

double HarmonicDihedralConstraintFunctions::hessianZaYb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = -xc ; v7 = xd+v6 ; v8 = yd-yc ; v9 = v1*v8-v7*v4 ; v10 = -za ; v11 = zb+v10 ; v12 = zc-zb ; v13 = v1*v11-v3*v12 ; v14 = v2*v12-v4*v11 ; v15 = sqrt(pow(v5,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = zd-zc ; v18 = v7*v12-v1*v17 ; v19 = v4*v17-v8*v12 ; v20 = sqrt(pow(v9,2)+pow(v19,2)+pow(v18,2)) ; v21 = 1/v20 ; v22 = v14*v16*v19*v21+v13*v16*v18*v21+v5*v9*v16*v21 ; v23 = v6+xb ; v24 = 2*v4*v14+2*v23*v13 ; v25 = pow(v4,2) ; v26 = sqrt(v25+pow(v12,2)+pow(v1,2)) ; v27 = 1/v26 ; v28 = 1/pow(v15,3) ; v29 = v25*v27*v16-v23*v1*v27*v16-v4*v14*v24*v27*v28/2+v1*v13*v24*v27*v28/2 ; v30 = -v4*v12*v27*v16+v12*v14*v24*v27*v28/2-v1*v5*v24*v27*v28/2 ; v31 = v23*v12*v27*v16-v12*v13*v24*v27*v28/2+v4*v5*v24*v27*v28/2 ; v32 = v31*v19*v21+v30*v18*v21+v9*v29*v21 ; v33 = v4*v14*v27*v16-v1*v13*v27*v16 ; v34 = v1*v5*v27*v16-v12*v14*v27*v16 ; v35 = v12*v13*v27*v16-v4*v5*v27*v16 ; v36 = v35*v19*v21+v34*v18*v21+v9*v33*v21 ; v37 = pow(v36,2)+pow(v22,2) ; v38 = 1/v37 ; v39 = v4*v16*v19*v21-v14*v24*v28*v19*v21/2+v23*v16*v18*v21-v13*v24*v28*v18*v21/2-v5*v9*v24*v28*v21/2 ; v40 = zc-zd ; v41 = 2*v40*v19+2*v7*v9 ; v42 = 1/pow(v20,3) ; v43 = v6+xa ; v44 = zc+v10 ; v45 = 2*v44*v14+2*v43*v5 ; v46 = 1/pow(v26,3) ; v47 = (v5*v27*v16-v43*v4*v27*v16+v4*v12*v13*v46*v16-v25*v5*v46*v16-v12*v13*v45*v27*v28/2+v4*v5*v45*v27*v28/2)*v19*v21+(-v44*v12*v27*v16+v43*v1*v27*v16-v4*v12*v14*v46*v16+v1*v4*v5*v46*v16+v12*v14*v45*v27*v28/2-v1*v5*v45*v27*v28/2)*v18*v21+v35*v40*v21+v7*v33*v21+v9*(-v14*v27*v16+v4*v44*v27*v16+v25*v14*v46*v16-v1*v4*v13*v46*v16-v4*v14*v45*v27*v28/2+v1*v13*v45*v27*v28/2)*v21-v35*v19*v41*v42/2-v34*v18*v41*v42/2-v9*v33*v41*v42/2 ; v48 = v44*v16*v19*v21-v14*v45*v28*v19*v21/2-v13*v45*v28*v18*v21/2+v14*v16*v40*v21+v43*v9*v16*v21+v7*v5*v16*v21-v5*v9*v45*v28*v21/2-v14*v16*v19*v41*v42/2-v13*v16*v18*v41*v42/2-v5*v9*v16*v41*v42/2 ; v49 = 2*v47*v36+2*v48*v22 ; v50 = 1/pow(v37,2) ; v51 = 1/pow(v15,5) ; v52 = 2*v4*v44-2*v14 ; return 2*rad_subtraction(atan2(v36,v22), eq)*(v22*v38*(v21*(3*v4*v14*v24*v45*v27*v51/4-3*v1*v13*v24*v45*v27*v51/4+v16*pow(v4,3)*v46-v25*v14*v24*v46*v28/2+v1*v4*v13*v24*v46*v28/2-v4*v14*v52*v27*v28/2+v1*v13*v52*v27*v28/2-v25*v45*v27*v28/2+v23*v1*v45*v27*v28/2-v4*v44*v24*v27*v28/2+v14*v24*v27*v28/2-v23*v1*v4*v46*v16-2*v4*v27*v16)*v9-v9*v29*v41*v42/2-v31*v19*v41*v42/2-v30*v18*v41*v42/2+v31*v40*v21+v7*v29*v21+(v23*v4*v12*v46*v16-v23*v12*v45*v27*v28/2-v5*v24*v27*v28/2+v43*v4*v24*v27*v28/2-v12*v13*v52*v27*v28/2+v4*v5*v52*v27*v28/2-v4*v12*v13*v24*v46*v28/2+v25*v5*v24*v46*v28/2+3*v12*v13*v24*v45*v27*v51/4-3*v4*v5*v24*v45*v27*v51/4)*v19*v21+(v12*v27*v16-v25*v12*v46*v16+v4*v12*v45*v27*v28/2+v44*v12*v24*v27*v28/2-v43*v1*v24*v27*v28/2+v12*v14*v52*v27*v28/2-v1*v5*v52*v27*v28/2+v4*v12*v14*v24*v46*v28/2-v1*v4*v5*v24*v46*v28/2-3*v12*v14*v24*v45*v27*v51/4+3*v1*v5*v24*v45*v27*v51/4)*v18*v21)+v39*v36*v49*v50-v22*v32*v49*v50-v39*v47*v38-(-v16*v19*v21-v4*v45*v28*v19*v21/2-v44*v24*v28*v19*v21/2-v14*v52*v28*v19*v21/2+3*v14*v24*v45*v51*v19*v21/4-v23*v45*v28*v18*v21/2-v13*v52*v28*v18*v21/2+3*v13*v24*v45*v51*v18*v21/4+v4*v16*v40*v21-v14*v24*v28*v40*v21/2-v43*v9*v24*v28*v21/2-v7*v5*v24*v28*v21/2-v5*v9*v52*v28*v21/2+3*v5*v9*v24*v45*v51*v21/4-v4*v16*v19*v41*v42/2+v14*v24*v28*v19*v41*v42/4-v23*v16*v18*v41*v42/2+v13*v24*v28*v18*v41*v42/4+v5*v9*v24*v28*v41*v42/4)*v36*v38+v48*v32*v38)*k+2*k*(v22*v32*v38-v39*v36*v38)*(v22*v47*v38-v48*v36*v38) ; }

double HarmonicDihedralConstraintFunctions::hessianZaZb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54 ; v1 = xc-xb ; v2 = yb-ya ; v3 = -xa ; v4 = xb+v3 ; v5 = yc-yb ; v6 = v4*v5-v1*v2 ; v7 = -xc ; v8 = xd+v7 ; v9 = -yc ; v10 = yd+v9 ; v11 = v1*v10-v8*v5 ; v12 = zb-za ; v13 = zc-zb ; v14 = v1*v12-v4*v13 ; v15 = v2*v13-v5*v12 ; v16 = sqrt(pow(v6,2)+pow(v15,2)+pow(v14,2)) ; v17 = 1/v16 ; v18 = zd-zc ; v19 = v8*v13-v1*v18 ; v20 = v5*v18-v10*v13 ; v21 = sqrt(pow(v20,2)+pow(v19,2)+pow(v11,2)) ; v22 = 1/v21 ; v23 = v15*v17*v20*v22+v14*v17*v19*v22+v6*v11*v17*v22 ; v24 = pow(v5,2) ; v25 = pow(v13,2) ; v26 = sqrt(v25+v24+pow(v1,2)) ; v27 = 1/v26 ; v28 = v5*v15*v27*v17-v1*v14*v27*v17 ; v29 = xc-xd ; v30 = 2*v10*v20+2*v29*v19 ; v31 = 1/pow(v21,3) ; v32 = v1*v6*v27*v17-v13*v15*v27*v17 ; v33 = v13*v14*v27*v17-v5*v6*v27*v17 ; v34 = xc+v3 ; v35 = v9+ya ; v36 = 2*v35*v15+2*v34*v14 ; v37 = 1/pow(v16,3) ; v38 = 1/pow(v26,3) ; v39 = (-v14*v27*v17+v34*v13*v27*v17+v25*v14*v38*v17-v5*v6*v13*v38*v17-v13*v14*v36*v27*v37/2+v5*v6*v36*v27*v37/2)*v20*v22+(v15*v27*v17-v35*v13*v27*v17-v25*v15*v38*v17+v1*v6*v13*v38*v17+v13*v15*v36*v27*v37/2-v1*v6*v36*v27*v37/2)*v19*v22+v29*v32*v22+v10*v33*v22+v11*(v35*v5*v27*v17-v34*v1*v27*v17+v5*v13*v15*v38*v17-v1*v13*v14*v38*v17-v5*v15*v36*v27*v37/2+v1*v14*v36*v27*v37/2)*v22-v33*v20*v30*v31/2-v32*v19*v30*v31/2-v11*v28*v30*v31/2 ; v40 = v33*v20*v22+v32*v19*v22+v11*v28*v22 ; v41 = pow(v40,2)+pow(v23,2) ; v42 = 1/v41 ; v43 = v35*v17*v20*v22-v15*v36*v37*v20*v22/2+v34*v17*v19*v22-v14*v36*v37*v19*v22/2+v10*v15*v17*v22+v29*v14*v17*v22-v6*v11*v36*v37*v22/2-v15*v17*v20*v30*v31/2-v14*v17*v19*v30*v31/2-v6*v11*v17*v30*v31/2 ; v44 = v7+xb ; v45 = 2*v5*v15+2*v44*v14 ; v46 = v24*v27*v17-v44*v1*v27*v17-v5*v15*v45*v27*v37/2+v1*v14*v45*v27*v37/2 ; v47 = -v5*v13*v27*v17+v13*v15*v45*v27*v37/2-v1*v6*v45*v27*v37/2 ; v48 = v44*v13*v27*v17-v13*v14*v45*v27*v37/2+v5*v6*v45*v27*v37/2 ; v49 = v48*v20*v22+v47*v19*v22+v11*v46*v22 ; v50 = v5*v17*v20*v22-v15*v45*v37*v20*v22/2+v44*v17*v19*v22-v14*v45*v37*v19*v22/2-v6*v11*v45*v37*v22/2 ; v51 = 2*v39*v40+2*v43*v23 ; v52 = 1/pow(v41,2) ; v53 = 1/pow(v16,5) ; v54 = 2*v35*v5+2*v44*v34 ; return 2*k*(-(-v35*v45*v37*v20*v22/2-v5*v36*v37*v20*v22/2-v54*v15*v37*v20*v22/2+3*v15*v36*v45*v53*v20*v22/4-v34*v45*v37*v19*v22/2-v44*v36*v37*v19*v22/2-v54*v14*v37*v19*v22/2+3*v14*v36*v45*v53*v19*v22/4+v5*v10*v17*v22+v44*v29*v17*v22-v10*v15*v45*v37*v22/2-v29*v14*v45*v37*v22/2-v6*v54*v11*v37*v22/2+3*v6*v11*v36*v45*v53*v22/4-v5*v17*v20*v30*v31/2+v15*v45*v37*v20*v30*v31/4-v44*v17*v19*v30*v31/2+v14*v45*v37*v19*v30*v31/4+v6*v11*v45*v37*v30*v31/4)*v40*v42-v50*v39*v42+v43*v49*v42+v23*((-v44*v27*v17+v44*v25*v38*v17+v14*v45*v27*v37/2-v34*v13*v45*v27*v37/2-v44*v13*v36*v27*v37/2-v54*v13*v14*v27*v37/2+v5*v6*v54*v27*v37/2-v25*v14*v45*v38*v37/2+v5*v6*v13*v45*v38*v37/2+3*v13*v14*v36*v45*v27*v53/4-3*v5*v6*v36*v45*v27*v53/4)*v20*v22+(v5*v27*v17-v5*v25*v38*v17-v15*v45*v27*v37/2+v35*v13*v45*v27*v37/2+v5*v13*v36*v27*v37/2+v54*v13*v15*v27*v37/2-v1*v6*v54*v27*v37/2+v25*v15*v45*v38*v37/2-v1*v6*v13*v45*v38*v37/2-3*v13*v15*v36*v45*v27*v53/4+3*v1*v6*v36*v45*v27*v53/4)*v19*v22+v29*v47*v22+v10*v48*v22+v11*(v24*v13*v38*v17-v44*v1*v13*v38*v17-v35*v5*v45*v27*v37/2+v34*v1*v45*v27*v37/2-v24*v36*v27*v37/2+v44*v1*v36*v27*v37/2-v5*v54*v15*v27*v37/2+v1*v54*v14*v27*v37/2-v5*v13*v15*v45*v38*v37/2+v1*v13*v14*v45*v38*v37/2+3*v5*v15*v36*v45*v27*v53/4-3*v1*v14*v36*v45*v27*v53/4)*v22-v48*v20*v30*v31/2-v47*v19*v30*v31/2-v11*v46*v30*v31/2)*v42+v50*v40*v51*v52-v23*v49*v51*v52)*rad_subtraction(atan2(v40,v23), eq)+2*k*(v23*v39*v42-v43*v40*v42)*(v23*v49*v42-v50*v40*v42) ; }

double HarmonicDihedralConstraintFunctions::hessianZaXc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = -yb ; v5 = yc+v4 ; v6 = v3*v5-v1*v2 ; v7 = -xc ; v8 = xd+v7 ; v9 = yd-yc ; v10 = v1*v9-v8*v5 ; v11 = zb-za ; v12 = zc-zb ; v13 = v1*v11-v3*v12 ; v14 = v2*v12-v5*v11 ; v15 = sqrt(pow(v6,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = zd-zc ; v18 = v8*v12-v1*v17 ; v19 = v5*v17-v9*v12 ; v20 = sqrt(pow(v19,2)+pow(v18,2)+pow(v10,2)) ; v21 = 1/v20 ; v22 = v14*v16*v19*v21+v13*v16*v18*v21+v6*v10*v16*v21 ; v23 = pow(v1,2) ; v24 = pow(v5,2) ; v25 = sqrt(v24+v23+pow(v12,2)) ; v26 = 1/v25 ; v27 = v5*v14*v26*v16-v1*v13*v26*v16 ; v28 = yd+v4 ; v29 = zb-zd ; v30 = 2*v29*v18+2*v28*v10 ; v31 = 1/pow(v20,3) ; v32 = v1*v6*v26*v16-v12*v14*v26*v16 ; v33 = v12*v13*v26*v16-v5*v6*v26*v16 ; v34 = v4+ya ; v35 = 2*v11*v13+2*v34*v6 ; v36 = 1/pow(v15,3) ; v37 = 1/pow(v25,3) ; v38 = (v11*v12*v26*v16-v34*v5*v26*v16-v1*v12*v13*v37*v16+v1*v5*v6*v37*v16-v12*v13*v35*v26*v36/2+v5*v6*v35*v26*v36/2)*v19*v21+(v6*v26*v16+v1*v34*v26*v16+v1*v12*v14*v37*v16-v23*v6*v37*v16+v12*v14*v35*v26*v36/2-v1*v6*v35*v26*v36/2)*v18*v21+v32*v29*v21+v28*v27*v21+v10*(-v13*v26*v16-v1*v11*v26*v16-v1*v5*v14*v37*v16+v23*v13*v37*v16-v5*v14*v35*v26*v36/2+v1*v13*v35*v26*v36/2)*v21-v33*v19*v30*v31/2-v32*v18*v30*v31/2-v10*v27*v30*v31/2 ; v39 = v33*v19*v21+v32*v18*v21+v10*v27*v21 ; v40 = pow(v39,2)+pow(v22,2) ; v41 = 1/v40 ; v42 = -v14*v35*v36*v19*v21/2+v11*v16*v18*v21-v13*v35*v36*v18*v21/2+v13*v16*v29*v21+v34*v10*v16*v21+v6*v28*v16*v21-v6*v10*v35*v36*v21/2-v14*v16*v19*v30*v31/2-v13*v16*v18*v30*v31/2-v6*v10*v16*v30*v31/2 ; v43 = v7+xb ; v44 = 2*v5*v14+2*v43*v13 ; v45 = v24*v26*v16-v43*v1*v26*v16-v5*v14*v44*v26*v36/2+v1*v13*v44*v26*v36/2 ; v46 = -v5*v12*v26*v16+v12*v14*v44*v26*v36/2-v1*v6*v44*v26*v36/2 ; v47 = v43*v12*v26*v16-v12*v13*v44*v26*v36/2+v5*v6*v44*v26*v36/2 ; v48 = v47*v19*v21+v46*v18*v21+v10*v45*v21 ; v49 = v5*v16*v19*v21-v14*v44*v36*v19*v21/2+v43*v16*v18*v21-v13*v44*v36*v18*v21/2-v6*v10*v44*v36*v21/2 ; v50 = 2*v38*v39+2*v42*v22 ; v51 = 1/pow(v40,2) ; v52 = 1/pow(v15,5) ; v53 = 2*v43*v11-2*v13 ; return 2*k*(-(-v5*v35*v36*v19*v21/2-v14*v53*v36*v19*v21/2+3*v14*v35*v44*v52*v19*v21/4-v16*v18*v21-v11*v44*v36*v18*v21/2-v43*v35*v36*v18*v21/2-v13*v53*v36*v18*v21/2+3*v13*v35*v44*v52*v18*v21/4+v43*v16*v29*v21-v13*v44*v36*v29*v21/2-v34*v10*v44*v36*v21/2-v6*v28*v44*v36*v21/2-v6*v10*v53*v36*v21/2+3*v6*v10*v35*v44*v52*v21/4-v5*v16*v19*v30*v31/2+v14*v44*v36*v19*v30*v31/4-v43*v16*v18*v30*v31/2+v13*v44*v36*v18*v30*v31/4+v6*v10*v44*v36*v30*v31/4)*v39*v41-v49*v38*v41+v42*v48*v41+v22*((-v12*v26*v16-v43*v1*v12*v37*v16-v11*v12*v44*v26*v36/2+v34*v5*v44*v26*v36/2-v43*v12*v35*v26*v36/2-v12*v13*v53*v26*v36/2+v5*v6*v53*v26*v36/2+v1*v12*v13*v44*v37*v36/2-v1*v5*v6*v44*v37*v36/2+3*v12*v13*v35*v44*v26*v52/4-3*v5*v6*v35*v44*v26*v52/4)*v19*v21+(v1*v5*v12*v37*v16-v6*v44*v26*v36/2-v1*v34*v44*v26*v36/2+v5*v12*v35*v26*v36/2+v12*v14*v53*v26*v36/2-v1*v6*v53*v26*v36/2-v1*v12*v14*v44*v37*v36/2+v23*v6*v44*v37*v36/2-3*v12*v14*v35*v44*v26*v52/4+3*v1*v6*v35*v44*v26*v52/4)*v18*v21+v46*v29*v21+v28*v45*v21+v10*(v1*v26*v16-v43*v26*v16-v1*v24*v37*v16+v43*v23*v37*v16+v13*v44*v26*v36/2+v1*v11*v44*v26*v36/2-v24*v35*v26*v36/2+v43*v1*v35*v26*v36/2-v5*v14*v53*v26*v36/2+v1*v13*v53*v26*v36/2+v1*v5*v14*v44*v37*v36/2-v23*v13*v44*v37*v36/2+3*v5*v14*v35*v44*v26*v52/4-3*v1*v13*v35*v44*v26*v52/4)*v21-v47*v19*v30*v31/2-v46*v18*v30*v31/2-v10*v45*v30*v31/2)*v41+v49*v39*v50*v51-v22*v48*v50*v51)*rad_subtraction(atan2(v39,v22), eq)+2*k*(v22*v38*v41-v42*v39*v41)*(v22*v48*v41-v49*v39*v41) ; }

double HarmonicDihedralConstraintFunctions::hessianZaYc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = -xc ; v7 = xd+v6 ; v8 = yd-yc ; v9 = v1*v8-v7*v4 ; v10 = zb-za ; v11 = -zb ; v12 = zc+v11 ; v13 = v1*v10-v3*v12 ; v14 = v2*v12-v4*v10 ; v15 = sqrt(pow(v5,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = zd-zc ; v18 = v7*v12-v1*v17 ; v19 = v4*v17-v8*v12 ; v20 = sqrt(pow(v9,2)+pow(v19,2)+pow(v18,2)) ; v21 = 1/v20 ; v22 = v14*v16*v19*v21+v13*v16*v18*v21+v5*v9*v16*v21 ; v23 = v6+xb ; v24 = 2*v4*v14+2*v23*v13 ; v25 = pow(v4,2) ; v26 = sqrt(v25+pow(v12,2)+pow(v1,2)) ; v27 = 1/v26 ; v28 = 1/pow(v15,3) ; v29 = v25*v27*v16-v23*v1*v27*v16-v4*v14*v24*v27*v28/2+v1*v13*v24*v27*v28/2 ; v30 = -v4*v12*v27*v16+v12*v14*v24*v27*v28/2-v1*v5*v24*v27*v28/2 ; v31 = v23*v12*v27*v16-v12*v13*v24*v27*v28/2+v4*v5*v24*v27*v28/2 ; v32 = v31*v19*v21+v30*v18*v21+v9*v29*v21 ; v33 = v4*v14*v27*v16-v1*v13*v27*v16 ; v34 = v1*v5*v27*v16-v12*v14*v27*v16 ; v35 = v12*v13*v27*v16-v4*v5*v27*v16 ; v36 = v35*v19*v21+v34*v18*v21+v9*v33*v21 ; v37 = pow(v36,2)+pow(v22,2) ; v38 = 1/v37 ; v39 = v4*v16*v19*v21-v14*v24*v28*v19*v21/2+v23*v16*v18*v21-v13*v24*v28*v18*v21/2-v5*v9*v24*v28*v21/2 ; v40 = xb-xd ; v41 = zd+v11 ; v42 = 2*v41*v19+2*v40*v9 ; v43 = 1/pow(v20,3) ; v44 = v11+za ; v45 = 2*v44*v14+2*v3*v5 ; v46 = 1/pow(v26,3) ; v47 = (-v5*v27*v16-v3*v4*v27*v16-v4*v12*v13*v46*v16+v25*v5*v46*v16-v12*v13*v45*v27*v28/2+v4*v5*v45*v27*v28/2)*v19*v21+(-v44*v12*v27*v16+v3*v1*v27*v16+v4*v12*v14*v46*v16-v1*v4*v5*v46*v16+v12*v14*v45*v27*v28/2-v1*v5*v45*v27*v28/2)*v18*v21+v35*v41*v21+v40*v33*v21+v9*(v14*v27*v16+v4*v44*v27*v16-v25*v14*v46*v16+v1*v4*v13*v46*v16-v4*v14*v45*v27*v28/2+v1*v13*v45*v27*v28/2)*v21-v35*v19*v42*v43/2-v34*v18*v42*v43/2-v9*v33*v42*v43/2 ; v48 = v44*v16*v19*v21-v14*v45*v28*v19*v21/2-v13*v45*v28*v18*v21/2+v14*v16*v41*v21+v3*v9*v16*v21+v40*v5*v16*v21-v5*v9*v45*v28*v21/2-v14*v16*v19*v42*v43/2-v13*v16*v18*v42*v43/2-v5*v9*v16*v42*v43/2 ; v49 = 2*v47*v36+2*v48*v22 ; v50 = 1/pow(v37,2) ; v51 = 1/pow(v15,5) ; v52 = 2*v14+2*v4*v44 ; return 2*rad_subtraction(atan2(v36,v22), eq)*(v22*v38*(v21*(3*v4*v14*v24*v45*v27*v51/4-3*v1*v13*v24*v45*v27*v51/4-v16*pow(v4,3)*v46+v25*v14*v24*v46*v28/2-v1*v4*v13*v24*v46*v28/2-v4*v14*v52*v27*v28/2+v1*v13*v52*v27*v28/2-v25*v45*v27*v28/2+v23*v1*v45*v27*v28/2-v4*v44*v24*v27*v28/2-v14*v24*v27*v28/2+v23*v1*v4*v46*v16+2*v4*v27*v16)*v9-v9*v29*v42*v43/2-v31*v19*v42*v43/2-v30*v18*v42*v43/2+v31*v41*v21+v40*v29*v21+(-v23*v4*v12*v46*v16-v23*v12*v45*v27*v28/2+v5*v24*v27*v28/2+v3*v4*v24*v27*v28/2-v12*v13*v52*v27*v28/2+v4*v5*v52*v27*v28/2+v4*v12*v13*v24*v46*v28/2-v25*v5*v24*v46*v28/2+3*v12*v13*v24*v45*v27*v51/4-3*v4*v5*v24*v45*v27*v51/4)*v19*v21+(-v12*v27*v16+v25*v12*v46*v16+v4*v12*v45*v27*v28/2+v44*v12*v24*v27*v28/2-v3*v1*v24*v27*v28/2+v12*v14*v52*v27*v28/2-v1*v5*v52*v27*v28/2-v4*v12*v14*v24*v46*v28/2+v1*v4*v5*v24*v46*v28/2-3*v12*v14*v24*v45*v27*v51/4+3*v1*v5*v24*v45*v27*v51/4)*v18*v21)+v39*v36*v49*v50-v22*v32*v49*v50-v39*v47*v38-(v16*v19*v21-v4*v45*v28*v19*v21/2-v44*v24*v28*v19*v21/2-v14*v52*v28*v19*v21/2+3*v14*v24*v45*v51*v19*v21/4-v23*v45*v28*v18*v21/2-v13*v52*v28*v18*v21/2+3*v13*v24*v45*v51*v18*v21/4+v4*v16*v41*v21-v14*v24*v28*v41*v21/2-v3*v9*v24*v28*v21/2-v40*v5*v24*v28*v21/2-v5*v9*v52*v28*v21/2+3*v5*v9*v24*v45*v51*v21/4-v4*v16*v19*v42*v43/2+v14*v24*v28*v19*v42*v43/4-v23*v16*v18*v42*v43/2+v13*v24*v28*v18*v42*v43/4+v5*v9*v24*v28*v42*v43/4)*v36*v38+v48*v32*v38)*k+2*k*(v22*v32*v38-v39*v36*v38)*(v22*v47*v38-v48*v36*v38) ; }

double HarmonicDihedralConstraintFunctions::hessianZaZc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = -xb ; v2 = xc+v1 ; v3 = yb-ya ; v4 = xb-xa ; v5 = yc-yb ; v6 = v4*v5-v2*v3 ; v7 = -xc ; v8 = xd+v7 ; v9 = yd-yc ; v10 = v2*v9-v8*v5 ; v11 = zb-za ; v12 = zc-zb ; v13 = v2*v11-v4*v12 ; v14 = v3*v12-v5*v11 ; v15 = sqrt(pow(v6,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = zd-zc ; v18 = v8*v12-v2*v17 ; v19 = v5*v17-v9*v12 ; v20 = sqrt(pow(v19,2)+pow(v18,2)+pow(v10,2)) ; v21 = 1/v20 ; v22 = v14*v16*v19*v21+v13*v16*v18*v21+v6*v10*v16*v21 ; v23 = pow(v5,2) ; v24 = pow(v12,2) ; v25 = sqrt(v24+v23+pow(v2,2)) ; v26 = 1/v25 ; v27 = v5*v14*v26*v16-v2*v13*v26*v16 ; v28 = xd+v1 ; v29 = yb-yd ; v30 = 2*v29*v19+2*v28*v18 ; v31 = 1/pow(v20,3) ; v32 = v2*v6*v26*v16-v12*v14*v26*v16 ; v33 = v12*v13*v26*v16-v5*v6*v26*v16 ; v34 = v1+xa ; v35 = 2*v3*v14+2*v34*v13 ; v36 = 1/pow(v15,3) ; v37 = 1/pow(v25,3) ; v38 = (v13*v26*v16+v34*v12*v26*v16-v24*v13*v37*v16+v5*v6*v12*v37*v16-v12*v13*v35*v26*v36/2+v5*v6*v35*v26*v36/2)*v19*v21+(-v14*v26*v16-v3*v12*v26*v16+v24*v14*v37*v16-v2*v6*v12*v37*v16+v12*v14*v35*v26*v36/2-v2*v6*v35*v26*v36/2)*v18*v21+v28*v32*v21+v29*v33*v21+v10*(v3*v5*v26*v16-v34*v2*v26*v16-v5*v12*v14*v37*v16+v2*v12*v13*v37*v16-v5*v14*v35*v26*v36/2+v2*v13*v35*v26*v36/2)*v21-v33*v19*v30*v31/2-v32*v18*v30*v31/2-v10*v27*v30*v31/2 ; v39 = v33*v19*v21+v32*v18*v21+v10*v27*v21 ; v40 = pow(v39,2)+pow(v22,2) ; v41 = 1/v40 ; v42 = v3*v16*v19*v21-v14*v35*v36*v19*v21/2+v34*v16*v18*v21-v13*v35*v36*v18*v21/2+v29*v14*v16*v21+v28*v13*v16*v21-v6*v10*v35*v36*v21/2-v14*v16*v19*v30*v31/2-v13*v16*v18*v30*v31/2-v6*v10*v16*v30*v31/2 ; v43 = v7+xb ; v44 = 2*v5*v14+2*v43*v13 ; v45 = v23*v26*v16-v43*v2*v26*v16-v5*v14*v44*v26*v36/2+v2*v13*v44*v26*v36/2 ; v46 = -v5*v12*v26*v16+v12*v14*v44*v26*v36/2-v2*v6*v44*v26*v36/2 ; v47 = v43*v12*v26*v16-v12*v13*v44*v26*v36/2+v5*v6*v44*v26*v36/2 ; v48 = v47*v19*v21+v46*v18*v21+v10*v45*v21 ; v49 = v5*v16*v19*v21-v14*v44*v36*v19*v21/2+v43*v16*v18*v21-v13*v44*v36*v18*v21/2-v6*v10*v44*v36*v21/2 ; v50 = 2*v38*v39+2*v42*v22 ; v51 = 1/pow(v40,2) ; v52 = 1/pow(v15,5) ; v53 = 2*v3*v5+2*v34*v43 ; return 2*k*(-(-v3*v44*v36*v19*v21/2-v5*v35*v36*v19*v21/2-v53*v14*v36*v19*v21/2+3*v14*v35*v44*v52*v19*v21/4-v34*v44*v36*v18*v21/2-v43*v35*v36*v18*v21/2-v53*v13*v36*v18*v21/2+3*v13*v35*v44*v52*v18*v21/4+v5*v29*v16*v21+v43*v28*v16*v21-v29*v14*v44*v36*v21/2-v28*v13*v44*v36*v21/2-v6*v53*v10*v36*v21/2+3*v6*v10*v35*v44*v52*v21/4-v5*v16*v19*v30*v31/2+v14*v44*v36*v19*v30*v31/4-v43*v16*v18*v30*v31/2+v13*v44*v36*v18*v30*v31/4+v6*v10*v44*v36*v30*v31/4)*v39*v41-v49*v38*v41+v42*v48*v41+v22*((v43*v26*v16-v43*v24*v37*v16-v13*v44*v26*v36/2-v34*v12*v44*v26*v36/2-v43*v12*v35*v26*v36/2-v53*v12*v13*v26*v36/2+v5*v6*v53*v26*v36/2+v24*v13*v44*v37*v36/2-v5*v6*v12*v44*v37*v36/2+3*v12*v13*v35*v44*v26*v52/4-3*v5*v6*v35*v44*v26*v52/4)*v19*v21+(-v5*v26*v16+v5*v24*v37*v16+v14*v44*v26*v36/2+v3*v12*v44*v26*v36/2+v5*v12*v35*v26*v36/2+v53*v12*v14*v26*v36/2-v2*v6*v53*v26*v36/2-v24*v14*v44*v37*v36/2+v2*v6*v12*v44*v37*v36/2-3*v12*v14*v35*v44*v26*v52/4+3*v2*v6*v35*v44*v26*v52/4)*v18*v21+v28*v46*v21+v29*v47*v21+v10*(-v23*v12*v37*v16+v43*v2*v12*v37*v16-v3*v5*v44*v26*v36/2+v34*v2*v44*v26*v36/2-v23*v35*v26*v36/2+v43*v2*v35*v26*v36/2-v5*v53*v14*v26*v36/2+v2*v53*v13*v26*v36/2+v5*v12*v14*v44*v37*v36/2-v2*v12*v13*v44*v37*v36/2+3*v5*v14*v35*v44*v26*v52/4-3*v2*v13*v35*v44*v26*v52/4)*v21-v47*v19*v30*v31/2-v46*v18*v30*v31/2-v10*v45*v30*v31/2)*v41+v49*v39*v50*v51-v22*v48*v50*v51)*rad_subtraction(atan2(v39,v22), eq)+2*k*(v22*v38*v41-v42*v39*v41)*(v22*v48*v41-v49*v39*v41) ; }

double HarmonicDihedralConstraintFunctions::hessianZaXd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = xc-xb ; v5 = -yc ; v6 = yd+v5 ; v7 = v4*v6-v2*v3 ; v8 = zb-za ; v9 = xb-xa ; v10 = zc-zb ; v11 = v4*v8-v9*v10 ; v12 = pow(v3,2) ; v13 = 1/sqrt(pow(v4,2)+v12+pow(v10,2)) ; v14 = yb-ya ; v15 = v9*v3-v4*v14 ; v16 = v14*v10-v3*v8 ; v17 = sqrt(pow(v16,2)+pow(v15,2)+pow(v11,2)) ; v18 = 1/v17 ; v19 = v3*v16*v13*v18-v4*v11*v13*v18 ; v20 = v5+yb ; v21 = zd-zc ; v22 = v2*v10-v4*v21 ; v23 = 2*v10*v22+2*v20*v7 ; v24 = v3*v21-v6*v10 ; v25 = sqrt(pow(v7,2)+pow(v24,2)+pow(v22,2)) ; v26 = 1/pow(v25,3) ; v27 = v4*v15*v13*v18-v10*v16*v13*v18 ; v28 = v10*v11*v13*v18-v3*v15*v13*v18 ; v29 = 1/v25 ; v30 = v10*v27*v29+v20*v19*v29-v28*v24*v23*v26/2-v27*v22*v23*v26/2-v7*v19*v23*v26/2 ; v31 = v16*v18*v24*v29+v11*v18*v22*v29+v15*v7*v18*v29 ; v32 = v28*v24*v29+v27*v22*v29+v7*v19*v29 ; v33 = pow(v32,2)+pow(v31,2) ; v34 = 1/v33 ; v35 = v10*v11*v18*v29+v20*v15*v18*v29-v16*v18*v24*v23*v26/2-v11*v18*v22*v23*v26/2-v15*v7*v18*v23*v26/2 ; v36 = v1+xb ; v37 = 2*v3*v16+2*v36*v11 ; v38 = 1/pow(v17,3) ; v39 = v12*v13*v18-v36*v4*v13*v18-v3*v16*v37*v13*v38/2+v4*v11*v37*v13*v38/2 ; v40 = -v3*v10*v13*v18+v10*v16*v37*v13*v38/2-v4*v15*v37*v13*v38/2 ; v41 = v36*v10*v13*v18-v10*v11*v37*v13*v38/2+v3*v15*v37*v13*v38/2 ; v42 = v41*v24*v29+v40*v22*v29+v7*v39*v29 ; v43 = v3*v18*v24*v29-v16*v37*v38*v24*v29/2+v36*v18*v22*v29-v11*v37*v38*v22*v29/2-v15*v7*v37*v38*v29/2 ; v44 = 2*v30*v32+2*v35*v31 ; v45 = 1/pow(v33,2) ; return 2*k*(-(v36*v10*v18*v29-v10*v11*v37*v38*v29/2-v20*v15*v37*v38*v29/2-v3*v18*v24*v23*v26/2+v16*v37*v38*v24*v23*v26/4-v36*v18*v22*v23*v26/2+v11*v37*v38*v22*v23*v26/4+v15*v7*v37*v38*v23*v26/4)*v32*v34+v35*v42*v34+(v10*v40*v29+v20*v39*v29-v41*v24*v23*v26/2-v40*v22*v23*v26/2-v7*v39*v23*v26/2)*v31*v34-v30*v43*v34+v43*v32*v44*v45-v31*v42*v44*v45)*rad_subtraction(atan2(v32,v31), eq)+2*k*(v30*v31*v34-v35*v32*v34)*(v31*v42*v34-v43*v32*v34) ; }

double HarmonicDihedralConstraintFunctions::hessianZaYd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = xc-xb ; v5 = yd-yc ; v6 = v4*v5-v2*v3 ; v7 = zb-za ; v8 = xb-xa ; v9 = zc-zb ; v10 = v4*v7-v8*v9 ; v11 = pow(v3,2) ; v12 = 1/sqrt(pow(v9,2)+pow(v4,2)+v11) ; v13 = yb-ya ; v14 = v8*v3-v4*v13 ; v15 = v13*v9-v3*v7 ; v16 = sqrt(pow(v15,2)+pow(v14,2)+pow(v10,2)) ; v17 = 1/v16 ; v18 = v3*v15*v12*v17-v4*v10*v12*v17 ; v19 = -zc ; v20 = v19+zb ; v21 = zd+v19 ; v22 = v3*v21-v5*v9 ; v23 = 2*v20*v22+2*v4*v6 ; v24 = v2*v9-v4*v21 ; v25 = sqrt(pow(v6,2)+pow(v24,2)+pow(v22,2)) ; v26 = 1/pow(v25,3) ; v27 = v4*v14*v12*v17-v9*v15*v12*v17 ; v28 = v9*v10*v12*v17-v3*v14*v12*v17 ; v29 = 1/v25 ; v30 = v4*v18*v29+v20*v28*v29-v28*v22*v23*v26/2-v27*v24*v23*v26/2-v6*v18*v23*v26/2 ; v31 = v15*v17*v22*v29+v10*v17*v24*v29+v14*v6*v17*v29 ; v32 = v28*v22*v29+v27*v24*v29+v6*v18*v29 ; v33 = pow(v32,2)+pow(v31,2) ; v34 = 1/v33 ; v35 = v20*v15*v17*v29+v4*v14*v17*v29-v15*v17*v22*v23*v26/2-v10*v17*v24*v23*v26/2-v14*v6*v17*v23*v26/2 ; v36 = v1+xb ; v37 = 2*v3*v15+2*v36*v10 ; v38 = 1/pow(v16,3) ; v39 = v11*v12*v17-v36*v4*v12*v17-v3*v15*v37*v12*v38/2+v4*v10*v37*v12*v38/2 ; v40 = -v3*v9*v12*v17+v9*v15*v37*v12*v38/2-v4*v14*v37*v12*v38/2 ; v41 = v36*v9*v12*v17-v9*v10*v37*v12*v38/2+v3*v14*v37*v12*v38/2 ; v42 = v41*v22*v29+v40*v24*v29+v6*v39*v29 ; v43 = v3*v17*v22*v29-v15*v37*v38*v22*v29/2+v36*v17*v24*v29-v10*v37*v38*v24*v29/2-v14*v6*v37*v38*v29/2 ; v44 = 2*v30*v32+2*v35*v31 ; v45 = 1/pow(v33,2) ; return 2*k*(-(v3*v20*v17*v29-v20*v15*v37*v38*v29/2-v4*v14*v37*v38*v29/2-v3*v17*v22*v23*v26/2+v15*v37*v38*v22*v23*v26/4-v36*v17*v24*v23*v26/2+v10*v37*v38*v24*v23*v26/4+v14*v6*v37*v38*v23*v26/4)*v32*v34+v35*v42*v34+(v20*v41*v29+v4*v39*v29-v41*v22*v23*v26/2-v40*v24*v23*v26/2-v6*v39*v23*v26/2)*v31*v34-v30*v43*v34+v43*v32*v44*v45-v31*v42*v44*v45)*rad_subtraction(atan2(v32,v31), eq)+2*k*(v30*v31*v34-v35*v32*v34)*(v31*v42*v34-v43*v32*v34) ; }

double HarmonicDihedralConstraintFunctions::hessianZaZd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = xc-xb ; v5 = yd-yc ; v6 = v4*v5-v2*v3 ; v7 = zb-za ; v8 = xb-xa ; v9 = zc-zb ; v10 = v4*v7-v8*v9 ; v11 = pow(v3,2) ; v12 = 1/sqrt(pow(v9,2)+pow(v4,2)+v11) ; v13 = yb-ya ; v14 = v8*v3-v4*v13 ; v15 = v13*v9-v3*v7 ; v16 = sqrt(pow(v15,2)+pow(v14,2)+pow(v10,2)) ; v17 = 1/v16 ; v18 = v3*v15*v12*v17-v4*v10*v12*v17 ; v19 = v1+xb ; v20 = zd-zc ; v21 = v2*v9-v4*v20 ; v22 = v3*v20-v5*v9 ; v23 = 2*v3*v22+2*v19*v21 ; v24 = sqrt(pow(v6,2)+pow(v22,2)+pow(v21,2)) ; v25 = 1/pow(v24,3) ; v26 = v4*v14*v12*v17-v9*v15*v12*v17 ; v27 = v9*v10*v12*v17-v3*v14*v12*v17 ; v28 = 1/v24 ; v29 = v19*v26*v28+v3*v27*v28-v27*v22*v23*v25/2-v26*v21*v23*v25/2-v6*v18*v23*v25/2 ; v30 = v15*v17*v22*v28+v10*v17*v21*v28+v14*v6*v17*v28 ; v31 = v27*v22*v28+v26*v21*v28+v6*v18*v28 ; v32 = pow(v31,2)+pow(v30,2) ; v33 = 1/v32 ; v34 = v3*v15*v17*v28+v19*v10*v17*v28-v15*v17*v22*v23*v25/2-v10*v17*v21*v23*v25/2-v14*v6*v17*v23*v25/2 ; v35 = 2*v3*v15+2*v19*v10 ; v36 = 1/pow(v16,3) ; v37 = v11*v12*v17-v19*v4*v12*v17-v3*v15*v35*v12*v36/2+v4*v10*v35*v12*v36/2 ; v38 = -v3*v9*v12*v17+v9*v15*v35*v12*v36/2-v4*v14*v35*v12*v36/2 ; v39 = v19*v9*v12*v17-v9*v10*v35*v12*v36/2+v3*v14*v35*v12*v36/2 ; v40 = v39*v22*v28+v38*v21*v28+v6*v37*v28 ; v41 = v3*v17*v22*v28-v15*v35*v36*v22*v28/2+v19*v17*v21*v28-v10*v35*v36*v21*v28/2-v14*v6*v35*v36*v28/2 ; v42 = 2*v29*v31+2*v34*v30 ; v43 = 1/pow(v32,2) ; return 2*rad_subtraction(atan2(v31,v30), eq)*(-v30*v40*v42*v43+v41*v31*v42*v43-v29*v41*v33+v34*v40*v33-(-v3*v15*v35*v36*v28/2-v19*v10*v35*v36*v28/2+v17*pow(v19,2)*v28+v11*v17*v28+v14*v6*v35*v36*v23*v25/4+v15*v35*v36*v22*v23*v25/4-v3*v17*v22*v23*v25/2+v10*v35*v36*v21*v23*v25/4-v19*v17*v21*v23*v25/2)*v31*v33+(v19*v38*v28+v3*v39*v28-v39*v22*v23*v25/2-v38*v21*v23*v25/2-v6*v37*v23*v25/2)*v30*v33)*k+2*k*(v29*v30*v33-v34*v31*v33)*(v30*v40*v33-v41*v31*v33) ; }

double HarmonicDihedralConstraintFunctions::hessianXbXb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54 ; v1 = xc-xb ; v2 = -ya ; v3 = yb+v2 ; v4 = xb-xa ; v5 = yc-yb ; v6 = v4*v5-v1*v3 ; v7 = xd-xc ; v8 = yd-yc ; v9 = v1*v8-v7*v5 ; v10 = zb-za ; v11 = zc-zb ; v12 = v1*v10-v4*v11 ; v13 = v3*v11-v5*v10 ; v14 = sqrt(pow(v6,2)+pow(v13,2)+pow(v12,2)) ; v15 = 1/v14 ; v16 = -zc ; v17 = zd+v16 ; v18 = v7*v11-v1*v17 ; v19 = v5*v17-v8*v11 ; v20 = sqrt(pow(v9,2)+pow(v19,2)+pow(v18,2)) ; v21 = 1/v20 ; v22 = v13*v15*v19*v21+v12*v15*v18*v21+v6*v9*v15*v21 ; v23 = pow(v1,2) ; v24 = sqrt(pow(v5,2)+v23+pow(v11,2)) ; v25 = 1/v24 ; v26 = v5*v13*v25*v15-v1*v12*v25*v15 ; v27 = yc-yd ; v28 = 2*v17*v18+2*v27*v9 ; v29 = 1/pow(v20,3) ; v30 = v1*v6*v25*v15-v11*v13*v25*v15 ; v31 = v11*v12*v25*v15-v5*v6*v25*v15 ; v32 = yc+v2 ; v33 = v16+za ; v34 = 2*v33*v12+2*v32*v6 ; v35 = 1/pow(v14,3) ; v36 = 1/pow(v24,3) ; v37 = v12*v25*v15-v1*v33*v25*v15+v1*v5*v13*v36*v15-v23*v12*v36*v15-v5*v13*v34*v25*v35/2+v1*v12*v34*v25*v35/2 ; v38 = -v6*v25*v15+v1*v32*v25*v15-v1*v11*v13*v36*v15+v23*v6*v36*v15+v11*v13*v34*v25*v35/2-v1*v6*v34*v25*v35/2 ; v39 = v33*v11*v25*v15-v32*v5*v25*v15+v1*v11*v12*v36*v15-v1*v5*v6*v36*v15-v11*v12*v34*v25*v35/2+v5*v6*v34*v25*v35/2 ; v40 = v39*v19*v21+v38*v18*v21+v30*v17*v21+v27*v26*v21+v9*v37*v21-v31*v19*v28*v29/2-v30*v18*v28*v29/2-v9*v26*v28*v29/2 ; v41 = v31*v19*v21+v30*v18*v21+v9*v26*v21 ; v42 = pow(v41,2)+pow(v22,2) ; v43 = 1/v42 ; v44 = -v13*v34*v35*v19*v21/2+v33*v15*v18*v21-v12*v34*v35*v18*v21/2+v12*v15*v17*v21+v32*v9*v15*v21+v6*v27*v15*v21-v6*v9*v34*v35*v21/2-v13*v15*v19*v28*v29/2-v12*v15*v18*v28*v29/2-v6*v9*v15*v28*v29/2 ; v45 = 2*v40*v41+2*v44*v22 ; v46 = 1/pow(v42,2) ; v47 = pow(v28,2) ; v48 = 1/pow(v20,5) ; v49 = 2*pow(v27,2)+2*pow(v17,2) ; v50 = pow(v34,2) ; v51 = 1/pow(v14,5) ; v52 = 2*pow(v33,2)+2*pow(v32,2) ; v53 = pow(v1,3) ; v54 = 1/pow(v24,5) ; return 2*pow(v22*v40*v43-v44*v41*v43,2)*k+2*k*(-(-v52*v13*v35*v19*v21/2+3*v13*v50*v51*v19*v21/4-v33*v34*v35*v18*v21-v52*v12*v35*v18*v21/2+3*v12*v50*v51*v18*v21/4+2*v33*v15*v17*v21-v12*v34*v35*v17*v21+2*v32*v27*v15*v21-v32*v9*v34*v35*v21-v6*v27*v34*v35*v21-v6*v9*v52*v35*v21/2+3*v6*v9*v50*v51*v21/4-v13*v15*v19*v49*v29/2-v12*v15*v18*v49*v29/2-v6*v9*v15*v49*v29/2+v13*v34*v35*v19*v28*v29/2-v33*v15*v18*v28*v29+v12*v34*v35*v18*v28*v29/2-v12*v15*v17*v28*v29-v32*v9*v15*v28*v29-v6*v27*v15*v28*v29+v6*v9*v34*v35*v28*v29/2+3*v13*v15*v19*v47*v48/4+3*v12*v15*v18*v47*v48/4+3*v6*v9*v15*v47*v48/4)*v41*v43+v22*((-v11*v12*v36*v15+2*v1*v33*v11*v36*v15+v5*v6*v36*v15-2*v1*v32*v5*v36*v15+3*v23*v11*v12*v54*v15-3*v23*v5*v6*v54*v15-v33*v11*v34*v25*v35+v32*v5*v34*v25*v35-v52*v11*v12*v25*v35/2+v5*v6*v52*v25*v35/2-v1*v11*v12*v34*v36*v35+v1*v5*v6*v34*v36*v35+3*v11*v12*v50*v25*v51/4-3*v5*v6*v50*v25*v51/4)*v19*v21+(-2*v32*v25*v15+v11*v13*v36*v15-3*v1*v6*v36*v15+2*v23*v32*v36*v15-3*v23*v11*v13*v54*v15+3*v53*v6*v54*v15+v6*v34*v25*v35-v1*v32*v34*v25*v35+v52*v11*v13*v25*v35/2-v1*v6*v52*v25*v35/2+v1*v11*v13*v34*v36*v35-v23*v6*v34*v36*v35-3*v11*v13*v50*v25*v51/4+3*v1*v6*v50*v25*v51/4)*v18*v21+2*v38*v17*v21+2*v27*v37*v21+v9*(2*v33*v25*v15-v5*v13*v36*v15+3*v1*v12*v36*v15-2*v23*v33*v36*v15+3*v23*v5*v13*v54*v15-3*v53*v12*v54*v15-v12*v34*v25*v35+v1*v33*v34*v25*v35-v5*v52*v13*v25*v35/2+v1*v52*v12*v25*v35/2-v1*v5*v13*v34*v36*v35+v23*v12*v34*v36*v35+3*v5*v13*v50*v25*v51/4-3*v1*v12*v50*v25*v51/4)*v21-v31*v19*v49*v29/2-v30*v18*v49*v29/2-v9*v26*v49*v29/2-v39*v19*v28*v29-v38*v18*v28*v29-v30*v17*v28*v29-v27*v26*v28*v29-v9*v37*v28*v29+3*v31*v19*v47*v48/4+3*v30*v18*v47*v48/4+3*v9*v26*v47*v48/4)*v43+v44*v41*v45*v46-v22*v40*v45*v46)*rad_subtraction(atan2(v41,v22), eq) ; }

double HarmonicDihedralConstraintFunctions::hessianXbYb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62 ; v1 = xc-xb ; v2 = -ya ; v3 = yb+v2 ; v4 = xb-xa ; v5 = yc-yb ; v6 = v4*v5-v1*v3 ; v7 = -xc ; v8 = xd+v7 ; v9 = yd-yc ; v10 = v1*v9-v8*v5 ; v11 = -za ; v12 = zb+v11 ; v13 = zc-zb ; v14 = v1*v12-v4*v13 ; v15 = v3*v13-v5*v12 ; v16 = sqrt(pow(v6,2)+pow(v15,2)+pow(v14,2)) ; v17 = 1/v16 ; v18 = -zc ; v19 = zd+v18 ; v20 = v8*v13-v1*v19 ; v21 = v5*v19-v9*v13 ; v22 = sqrt(pow(v21,2)+pow(v20,2)+pow(v10,2)) ; v23 = 1/v22 ; v24 = v15*v17*v21*v23+v14*v17*v20*v23+v6*v10*v17*v23 ; v25 = pow(v1,2) ; v26 = pow(v5,2) ; v27 = sqrt(v26+v25+pow(v13,2)) ; v28 = 1/v27 ; v29 = v5*v15*v28*v17-v1*v14*v28*v17 ; v30 = yc-yd ; v31 = 2*v19*v20+2*v30*v10 ; v32 = 1/pow(v22,3) ; v33 = v1*v6*v28*v17-v13*v15*v28*v17 ; v34 = v13*v14*v28*v17-v5*v6*v28*v17 ; v35 = yc+v2 ; v36 = v18+za ; v37 = 2*v36*v14+2*v35*v6 ; v38 = 1/pow(v16,3) ; v39 = 1/pow(v27,3) ; v40 = v14*v28*v17-v1*v36*v28*v17+v1*v5*v15*v39*v17-v25*v14*v39*v17-v5*v15*v37*v28*v38/2+v1*v14*v37*v28*v38/2 ; v41 = -v6*v28*v17+v1*v35*v28*v17-v1*v13*v15*v39*v17+v25*v6*v39*v17+v13*v15*v37*v28*v38/2-v1*v6*v37*v28*v38/2 ; v42 = v36*v13*v28*v17-v35*v5*v28*v17+v1*v13*v14*v39*v17-v1*v5*v6*v39*v17-v13*v14*v37*v28*v38/2+v5*v6*v37*v28*v38/2 ; v43 = v42*v21*v23+v41*v20*v23+v33*v19*v23+v30*v29*v23+v10*v40*v23-v34*v21*v31*v32/2-v33*v20*v31*v32/2-v10*v29*v31*v32/2 ; v44 = v34*v21*v23+v33*v20*v23+v10*v29*v23 ; v45 = pow(v44,2)+pow(v24,2) ; v46 = 1/v45 ; v47 = -v15*v37*v38*v21*v23/2+v36*v17*v20*v23-v14*v37*v38*v20*v23/2+v14*v17*v19*v23+v35*v10*v17*v23+v6*v30*v17*v23-v6*v10*v37*v38*v23/2-v15*v17*v21*v31*v32/2-v14*v17*v20*v31*v32/2-v6*v10*v17*v31*v32/2 ; v48 = zc-zd ; v49 = 2*v48*v21+2*v8*v10 ; v50 = v7+xa ; v51 = zc+v11 ; v52 = 2*v51*v15+2*v50*v6 ; v53 = -v15*v28*v17+v5*v51*v28*v17+v26*v15*v39*v17-v1*v5*v14*v39*v17-v5*v15*v52*v28*v38/2+v1*v14*v52*v28*v38/2 ; v54 = -v51*v13*v28*v17+v50*v1*v28*v17-v5*v13*v15*v39*v17+v1*v5*v6*v39*v17+v13*v15*v52*v28*v38/2-v1*v6*v52*v28*v38/2 ; v55 = v6*v28*v17-v50*v5*v28*v17+v5*v13*v14*v39*v17-v26*v6*v39*v17-v13*v14*v52*v28*v38/2+v5*v6*v52*v28*v38/2 ; v56 = v55*v21*v23+v54*v20*v23+v34*v48*v23+v8*v29*v23+v10*v53*v23-v34*v21*v49*v32/2-v33*v20*v49*v32/2-v10*v29*v49*v32/2 ; v57 = v51*v17*v21*v23-v15*v52*v38*v21*v23/2-v14*v52*v38*v20*v23/2+v15*v17*v48*v23+v50*v10*v17*v23+v8*v6*v17*v23-v6*v10*v52*v38*v23/2-v15*v17*v21*v49*v32/2-v14*v17*v20*v49*v32/2-v6*v10*v17*v49*v32/2 ; v58 = 2*v56*v44+2*v57*v24 ; v59 = 1/pow(v45,2) ; v60 = 1/pow(v22,5) ; v61 = 1/pow(v16,5) ; v62 = 1/pow(v27,5) ; return 2*k*(-(-v51*v37*v38*v21*v23/2-v50*v35*v15*v38*v21*v23+3*v15*v37*v52*v61*v21*v23/4-v36*v52*v38*v20*v23/2-v50*v35*v14*v38*v20*v23+3*v14*v37*v52*v61*v20*v23/4-v14*v52*v38*v19*v23/2-v15*v37*v38*v48*v23/2+v50*v30*v17*v23+v8*v35*v17*v23-v35*v10*v52*v38*v23/2-v6*v30*v52*v38*v23/2-v50*v10*v37*v38*v23/2-v8*v6*v37*v38*v23/2-v50*v35*v6*v10*v38*v23+3*v6*v10*v37*v52*v61*v23/4+v15*v37*v38*v21*v49*v32/4-v36*v17*v20*v49*v32/2+v14*v37*v38*v20*v49*v32/4-v14*v17*v19*v49*v32/2-v35*v10*v17*v49*v32/2-v6*v30*v17*v49*v32/2+v6*v10*v37*v38*v49*v32/4-v51*v17*v21*v31*v32/2+v15*v52*v38*v21*v31*v32/4+v14*v52*v38*v20*v31*v32/4-v15*v17*v48*v31*v32/2-v50*v10*v17*v31*v32/2-v8*v6*v17*v31*v32/2+v6*v10*v52*v38*v31*v32/4-v8*v30*v15*v17*v21*v32-v8*v30*v14*v17*v20*v32-v8*v6*v30*v10*v17*v32+3*v15*v17*v21*v31*v49*v60/4+3*v14*v17*v20*v31*v49*v60/4+3*v6*v10*v17*v31*v49*v60/4)*v44*v46+v57*v43*v46-v47*v56*v46+v24*((v35*v28*v17+v5*v36*v13*v39*v17-v35*v26*v39*v17+v1*v6*v39*v17-v50*v1*v5*v39*v17+3*v1*v5*v13*v14*v62*v17-3*v1*v26*v6*v62*v17-v36*v13*v52*v28*v38/2+v35*v5*v52*v28*v38/2-v6*v37*v28*v38/2+v50*v5*v37*v28*v38/2-v50*v35*v13*v14*v28*v38+v50*v35*v5*v6*v28*v38-v1*v13*v14*v52*v39*v38/2+v1*v5*v6*v52*v39*v38/2-v5*v13*v14*v37*v39*v38/2+v26*v6*v37*v39*v38/2+3*v13*v14*v37*v52*v28*v61/4-3*v5*v6*v37*v52*v28*v61/4)*v21*v23+(-v50*v28*v17-v1*v51*v13*v39*v17-v5*v6*v39*v17+v1*v35*v5*v39*v17+v50*v25*v39*v17-3*v1*v5*v13*v15*v62*v17+3*v25*v5*v6*v62*v17+v6*v52*v28*v38/2-v1*v35*v52*v28*v38/2+v51*v13*v37*v28*v38/2-v50*v1*v37*v28*v38/2+v50*v35*v13*v15*v28*v38-v50*v1*v35*v6*v28*v38+v1*v13*v15*v52*v39*v38/2-v25*v6*v52*v39*v38/2+v5*v13*v15*v37*v39*v38/2-v1*v5*v6*v37*v39*v38/2-3*v13*v15*v37*v52*v28*v61/4+3*v1*v6*v37*v52*v28*v61/4)*v20*v23+v54*v19*v23+v42*v48*v23+v30*v53*v23+v8*v40*v23+v10*(-v1*v15*v39*v17+v5*v14*v39*v17+v1*v5*v51*v39*v17-v1*v5*v36*v39*v17+3*v1*v26*v15*v62*v17-3*v25*v5*v14*v62*v17-v14*v52*v28*v38/2+v1*v36*v52*v28*v38/2+v15*v37*v28*v38/2-v5*v51*v37*v28*v38/2-v50*v35*v5*v15*v28*v38+v50*v1*v35*v14*v28*v38-v1*v5*v15*v52*v39*v38/2+v25*v14*v52*v39*v38/2-v26*v15*v37*v39*v38/2+v1*v5*v14*v37*v39*v38/2+3*v5*v15*v37*v52*v28*v61/4-3*v1*v14*v37*v52*v28*v61/4)*v23-v42*v21*v49*v32/2-v41*v20*v49*v32/2-v33*v19*v49*v32/2-v30*v29*v49*v32/2-v10*v40*v49*v32/2-v55*v21*v31*v32/2-v54*v20*v31*v32/2-v34*v48*v31*v32/2-v8*v29*v31*v32/2-v10*v53*v31*v32/2-v8*v30*v34*v21*v32-v8*v30*v33*v20*v32-v8*v30*v10*v29*v32+3*v34*v21*v31*v49*v60/4+3*v33*v20*v31*v49*v60/4+3*v10*v29*v31*v49*v60/4)*v46+v47*v44*v58*v59-v24*v43*v58*v59)*rad_subtraction(atan2(v44,v24), eq)+2*k*(v24*v43*v46-v47*v44*v46)*(v24*v56*v46-v57*v44*v46) ; }

double HarmonicDihedralConstraintFunctions::hessianXbZb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62 ; v1 = xc-xb ; v2 = -ya ; v3 = yb+v2 ; v4 = -xa ; v5 = xb+v4 ; v6 = yc-yb ; v7 = v5*v6-v1*v3 ; v8 = xd-xc ; v9 = -yc ; v10 = yd+v9 ; v11 = v1*v10-v8*v6 ; v12 = zb-za ; v13 = zc-zb ; v14 = v1*v12-v5*v13 ; v15 = v3*v13-v6*v12 ; v16 = sqrt(pow(v7,2)+pow(v15,2)+pow(v14,2)) ; v17 = 1/v16 ; v18 = -zc ; v19 = zd+v18 ; v20 = v8*v13-v1*v19 ; v21 = v6*v19-v10*v13 ; v22 = sqrt(pow(v21,2)+pow(v20,2)+pow(v11,2)) ; v23 = 1/v22 ; v24 = v15*v17*v21*v23+v14*v17*v20*v23+v7*v11*v17*v23 ; v25 = pow(v1,2) ; v26 = pow(v13,2) ; v27 = sqrt(pow(v6,2)+v26+v25) ; v28 = 1/v27 ; v29 = v6*v15*v28*v17-v1*v14*v28*v17 ; v30 = yc-yd ; v31 = 2*v19*v20+2*v30*v11 ; v32 = 1/pow(v22,3) ; v33 = v1*v7*v28*v17-v13*v15*v28*v17 ; v34 = v13*v14*v28*v17-v6*v7*v28*v17 ; v35 = yc+v2 ; v36 = v18+za ; v37 = 2*v36*v14+2*v35*v7 ; v38 = 1/pow(v16,3) ; v39 = 1/pow(v27,3) ; v40 = v14*v28*v17-v1*v36*v28*v17+v1*v6*v15*v39*v17-v25*v14*v39*v17-v6*v15*v37*v28*v38/2+v1*v14*v37*v28*v38/2 ; v41 = -v7*v28*v17+v1*v35*v28*v17-v1*v13*v15*v39*v17+v25*v7*v39*v17+v13*v15*v37*v28*v38/2-v1*v7*v37*v28*v38/2 ; v42 = v36*v13*v28*v17-v35*v6*v28*v17+v1*v13*v14*v39*v17-v1*v6*v7*v39*v17-v13*v14*v37*v28*v38/2+v6*v7*v37*v28*v38/2 ; v43 = v42*v21*v23+v41*v20*v23+v33*v19*v23+v30*v29*v23+v11*v40*v23-v34*v21*v31*v32/2-v33*v20*v31*v32/2-v11*v29*v31*v32/2 ; v44 = v34*v21*v23+v33*v20*v23+v11*v29*v23 ; v45 = pow(v44,2)+pow(v24,2) ; v46 = 1/v45 ; v47 = -v15*v37*v38*v21*v23/2+v36*v17*v20*v23-v14*v37*v38*v20*v23/2+v14*v17*v19*v23+v35*v11*v17*v23+v7*v30*v17*v23-v7*v11*v37*v38*v23/2-v15*v17*v21*v31*v32/2-v14*v17*v20*v31*v32/2-v7*v11*v17*v31*v32/2 ; v48 = xc-xd ; v49 = 2*v10*v21+2*v48*v20 ; v50 = xc+v4 ; v51 = v9+ya ; v52 = 2*v51*v15+2*v50*v14 ; v53 = v51*v6*v28*v17-v50*v1*v28*v17+v6*v13*v15*v39*v17-v1*v13*v14*v39*v17-v6*v15*v52*v28*v38/2+v1*v14*v52*v28*v38/2 ; v54 = v15*v28*v17-v51*v13*v28*v17-v26*v15*v39*v17+v1*v7*v13*v39*v17+v13*v15*v52*v28*v38/2-v1*v7*v52*v28*v38/2 ; v55 = -v14*v28*v17+v50*v13*v28*v17+v26*v14*v39*v17-v6*v7*v13*v39*v17-v13*v14*v52*v28*v38/2+v6*v7*v52*v28*v38/2 ; v56 = v55*v21*v23+v54*v20*v23+v48*v33*v23+v10*v34*v23+v11*v53*v23-v34*v21*v49*v32/2-v33*v20*v49*v32/2-v11*v29*v49*v32/2 ; v57 = v51*v17*v21*v23-v15*v52*v38*v21*v23/2+v50*v17*v20*v23-v14*v52*v38*v20*v23/2+v10*v15*v17*v23+v48*v14*v17*v23-v7*v11*v52*v38*v23/2-v15*v17*v21*v49*v32/2-v14*v17*v20*v49*v32/2-v7*v11*v17*v49*v32/2 ; v58 = 2*v56*v44+2*v57*v24 ; v59 = 1/pow(v45,2) ; v60 = 1/pow(v22,5) ; v61 = 1/pow(v16,5) ; v62 = 1/pow(v27,5) ; return 2*k*(-(-v51*v37*v38*v21*v23/2-v50*v36*v15*v38*v21*v23+3*v15*v37*v52*v61*v21*v23/4-v36*v52*v38*v20*v23/2-v50*v37*v38*v20*v23/2-v50*v36*v14*v38*v20*v23+3*v14*v37*v52*v61*v20*v23/4+v50*v17*v19*v23-v14*v52*v38*v19*v23/2+v48*v36*v17*v23-v35*v11*v52*v38*v23/2-v7*v30*v52*v38*v23/2-v10*v15*v37*v38*v23/2-v48*v14*v37*v38*v23/2-v50*v7*v11*v36*v38*v23+3*v7*v11*v37*v52*v61*v23/4+v15*v37*v38*v21*v49*v32/4-v36*v17*v20*v49*v32/2+v14*v37*v38*v20*v49*v32/4-v14*v17*v19*v49*v32/2-v35*v11*v17*v49*v32/2-v7*v30*v17*v49*v32/2+v7*v11*v37*v38*v49*v32/4-v51*v17*v21*v31*v32/2+v15*v52*v38*v21*v31*v32/4-v50*v17*v20*v31*v32/2+v14*v52*v38*v20*v31*v32/4-v10*v15*v17*v31*v32/2-v48*v14*v17*v31*v32/2+v7*v11*v52*v38*v31*v32/4-v48*v15*v17*v19*v21*v32-v48*v14*v17*v19*v20*v32-v48*v7*v11*v17*v19*v32+3*v15*v17*v21*v31*v49*v60/4+3*v14*v17*v20*v31*v49*v60/4+3*v7*v11*v17*v31*v49*v60/4)*v44*v46-v47*v56*v46+v57*v43*v46+v24*((-v36*v28*v17+v36*v26*v39*v17-v1*v14*v39*v17-v35*v6*v13*v39*v17+v50*v1*v13*v39*v17+3*v1*v26*v14*v62*v17-3*v1*v6*v7*v13*v62*v17-v36*v13*v52*v28*v38/2+v35*v6*v52*v28*v38/2+v14*v37*v28*v38/2-v50*v13*v37*v28*v38/2-v50*v36*v13*v14*v28*v38+v50*v6*v7*v36*v28*v38-v1*v13*v14*v52*v39*v38/2+v1*v6*v7*v52*v39*v38/2-v26*v14*v37*v39*v38/2+v6*v7*v13*v37*v39*v38/2+3*v13*v14*v37*v52*v28*v61/4-3*v6*v7*v37*v52*v28*v61/4)*v21*v23+(v1*v15*v39*v17-v7*v13*v39*v17+v1*v35*v13*v39*v17-v1*v51*v13*v39*v17-3*v1*v26*v15*v62*v17+3*v25*v7*v13*v62*v17+v7*v52*v28*v38/2-v1*v35*v52*v28*v38/2-v15*v37*v28*v38/2+v51*v13*v37*v28*v38/2+v50*v36*v13*v15*v28*v38-v50*v1*v7*v36*v28*v38+v1*v13*v15*v52*v39*v38/2-v25*v7*v52*v39*v38/2+v26*v15*v37*v39*v38/2-v1*v7*v13*v37*v39*v38/2-3*v13*v15*v37*v52*v28*v61/4+3*v1*v7*v37*v52*v28*v61/4)*v20*v23+v54*v19*v23+v10*v42*v23+v48*v41*v23+v30*v53*v23+v11*(v50*v28*v17+v13*v14*v39*v17-v1*v36*v13*v39*v17+v1*v51*v6*v39*v17-v50*v25*v39*v17+3*v1*v6*v13*v15*v62*v17-3*v25*v13*v14*v62*v17-v14*v52*v28*v38/2+v1*v36*v52*v28*v38/2-v51*v6*v37*v28*v38/2+v50*v1*v37*v28*v38/2-v50*v6*v36*v15*v28*v38+v50*v1*v36*v14*v28*v38-v1*v6*v15*v52*v39*v38/2+v25*v14*v52*v39*v38/2-v6*v13*v15*v37*v39*v38/2+v1*v13*v14*v37*v39*v38/2+3*v6*v15*v37*v52*v28*v61/4-3*v1*v14*v37*v52*v28*v61/4)*v23-v42*v21*v49*v32/2-v41*v20*v49*v32/2-v33*v19*v49*v32/2-v30*v29*v49*v32/2-v11*v40*v49*v32/2-v55*v21*v31*v32/2-v54*v20*v31*v32/2-v48*v33*v31*v32/2-v10*v34*v31*v32/2-v11*v53*v31*v32/2-v48*v34*v19*v21*v32-v48*v33*v19*v20*v32-v48*v11*v29*v19*v32+3*v34*v21*v31*v49*v60/4+3*v33*v20*v31*v49*v60/4+3*v11*v29*v31*v49*v60/4)*v46+v47*v44*v58*v59-v24*v43*v58*v59)*rad_subtraction(atan2(v44,v24), eq)+2*k*(v24*v43*v46-v47*v44*v46)*(v24*v56*v46-v57*v44*v46) ; }

double HarmonicDihedralConstraintFunctions::hessianXbXc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63 ; v1 = xc-xb ; v2 = -ya ; v3 = yb+v2 ; v4 = xb-xa ; v5 = -yb ; v6 = yc+v5 ; v7 = v4*v6-v1*v3 ; v8 = xd-xc ; v9 = yd-yc ; v10 = v1*v9-v8*v6 ; v11 = zb-za ; v12 = zc-zb ; v13 = v1*v11-v4*v12 ; v14 = v3*v12-v6*v11 ; v15 = sqrt(pow(v7,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = -zc ; v18 = zd+v17 ; v19 = v8*v12-v1*v18 ; v20 = v6*v18-v9*v12 ; v21 = sqrt(pow(v20,2)+pow(v19,2)+pow(v10,2)) ; v22 = 1/v21 ; v23 = v14*v16*v20*v22+v13*v16*v19*v22+v7*v10*v16*v22 ; v24 = pow(v1,2) ; v25 = sqrt(pow(v6,2)+v24+pow(v12,2)) ; v26 = 1/v25 ; v27 = v6*v14*v26*v16-v1*v13*v26*v16 ; v28 = yd+v5 ; v29 = zb-zd ; v30 = 2*v29*v19+2*v28*v10 ; v31 = 1/pow(v21,3) ; v32 = v1*v7*v26*v16-v12*v14*v26*v16 ; v33 = v12*v13*v26*v16-v6*v7*v26*v16 ; v34 = v5+ya ; v35 = 2*v11*v13+2*v34*v7 ; v36 = 1/pow(v15,3) ; v37 = 1/pow(v25,3) ; v38 = -v13*v26*v16-v1*v11*v26*v16-v1*v6*v14*v37*v16+v24*v13*v37*v16-v6*v14*v35*v26*v36/2+v1*v13*v35*v26*v36/2 ; v39 = v7*v26*v16+v1*v34*v26*v16+v1*v12*v14*v37*v16-v24*v7*v37*v16+v12*v14*v35*v26*v36/2-v1*v7*v35*v26*v36/2 ; v40 = v11*v12*v26*v16-v34*v6*v26*v16-v1*v12*v13*v37*v16+v1*v6*v7*v37*v16-v12*v13*v35*v26*v36/2+v6*v7*v35*v26*v36/2 ; v41 = v40*v20*v22+v39*v19*v22+v32*v29*v22+v28*v27*v22+v10*v38*v22-v33*v20*v30*v31/2-v32*v19*v30*v31/2-v10*v27*v30*v31/2 ; v42 = v33*v20*v22+v32*v19*v22+v10*v27*v22 ; v43 = pow(v42,2)+pow(v23,2) ; v44 = 1/v43 ; v45 = -v14*v35*v36*v20*v22/2+v11*v16*v19*v22-v13*v35*v36*v19*v22/2+v13*v16*v29*v22+v34*v10*v16*v22+v7*v28*v16*v22-v7*v10*v35*v36*v22/2-v14*v16*v20*v30*v31/2-v13*v16*v19*v30*v31/2-v7*v10*v16*v30*v31/2 ; v46 = yc-yd ; v47 = 2*v18*v19+2*v46*v10 ; v48 = yc+v2 ; v49 = v17+za ; v50 = 2*v49*v13+2*v48*v7 ; v51 = v13*v26*v16-v1*v49*v26*v16+v1*v6*v14*v37*v16-v24*v13*v37*v16-v6*v14*v50*v26*v36/2+v1*v13*v50*v26*v36/2 ; v52 = -v7*v26*v16+v1*v48*v26*v16-v1*v12*v14*v37*v16+v24*v7*v37*v16+v12*v14*v50*v26*v36/2-v1*v7*v50*v26*v36/2 ; v53 = v49*v12*v26*v16-v48*v6*v26*v16+v1*v12*v13*v37*v16-v1*v6*v7*v37*v16-v12*v13*v50*v26*v36/2+v6*v7*v50*v26*v36/2 ; v54 = v53*v20*v22+v52*v19*v22+v32*v18*v22+v46*v27*v22+v10*v51*v22-v33*v20*v47*v31/2-v32*v19*v47*v31/2-v10*v27*v47*v31/2 ; v55 = -v14*v50*v36*v20*v22/2+v49*v16*v19*v22-v13*v50*v36*v19*v22/2+v13*v16*v18*v22+v48*v10*v16*v22+v7*v46*v16*v22-v7*v10*v50*v36*v22/2-v14*v16*v20*v47*v31/2-v13*v16*v19*v47*v31/2-v7*v10*v16*v47*v31/2 ; v56 = 2*v41*v42+2*v45*v23 ; v57 = 1/pow(v43,2) ; v58 = 1/pow(v21,5) ; v59 = 2*v29*v18+2*v46*v28 ; v60 = 1/pow(v15,5) ; v61 = 2*v11*v49+2*v34*v48 ; v62 = pow(v1,3) ; v63 = 1/pow(v25,5) ; return 2*k*(-(-v61*v14*v36*v20*v22/2+3*v14*v35*v50*v60*v20*v22/4-v11*v50*v36*v19*v22/2-v49*v35*v36*v19*v22/2-v61*v13*v36*v19*v22/2+3*v13*v35*v50*v60*v19*v22/4+v11*v16*v18*v22-v13*v35*v36*v18*v22/2+v49*v16*v29*v22-v13*v50*v36*v29*v22/2+v48*v28*v16*v22+v34*v46*v16*v22-v34*v10*v50*v36*v22/2-v7*v28*v50*v36*v22/2-v48*v10*v35*v36*v22/2-v7*v46*v35*v36*v22/2-v7*v10*v61*v36*v22/2+3*v7*v10*v35*v50*v60*v22/4+v14*v35*v36*v20*v47*v31/4-v11*v16*v19*v47*v31/2+v13*v35*v36*v19*v47*v31/4-v13*v16*v29*v47*v31/2-v34*v10*v16*v47*v31/2-v7*v28*v16*v47*v31/2+v7*v10*v35*v36*v47*v31/4+v14*v50*v36*v20*v30*v31/4-v49*v16*v19*v30*v31/2+v13*v50*v36*v19*v30*v31/4-v13*v16*v18*v30*v31/2-v48*v10*v16*v30*v31/2-v7*v46*v16*v30*v31/2+v7*v10*v50*v36*v30*v31/4-v14*v16*v20*v59*v31/2-v13*v16*v19*v59*v31/2-v7*v10*v16*v59*v31/2+3*v14*v16*v20*v30*v47*v58/4+3*v13*v16*v19*v30*v47*v58/4+3*v7*v10*v16*v30*v47*v58/4)*v42*v44+v45*v54*v44-v55*v41*v44+v23*((v12*v13*v37*v16-v1*v49*v12*v37*v16+v1*v11*v12*v37*v16-v6*v7*v37*v16+v1*v48*v6*v37*v16-v1*v34*v6*v37*v16-3*v24*v12*v13*v63*v16+3*v24*v6*v7*v63*v16-v11*v12*v50*v26*v36/2+v34*v6*v50*v26*v36/2-v49*v12*v35*v26*v36/2+v48*v6*v35*v26*v36/2-v61*v12*v13*v26*v36/2+v6*v7*v61*v26*v36/2+v1*v12*v13*v50*v37*v36/2-v1*v6*v7*v50*v37*v36/2-v1*v12*v13*v35*v37*v36/2+v1*v6*v7*v35*v37*v36/2+3*v12*v13*v35*v50*v26*v60/4-3*v6*v7*v35*v50*v26*v60/4)*v20*v22+(v48*v26*v16-v34*v26*v16-v12*v14*v37*v16+3*v1*v7*v37*v16-v24*v48*v37*v16+v24*v34*v37*v16+3*v24*v12*v14*v63*v16-3*v62*v7*v63*v16-v7*v50*v26*v36/2-v1*v34*v50*v26*v36/2+v7*v35*v26*v36/2-v1*v48*v35*v26*v36/2+v61*v12*v14*v26*v36/2-v1*v7*v61*v26*v36/2-v1*v12*v14*v50*v37*v36/2+v24*v7*v50*v37*v36/2+v1*v12*v14*v35*v37*v36/2-v24*v7*v35*v37*v36/2-3*v12*v14*v35*v50*v26*v60/4+3*v1*v7*v35*v50*v26*v60/4)*v19*v22+v39*v18*v22+v52*v29*v22+v28*v51*v22+v46*v38*v22+v10*(-v49*v26*v16+v11*v26*v16+v6*v14*v37*v16-3*v1*v13*v37*v16+v24*v49*v37*v16-v24*v11*v37*v16-3*v24*v6*v14*v63*v16+3*v62*v13*v63*v16+v13*v50*v26*v36/2+v1*v11*v50*v26*v36/2-v13*v35*v26*v36/2+v1*v49*v35*v26*v36/2-v6*v61*v14*v26*v36/2+v1*v61*v13*v26*v36/2+v1*v6*v14*v50*v37*v36/2-v24*v13*v50*v37*v36/2-v1*v6*v14*v35*v37*v36/2+v24*v13*v35*v37*v36/2+3*v6*v14*v35*v50*v26*v60/4-3*v1*v13*v35*v50*v26*v60/4)*v22-v40*v20*v47*v31/2-v39*v19*v47*v31/2-v32*v29*v47*v31/2-v28*v27*v47*v31/2-v10*v38*v47*v31/2-v53*v20*v30*v31/2-v52*v19*v30*v31/2-v32*v18*v30*v31/2-v46*v27*v30*v31/2-v10*v51*v30*v31/2-v33*v20*v59*v31/2-v32*v19*v59*v31/2-v10*v27*v59*v31/2+3*v33*v20*v30*v47*v58/4+3*v32*v19*v30*v47*v58/4+3*v10*v27*v30*v47*v58/4)*v44+v55*v42*v56*v57-v23*v54*v56*v57)*rad_subtraction(atan2(v42,v23), eq)+2*k*(v23*v41*v44-v45*v42*v44)*(v23*v54*v44-v55*v42*v44) ; }

double HarmonicDihedralConstraintFunctions::hessianXbYc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65 ; v1 = xc-xb ; v2 = -ya ; v3 = yb+v2 ; v4 = xb-xa ; v5 = yc-yb ; v6 = v4*v5-v1*v3 ; v7 = xd-xc ; v8 = yd-yc ; v9 = v1*v8-v7*v5 ; v10 = zb-za ; v11 = -zb ; v12 = zc+v11 ; v13 = v1*v10-v4*v12 ; v14 = v3*v12-v5*v10 ; v15 = sqrt(pow(v6,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = -zc ; v18 = zd+v17 ; v19 = v7*v12-v1*v18 ; v20 = v5*v18-v8*v12 ; v21 = sqrt(pow(v9,2)+pow(v20,2)+pow(v19,2)) ; v22 = 1/v21 ; v23 = v14*v16*v20*v22+v13*v16*v19*v22+v6*v9*v16*v22 ; v24 = pow(v1,2) ; v25 = pow(v5,2) ; v26 = sqrt(v25+v24+pow(v12,2)) ; v27 = 1/v26 ; v28 = v5*v14*v27*v16-v1*v13*v27*v16 ; v29 = yc-yd ; v30 = 2*v18*v19+2*v29*v9 ; v31 = 1/pow(v21,3) ; v32 = v1*v6*v27*v16-v12*v14*v27*v16 ; v33 = v12*v13*v27*v16-v5*v6*v27*v16 ; v34 = yc+v2 ; v35 = v17+za ; v36 = 2*v35*v13+2*v34*v6 ; v37 = 1/pow(v15,3) ; v38 = 1/pow(v26,3) ; v39 = v13*v27*v16-v1*v35*v27*v16+v1*v5*v14*v38*v16-v24*v13*v38*v16-v5*v14*v36*v27*v37/2+v1*v13*v36*v27*v37/2 ; v40 = -v6*v27*v16 ; v41 = v40+v1*v34*v27*v16-v1*v12*v14*v38*v16+v24*v6*v38*v16+v12*v14*v36*v27*v37/2-v1*v6*v36*v27*v37/2 ; v42 = -v1*v5*v6*v38*v16 ; v43 = v35*v12*v27*v16-v34*v5*v27*v16+v1*v12*v13*v38*v16+v42-v12*v13*v36*v27*v37/2+v5*v6*v36*v27*v37/2 ; v44 = v43*v20*v22+v41*v19*v22+v32*v18*v22+v29*v28*v22+v9*v39*v22-v33*v20*v30*v31/2-v32*v19*v30*v31/2-v9*v28*v30*v31/2 ; v45 = v33*v20*v22+v32*v19*v22+v9*v28*v22 ; v46 = pow(v45,2)+pow(v23,2) ; v47 = 1/v46 ; v48 = -v14*v36*v37*v20*v22/2+v35*v16*v19*v22-v13*v36*v37*v19*v22/2+v13*v16*v18*v22+v34*v9*v16*v22+v6*v29*v16*v22-v6*v9*v36*v37*v22/2-v14*v16*v20*v30*v31/2-v13*v16*v19*v30*v31/2-v6*v9*v16*v30*v31/2 ; v49 = xb-xd ; v50 = zd+v11 ; v51 = 2*v50*v20+2*v49*v9 ; v52 = v11+za ; v53 = 2*v52*v14+2*v4*v6 ; v54 = v14*v27*v16+v5*v52*v27*v16-v25*v14*v38*v16+v1*v5*v13*v38*v16-v5*v14*v53*v27*v37/2+v1*v13*v53*v27*v37/2 ; v55 = -v52*v12*v27*v16+v4*v1*v27*v16+v5*v12*v14*v38*v16+v42+v12*v14*v53*v27*v37/2-v1*v6*v53*v27*v37/2 ; v56 = v40-v4*v5*v27*v16-v5*v12*v13*v38*v16+v25*v6*v38*v16-v12*v13*v53*v27*v37/2+v5*v6*v53*v27*v37/2 ; v57 = v56*v20*v22+v55*v19*v22+v33*v50*v22+v49*v28*v22+v9*v54*v22-v33*v20*v51*v31/2-v32*v19*v51*v31/2-v9*v28*v51*v31/2 ; v58 = v52*v16*v20*v22-v14*v53*v37*v20*v22/2-v13*v53*v37*v19*v22/2+v14*v16*v50*v22+v4*v9*v16*v22+v49*v6*v16*v22-v6*v9*v53*v37*v22/2-v14*v16*v20*v51*v31/2-v13*v16*v19*v51*v31/2-v6*v9*v16*v51*v31/2 ; v59 = 2*v57*v45+2*v58*v23 ; v60 = 1/pow(v46,2) ; v61 = 1/pow(v21,5) ; v62 = 2*v9+2*v49*v29 ; v63 = 1/pow(v15,5) ; v64 = 2*v6+2*v4*v34 ; v65 = 1/pow(v26,5) ; return 2*k*(-(-v52*v36*v37*v20*v22/2-v64*v14*v37*v20*v22/2+3*v14*v36*v53*v63*v20*v22/4-v35*v53*v37*v19*v22/2-v64*v13*v37*v19*v22/2+3*v13*v36*v53*v63*v19*v22/4-v13*v53*v37*v18*v22/2-v14*v36*v37*v50*v22/2+v9*v16*v22+v4*v29*v16*v22+v6*v16*v22+v49*v34*v16*v22-v34*v9*v53*v37*v22/2-v6*v29*v53*v37*v22/2-v4*v9*v36*v37*v22/2-v49*v6*v36*v37*v22/2-v6*v64*v9*v37*v22/2+3*v6*v9*v36*v53*v63*v22/4+v14*v36*v37*v20*v51*v31/4-v35*v16*v19*v51*v31/2+v13*v36*v37*v19*v51*v31/4-v13*v16*v18*v51*v31/2-v34*v9*v16*v51*v31/2-v6*v29*v16*v51*v31/2+v6*v9*v36*v37*v51*v31/4-v52*v16*v20*v30*v31/2+v14*v53*v37*v20*v30*v31/4+v13*v53*v37*v19*v30*v31/4-v14*v16*v50*v30*v31/2-v4*v9*v16*v30*v31/2-v49*v6*v16*v30*v31/2+v6*v9*v53*v37*v30*v31/4-v62*v14*v16*v20*v31/2-v62*v13*v16*v19*v31/2-v6*v9*v62*v16*v31/2+3*v14*v16*v20*v30*v51*v61/4+3*v13*v16*v19*v30*v51*v61/4+3*v6*v9*v16*v30*v51*v61/4)*v45*v47+v58*v44*v47-v48*v57*v47+v23*((-v5*v27*v16-v34*v27*v16-v5*v35*v12*v38*v16+v34*v25*v38*v16-v1*v6*v38*v16-v4*v1*v5*v38*v16-3*v1*v5*v12*v13*v65*v16+3*v1*v25*v6*v65*v16-v35*v12*v53*v27*v37/2+v34*v5*v53*v27*v37/2+v6*v36*v27*v37/2+v4*v5*v36*v27*v37/2-v64*v12*v13*v27*v37/2+v5*v6*v64*v27*v37/2-v1*v12*v13*v53*v38*v37/2+v1*v5*v6*v53*v38*v37/2+v5*v12*v13*v36*v38*v37/2-v25*v6*v36*v38*v37/2+3*v12*v13*v36*v53*v27*v63/4-3*v5*v6*v36*v53*v27*v63/4)*v20*v22+(v1*v27*v16-v4*v27*v16-v1*v52*v12*v38*v16+v5*v6*v38*v16-v1*v34*v5*v38*v16+v4*v24*v38*v16+3*v1*v5*v12*v14*v65*v16-3*v24*v5*v6*v65*v16+v6*v53*v27*v37/2-v1*v34*v53*v27*v37/2+v52*v12*v36*v27*v37/2-v4*v1*v36*v27*v37/2+v64*v12*v14*v27*v37/2-v1*v6*v64*v27*v37/2+v1*v12*v14*v53*v38*v37/2-v24*v6*v53*v38*v37/2-v5*v12*v14*v36*v38*v37/2+v1*v5*v6*v36*v38*v37/2-3*v12*v14*v36*v53*v27*v63/4+3*v1*v6*v36*v53*v27*v63/4)*v19*v22+v55*v18*v22+v43*v50*v22+v28*v22+v29*v54*v22+v49*v39*v22+v9*(v1*v14*v38*v16-v5*v13*v38*v16+v1*v5*v35*v38*v16+v1*v5*v52*v38*v16-3*v1*v25*v14*v65*v16+3*v24*v5*v13*v65*v16-v13*v53*v27*v37/2+v1*v35*v53*v27*v37/2-v14*v36*v27*v37/2-v5*v52*v36*v27*v37/2-v5*v64*v14*v27*v37/2+v1*v64*v13*v27*v37/2-v1*v5*v14*v53*v38*v37/2+v24*v13*v53*v38*v37/2+v25*v14*v36*v38*v37/2-v1*v5*v13*v36*v38*v37/2+3*v5*v14*v36*v53*v27*v63/4-3*v1*v13*v36*v53*v27*v63/4)*v22-v43*v20*v51*v31/2-v41*v19*v51*v31/2-v32*v18*v51*v31/2-v29*v28*v51*v31/2-v9*v39*v51*v31/2-v56*v20*v30*v31/2-v55*v19*v30*v31/2-v33*v50*v30*v31/2-v49*v28*v30*v31/2-v9*v54*v30*v31/2-v62*v33*v20*v31/2-v62*v32*v19*v31/2-v9*v62*v28*v31/2+3*v33*v20*v30*v51*v61/4+3*v32*v19*v30*v51*v61/4+3*v9*v28*v30*v51*v61/4)*v47+v48*v45*v59*v60-v23*v44*v59*v60)*rad_subtraction(atan2(v45,v23), eq)+2*k*(v23*v44*v47-v48*v45*v47)*(v23*v57*v47-v58*v45*v47) ; }

double HarmonicDihedralConstraintFunctions::hessianXbZc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66 ; v1 = -xb ; v2 = xc+v1 ; v3 = -ya ; v4 = yb+v3 ; v5 = xb-xa ; v6 = yc-yb ; v7 = v5*v6-v2*v4 ; v8 = xd-xc ; v9 = yd-yc ; v10 = v2*v9-v8*v6 ; v11 = zb-za ; v12 = zc-zb ; v13 = v2*v11-v5*v12 ; v14 = v4*v12-v6*v11 ; v15 = sqrt(pow(v7,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = -zc ; v18 = zd+v17 ; v19 = v8*v12-v2*v18 ; v20 = v6*v18-v9*v12 ; v21 = sqrt(pow(v20,2)+pow(v19,2)+pow(v10,2)) ; v22 = 1/v21 ; v23 = v14*v16*v20*v22+v13*v16*v19*v22+v7*v10*v16*v22 ; v24 = pow(v2,2) ; v25 = pow(v12,2) ; v26 = sqrt(pow(v6,2)+v25+v24) ; v27 = 1/v26 ; v28 = v6*v14*v27*v16-v2*v13*v27*v16 ; v29 = -yd ; v30 = v29+yc ; v31 = 2*v18*v19+2*v30*v10 ; v32 = 1/pow(v21,3) ; v33 = v2*v7*v27*v16-v12*v14*v27*v16 ; v34 = v12*v13*v27*v16-v6*v7*v27*v16 ; v35 = yc+v3 ; v36 = v17+za ; v37 = 2*v36*v13+2*v35*v7 ; v38 = 1/pow(v15,3) ; v39 = 1/pow(v26,3) ; v40 = v13*v27*v16 ; v41 = v40-v2*v36*v27*v16+v2*v6*v14*v39*v16-v24*v13*v39*v16-v6*v14*v37*v27*v38/2+v2*v13*v37*v27*v38/2 ; v42 = -v7*v27*v16+v2*v35*v27*v16-v2*v12*v14*v39*v16+v24*v7*v39*v16+v12*v14*v37*v27*v38/2-v2*v7*v37*v27*v38/2 ; v43 = v2*v12*v13*v39*v16 ; v44 = v36*v12*v27*v16-v35*v6*v27*v16+v43-v2*v6*v7*v39*v16-v12*v13*v37*v27*v38/2+v6*v7*v37*v27*v38/2 ; v45 = v44*v20*v22+v42*v19*v22+v33*v18*v22+v30*v28*v22+v10*v41*v22-v34*v20*v31*v32/2-v33*v19*v31*v32/2-v10*v28*v31*v32/2 ; v46 = v34*v20*v22+v33*v19*v22+v10*v28*v22 ; v47 = pow(v46,2)+pow(v23,2) ; v48 = 1/v47 ; v49 = -v14*v37*v38*v20*v22/2+v36*v16*v19*v22-v13*v37*v38*v19*v22/2+v13*v16*v18*v22+v35*v10*v16*v22+v7*v30*v16*v22-v7*v10*v37*v38*v22/2-v14*v16*v20*v31*v32/2-v13*v16*v19*v31*v32/2-v7*v10*v16*v31*v32/2 ; v50 = xd+v1 ; v51 = v29+yb ; v52 = 2*v51*v20+2*v50*v19 ; v53 = v1+xa ; v54 = 2*v4*v14+2*v53*v13 ; v55 = v4*v6*v27*v16-v53*v2*v27*v16-v6*v12*v14*v39*v16+v43-v6*v14*v54*v27*v38/2+v2*v13*v54*v27*v38/2 ; v56 = -v14*v27*v16-v4*v12*v27*v16+v25*v14*v39*v16-v2*v7*v12*v39*v16+v12*v14*v54*v27*v38/2-v2*v7*v54*v27*v38/2 ; v57 = v40+v53*v12*v27*v16-v25*v13*v39*v16+v6*v7*v12*v39*v16-v12*v13*v54*v27*v38/2+v6*v7*v54*v27*v38/2 ; v58 = v57*v20*v22+v56*v19*v22+v50*v33*v22+v51*v34*v22+v10*v55*v22-v34*v20*v52*v32/2-v33*v19*v52*v32/2-v10*v28*v52*v32/2 ; v59 = v4*v16*v20*v22-v14*v54*v38*v20*v22/2+v53*v16*v19*v22-v13*v54*v38*v19*v22/2+v51*v14*v16*v22+v50*v13*v16*v22-v7*v10*v54*v38*v22/2-v14*v16*v20*v52*v32/2-v13*v16*v19*v52*v32/2-v7*v10*v16*v52*v32/2 ; v60 = 2*v58*v46+2*v59*v23 ; v61 = 1/pow(v47,2) ; v62 = 1/pow(v21,5) ; v63 = 2*v50*v18-2*v19 ; v64 = 1/pow(v15,5) ; v65 = 2*v53*v36-2*v13 ; v66 = 1/pow(v26,5) ; return 2*k*(-(-v4*v37*v38*v20*v22/2-v14*v65*v38*v20*v22/2+3*v14*v37*v54*v64*v20*v22/4-v16*v19*v22-v36*v54*v38*v19*v22/2-v53*v37*v38*v19*v22/2-v13*v65*v38*v19*v22/2+3*v13*v37*v54*v64*v19*v22/4+v53*v16*v18*v22-v13*v54*v38*v18*v22/2-v13*v16*v22+v50*v36*v16*v22-v35*v10*v54*v38*v22/2-v7*v30*v54*v38*v22/2-v51*v14*v37*v38*v22/2-v50*v13*v37*v38*v22/2-v7*v10*v65*v38*v22/2+3*v7*v10*v37*v54*v64*v22/4+v14*v37*v38*v20*v52*v32/4-v36*v16*v19*v52*v32/2+v13*v37*v38*v19*v52*v32/4-v13*v16*v18*v52*v32/2-v35*v10*v16*v52*v32/2-v7*v30*v16*v52*v32/2+v7*v10*v37*v38*v52*v32/4-v4*v16*v20*v31*v32/2+v14*v54*v38*v20*v31*v32/4-v53*v16*v19*v31*v32/2+v13*v54*v38*v19*v31*v32/4-v51*v14*v16*v31*v32/2-v50*v13*v16*v31*v32/2+v7*v10*v54*v38*v31*v32/4-v14*v16*v20*v63*v32/2-v13*v16*v19*v63*v32/2-v7*v10*v16*v63*v32/2+3*v14*v16*v20*v31*v52*v62/4+3*v13*v16*v19*v31*v52*v62/4+3*v7*v10*v16*v31*v52*v62/4)*v46*v48-v49*v58*v48+v59*v45*v48+v23*((-v12*v27*v16+v36*v27*v16-v36*v25*v39*v16+v2*v13*v39*v16+v35*v6*v12*v39*v16+v53*v2*v12*v39*v16-3*v2*v25*v13*v66*v16+3*v2*v6*v7*v12*v66*v16-v36*v12*v54*v27*v38/2+v35*v6*v54*v27*v38/2-v13*v37*v27*v38/2-v53*v12*v37*v27*v38/2-v12*v13*v65*v27*v38/2+v6*v7*v65*v27*v38/2-v2*v12*v13*v54*v39*v38/2+v2*v6*v7*v54*v39*v38/2+v25*v13*v37*v39*v38/2-v6*v7*v12*v37*v39*v38/2+3*v12*v13*v37*v54*v27*v64/4-3*v6*v7*v37*v54*v27*v64/4)*v20*v22+(-v2*v14*v39*v16+v7*v12*v39*v16-v2*v35*v12*v39*v16-v2*v4*v12*v39*v16+3*v2*v25*v14*v66*v16-3*v24*v7*v12*v66*v16+v7*v54*v27*v38/2-v2*v35*v54*v27*v38/2+v14*v37*v27*v38/2+v4*v12*v37*v27*v38/2+v12*v14*v65*v27*v38/2-v2*v7*v65*v27*v38/2+v2*v12*v14*v54*v39*v38/2-v24*v7*v54*v39*v38/2-v25*v14*v37*v39*v38/2+v2*v7*v12*v37*v39*v38/2-3*v12*v14*v37*v54*v27*v64/4+3*v2*v7*v37*v54*v27*v64/4)*v19*v22+v56*v18*v22-v33*v22+v51*v44*v22+v50*v42*v22+v30*v55*v22+v10*(v2*v27*v16+v53*v27*v16-v12*v13*v39*v16+v2*v36*v12*v39*v16+v2*v4*v6*v39*v16-v53*v24*v39*v16-3*v2*v6*v12*v14*v66*v16+3*v24*v12*v13*v66*v16-v13*v54*v27*v38/2+v2*v36*v54*v27*v38/2-v4*v6*v37*v27*v38/2+v53*v2*v37*v27*v38/2-v6*v14*v65*v27*v38/2+v2*v13*v65*v27*v38/2-v2*v6*v14*v54*v39*v38/2+v24*v13*v54*v39*v38/2+v6*v12*v14*v37*v39*v38/2-v2*v12*v13*v37*v39*v38/2+3*v6*v14*v37*v54*v27*v64/4-3*v2*v13*v37*v54*v27*v64/4)*v22-v44*v20*v52*v32/2-v42*v19*v52*v32/2-v33*v18*v52*v32/2-v30*v28*v52*v32/2-v10*v41*v52*v32/2-v57*v20*v31*v32/2-v56*v19*v31*v32/2-v50*v33*v31*v32/2-v51*v34*v31*v32/2-v10*v55*v31*v32/2-v34*v20*v63*v32/2-v33*v19*v63*v32/2-v10*v28*v63*v32/2+3*v34*v20*v31*v52*v62/4+3*v33*v19*v31*v52*v62/4+3*v10*v28*v31*v52*v62/4)*v48+v49*v46*v60*v61-v23*v45*v60*v61)*rad_subtraction(atan2(v46,v23), eq)+2*k*(v23*v45*v48-v49*v46*v48)*(v23*v58*v48-v59*v46*v48) ; }

double HarmonicDihedralConstraintFunctions::hessianXbXd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = xd-xc ; v2 = yc-yb ; v3 = xc-xb ; v4 = -yc ; v5 = yd+v4 ; v6 = v3*v5-v1*v2 ; v7 = zb-za ; v8 = xb-xa ; v9 = zc-zb ; v10 = v3*v7-v8*v9 ; v11 = pow(v3,2) ; v12 = sqrt(pow(v9,2)+pow(v2,2)+v11) ; v13 = 1/v12 ; v14 = -ya ; v15 = yb+v14 ; v16 = v8*v2-v3*v15 ; v17 = v15*v9-v2*v7 ; v18 = sqrt(pow(v17,2)+pow(v16,2)+pow(v10,2)) ; v19 = 1/v18 ; v20 = v2*v17*v13*v19-v3*v10*v13*v19 ; v21 = v4+yb ; v22 = -zc ; v23 = zd+v22 ; v24 = v1*v9-v3*v23 ; v25 = 2*v9*v24+2*v21*v6 ; v26 = v2*v23-v5*v9 ; v27 = sqrt(pow(v6,2)+pow(v26,2)+pow(v24,2)) ; v28 = 1/pow(v27,3) ; v29 = v3*v16*v13*v19-v9*v17*v13*v19 ; v30 = v9*v10*v13*v19-v2*v16*v13*v19 ; v31 = 1/v27 ; v32 = v9*v29*v31+v21*v20*v31-v30*v26*v25*v28/2-v29*v24*v25*v28/2-v6*v20*v25*v28/2 ; v33 = v17*v19*v26*v31+v10*v19*v24*v31+v16*v6*v19*v31 ; v34 = v30*v26*v31+v29*v24*v31+v6*v20*v31 ; v35 = pow(v34,2)+pow(v33,2) ; v36 = 1/v35 ; v37 = v9*v10*v19*v31+v21*v16*v19*v31-v17*v19*v26*v25*v28/2-v10*v19*v24*v25*v28/2-v16*v6*v19*v25*v28/2 ; v38 = yc-yd ; v39 = 2*v23*v24+2*v38*v6 ; v40 = yc+v14 ; v41 = v22+za ; v42 = 2*v41*v10+2*v40*v16 ; v43 = 1/pow(v18,3) ; v44 = 1/pow(v12,3) ; v45 = v10*v13*v19-v3*v41*v13*v19+v3*v2*v17*v44*v19-v11*v10*v44*v19-v2*v17*v42*v13*v43/2+v3*v10*v42*v13*v43/2 ; v46 = -v16*v13*v19+v3*v40*v13*v19-v3*v9*v17*v44*v19+v11*v16*v44*v19+v9*v17*v42*v13*v43/2-v3*v16*v42*v13*v43/2 ; v47 = v41*v9*v13*v19-v40*v2*v13*v19+v3*v9*v10*v44*v19-v3*v2*v16*v44*v19-v9*v10*v42*v13*v43/2+v2*v16*v42*v13*v43/2 ; v48 = v47*v26*v31+v46*v24*v31+v29*v23*v31+v38*v20*v31+v6*v45*v31-v30*v26*v39*v28/2-v29*v24*v39*v28/2-v6*v20*v39*v28/2 ; v49 = -v17*v42*v43*v26*v31/2+v41*v19*v24*v31-v10*v42*v43*v24*v31/2+v10*v19*v23*v31+v40*v6*v19*v31+v16*v38*v19*v31-v16*v6*v42*v43*v31/2-v17*v19*v26*v39*v28/2-v10*v19*v24*v39*v28/2-v16*v6*v19*v39*v28/2 ; v50 = 2*v32*v34+2*v37*v33 ; v51 = 1/pow(v35,2) ; v52 = 1/pow(v27,5) ; v53 = 2*v9*v23+2*v21*v38 ; return 2*k*(-(v41*v9*v19*v31+v21*v40*v19*v31-v9*v10*v42*v43*v31/2-v21*v16*v42*v43*v31/2-v9*v10*v19*v39*v28/2-v21*v16*v19*v39*v28/2+v17*v42*v43*v26*v25*v28/4-v41*v19*v24*v25*v28/2+v10*v42*v43*v24*v25*v28/4-v10*v19*v23*v25*v28/2-v40*v6*v19*v25*v28/2-v16*v38*v19*v25*v28/2+v16*v6*v42*v43*v25*v28/4-v17*v19*v26*v53*v28/2-v10*v19*v24*v53*v28/2-v16*v6*v19*v53*v28/2+3*v17*v19*v26*v25*v39*v52/4+3*v10*v19*v24*v25*v39*v52/4+3*v16*v6*v19*v25*v39*v52/4)*v34*v36+v37*v48*v36+(v21*v45*v31+v9*v46*v31-v9*v29*v39*v28/2-v21*v20*v39*v28/2-v47*v26*v25*v28/2-v46*v24*v25*v28/2-v29*v23*v25*v28/2-v38*v20*v25*v28/2-v6*v45*v25*v28/2-v30*v26*v53*v28/2-v29*v24*v53*v28/2-v6*v20*v53*v28/2+3*v30*v26*v25*v39*v52/4+3*v29*v24*v25*v39*v52/4+3*v6*v20*v25*v39*v52/4)*v33*v36-v32*v49*v36+v49*v34*v50*v51-v33*v48*v50*v51)*rad_subtraction(atan2(v34,v33), eq)+2*k*(v32*v33*v36-v37*v34*v36)*(v33*v48*v36-v49*v34*v36) ; }

double HarmonicDihedralConstraintFunctions::hessianXbYd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = xd-xc ; v2 = yc-yb ; v3 = xc-xb ; v4 = yd-yc ; v5 = v3*v4-v1*v2 ; v6 = zb-za ; v7 = xb-xa ; v8 = zc-zb ; v9 = v3*v6-v7*v8 ; v10 = pow(v3,2) ; v11 = sqrt(pow(v8,2)+pow(v2,2)+v10) ; v12 = 1/v11 ; v13 = -ya ; v14 = yb+v13 ; v15 = v7*v2-v3*v14 ; v16 = v14*v8-v2*v6 ; v17 = sqrt(pow(v9,2)+pow(v16,2)+pow(v15,2)) ; v18 = 1/v17 ; v19 = v2*v16*v12*v18-v3*v9*v12*v18 ; v20 = -zc ; v21 = v20+zb ; v22 = zd+v20 ; v23 = v2*v22-v4*v8 ; v24 = 2*v21*v23+2*v3*v5 ; v25 = v1*v8-v3*v22 ; v26 = sqrt(pow(v5,2)+pow(v25,2)+pow(v23,2)) ; v27 = 1/pow(v26,3) ; v28 = v3*v15*v12*v18-v8*v16*v12*v18 ; v29 = v8*v9*v12*v18-v2*v15*v12*v18 ; v30 = 1/v26 ; v31 = v3*v19*v30+v21*v29*v30-v29*v23*v24*v27/2-v28*v25*v24*v27/2-v5*v19*v24*v27/2 ; v32 = v16*v18*v23*v30+v9*v18*v25*v30+v15*v5*v18*v30 ; v33 = v29*v23*v30+v28*v25*v30+v5*v19*v30 ; v34 = pow(v33,2)+pow(v32,2) ; v35 = 1/v34 ; v36 = v21*v16*v18*v30+v3*v15*v18*v30-v16*v18*v23*v24*v27/2-v9*v18*v25*v24*v27/2-v15*v5*v18*v24*v27/2 ; v37 = yc-yd ; v38 = 2*v22*v25+2*v37*v5 ; v39 = yc+v13 ; v40 = v20+za ; v41 = 2*v40*v9+2*v39*v15 ; v42 = 1/pow(v17,3) ; v43 = 1/pow(v11,3) ; v44 = v9*v12*v18-v3*v40*v12*v18+v3*v2*v16*v43*v18-v10*v9*v43*v18-v2*v16*v41*v12*v42/2+v3*v9*v41*v12*v42/2 ; v45 = -v15*v12*v18+v3*v39*v12*v18-v3*v8*v16*v43*v18+v10*v15*v43*v18+v8*v16*v41*v12*v42/2-v3*v15*v41*v12*v42/2 ; v46 = v40*v8*v12*v18-v39*v2*v12*v18+v3*v8*v9*v43*v18-v3*v2*v15*v43*v18-v8*v9*v41*v12*v42/2+v2*v15*v41*v12*v42/2 ; v47 = v46*v23*v30+v45*v25*v30+v28*v22*v30+v37*v19*v30+v5*v44*v30-v29*v23*v38*v27/2-v28*v25*v38*v27/2-v5*v19*v38*v27/2 ; v48 = -v16*v41*v42*v23*v30/2+v40*v18*v25*v30-v9*v41*v42*v25*v30/2+v9*v18*v22*v30+v39*v5*v18*v30+v15*v37*v18*v30-v15*v5*v41*v42*v30/2-v16*v18*v23*v38*v27/2-v9*v18*v25*v38*v27/2-v15*v5*v18*v38*v27/2 ; v49 = 2*v31*v33+2*v36*v32 ; v50 = 1/pow(v34,2) ; v51 = 1/pow(v26,5) ; v52 = 2*v3*v37-2*v5 ; return 2*k*(-(-v15*v18*v30+v3*v39*v18*v30-v21*v16*v41*v42*v30/2-v3*v15*v41*v42*v30/2+v16*v41*v42*v23*v24*v27/4-v40*v18*v25*v24*v27/2+v9*v41*v42*v25*v24*v27/4-v9*v18*v22*v24*v27/2-v39*v5*v18*v24*v27/2-v15*v37*v18*v24*v27/2+v15*v5*v41*v42*v24*v27/4-v21*v16*v18*v38*v27/2-v3*v15*v18*v38*v27/2-v52*v16*v18*v23*v27/2-v52*v9*v18*v25*v27/2-v15*v5*v52*v18*v27/2+3*v16*v18*v23*v38*v24*v51/4+3*v9*v18*v25*v38*v24*v51/4+3*v15*v5*v18*v38*v24*v51/4)*v33*v35+v36*v47*v35+(-v19*v30+v3*v44*v30+v21*v46*v30-v46*v23*v24*v27/2-v45*v25*v24*v27/2-v28*v22*v24*v27/2-v37*v19*v24*v27/2-v5*v44*v24*v27/2-v3*v19*v38*v27/2-v21*v29*v38*v27/2-v52*v29*v23*v27/2-v52*v28*v25*v27/2-v5*v52*v19*v27/2+3*v29*v23*v38*v24*v51/4+3*v28*v25*v38*v24*v51/4+3*v5*v19*v38*v24*v51/4)*v32*v35-v31*v48*v35+v48*v33*v49*v50-v32*v47*v49*v50)*rad_subtraction(atan2(v33,v32), eq)+2*k*(v31*v32*v35-v36*v33*v35)*(v32*v47*v35-v48*v33*v35) ; }

double HarmonicDihedralConstraintFunctions::hessianXbZd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = xc-xb ; v5 = yd-yc ; v6 = v4*v5-v2*v3 ; v7 = zb-za ; v8 = xb-xa ; v9 = zc-zb ; v10 = v4*v7-v8*v9 ; v11 = pow(v4,2) ; v12 = sqrt(pow(v9,2)+pow(v3,2)+v11) ; v13 = 1/v12 ; v14 = -ya ; v15 = yb+v14 ; v16 = v8*v3-v4*v15 ; v17 = v15*v9-v3*v7 ; v18 = sqrt(pow(v17,2)+pow(v16,2)+pow(v10,2)) ; v19 = 1/v18 ; v20 = v3*v17*v13*v19-v4*v10*v13*v19 ; v21 = v1+xb ; v22 = -zc ; v23 = zd+v22 ; v24 = v2*v9-v4*v23 ; v25 = v3*v23-v5*v9 ; v26 = 2*v3*v25+2*v21*v24 ; v27 = sqrt(pow(v6,2)+pow(v25,2)+pow(v24,2)) ; v28 = 1/pow(v27,3) ; v29 = v4*v16*v13*v19-v9*v17*v13*v19 ; v30 = v9*v10*v13*v19-v3*v16*v13*v19 ; v31 = 1/v27 ; v32 = v21*v29*v31+v3*v30*v31-v30*v25*v26*v28/2-v29*v24*v26*v28/2-v6*v20*v26*v28/2 ; v33 = v17*v19*v25*v31+v10*v19*v24*v31+v16*v6*v19*v31 ; v34 = v30*v25*v31+v29*v24*v31+v6*v20*v31 ; v35 = pow(v34,2)+pow(v33,2) ; v36 = 1/v35 ; v37 = v3*v17*v19*v31+v21*v10*v19*v31-v17*v19*v25*v26*v28/2-v10*v19*v24*v26*v28/2-v16*v6*v19*v26*v28/2 ; v38 = yc-yd ; v39 = 2*v23*v24+2*v38*v6 ; v40 = yc+v14 ; v41 = v22+za ; v42 = 2*v41*v10+2*v40*v16 ; v43 = 1/pow(v18,3) ; v44 = 1/pow(v12,3) ; v45 = v10*v13*v19-v4*v41*v13*v19+v4*v3*v17*v44*v19-v11*v10*v44*v19-v3*v17*v42*v13*v43/2+v4*v10*v42*v13*v43/2 ; v46 = -v16*v13*v19+v4*v40*v13*v19-v4*v9*v17*v44*v19+v11*v16*v44*v19+v9*v17*v42*v13*v43/2-v4*v16*v42*v13*v43/2 ; v47 = v41*v9*v13*v19-v40*v3*v13*v19+v4*v9*v10*v44*v19-v4*v3*v16*v44*v19-v9*v10*v42*v13*v43/2+v3*v16*v42*v13*v43/2 ; v48 = v47*v25*v31+v46*v24*v31+v29*v23*v31+v38*v20*v31+v6*v45*v31-v30*v25*v39*v28/2-v29*v24*v39*v28/2-v6*v20*v39*v28/2 ; v49 = -v17*v42*v43*v25*v31/2+v41*v19*v24*v31-v10*v42*v43*v24*v31/2+v10*v19*v23*v31+v40*v6*v19*v31+v16*v38*v19*v31-v16*v6*v42*v43*v31/2-v17*v19*v25*v39*v28/2-v10*v19*v24*v39*v28/2-v16*v6*v19*v39*v28/2 ; v50 = 2*v32*v34+2*v37*v33 ; v51 = 1/pow(v35,2) ; v52 = 1/pow(v27,5) ; v53 = 2*v24+2*v21*v23 ; return 2*k*(-(v10*v19*v31+v21*v41*v19*v31-v3*v17*v42*v43*v31/2-v21*v10*v42*v43*v31/2+v17*v42*v43*v25*v26*v28/4-v41*v19*v24*v26*v28/2+v10*v42*v43*v24*v26*v28/4-v10*v19*v23*v26*v28/2-v40*v6*v19*v26*v28/2-v16*v38*v19*v26*v28/2+v16*v6*v42*v43*v26*v28/4-v3*v17*v19*v39*v28/2-v21*v10*v19*v39*v28/2-v17*v19*v25*v53*v28/2-v10*v19*v24*v53*v28/2-v16*v6*v19*v53*v28/2+3*v17*v19*v25*v39*v26*v52/4+3*v10*v19*v24*v39*v26*v52/4+3*v16*v6*v19*v39*v26*v52/4)*v34*v36+v37*v48*v36+(v29*v31+v3*v47*v31+v21*v46*v31-v47*v25*v26*v28/2-v46*v24*v26*v28/2-v29*v23*v26*v28/2-v38*v20*v26*v28/2-v6*v45*v26*v28/2-v21*v29*v39*v28/2-v3*v30*v39*v28/2-v30*v25*v53*v28/2-v29*v24*v53*v28/2-v6*v20*v53*v28/2+3*v30*v25*v39*v26*v52/4+3*v29*v24*v39*v26*v52/4+3*v6*v20*v39*v26*v52/4)*v33*v36-v32*v49*v36+v49*v34*v50*v51-v33*v48*v50*v51)*rad_subtraction(atan2(v34,v33), eq)+2*k*(v32*v33*v36-v37*v34*v36)*(v33*v48*v36-v49*v34*v36) ; }

double HarmonicDihedralConstraintFunctions::hessianYbYb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = -xc ; v7 = xd+v6 ; v8 = yd-yc ; v9 = v1*v8-v7*v4 ; v10 = -za ; v11 = zb+v10 ; v12 = zc-zb ; v13 = v1*v11-v3*v12 ; v14 = v2*v12-v4*v11 ; v15 = sqrt(pow(v5,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = zd-zc ; v18 = v7*v12-v1*v17 ; v19 = v4*v17-v8*v12 ; v20 = sqrt(pow(v9,2)+pow(v19,2)+pow(v18,2)) ; v21 = 1/v20 ; v22 = v14*v16*v19*v21+v13*v16*v18*v21+v5*v9*v16*v21 ; v23 = pow(v4,2) ; v24 = sqrt(v23+pow(v12,2)+pow(v1,2)) ; v25 = 1/v24 ; v26 = v4*v14*v25*v16-v1*v13*v25*v16 ; v27 = zc-zd ; v28 = 2*v27*v19+2*v7*v9 ; v29 = 1/pow(v20,3) ; v30 = v1*v5*v25*v16-v12*v14*v25*v16 ; v31 = v12*v13*v25*v16-v4*v5*v25*v16 ; v32 = v6+xa ; v33 = zc+v10 ; v34 = 2*v33*v14+2*v32*v5 ; v35 = 1/pow(v15,3) ; v36 = 1/pow(v24,3) ; v37 = -v14*v25*v16+v4*v33*v25*v16+v23*v14*v36*v16-v1*v4*v13*v36*v16-v4*v14*v34*v25*v35/2+v1*v13*v34*v25*v35/2 ; v38 = -v33*v12*v25*v16+v32*v1*v25*v16-v4*v12*v14*v36*v16+v1*v4*v5*v36*v16+v12*v14*v34*v25*v35/2-v1*v5*v34*v25*v35/2 ; v39 = v5*v25*v16-v32*v4*v25*v16+v4*v12*v13*v36*v16-v23*v5*v36*v16-v12*v13*v34*v25*v35/2+v4*v5*v34*v25*v35/2 ; v40 = v39*v19*v21+v38*v18*v21+v31*v27*v21+v7*v26*v21+v9*v37*v21-v31*v19*v28*v29/2-v30*v18*v28*v29/2-v9*v26*v28*v29/2 ; v41 = v31*v19*v21+v30*v18*v21+v9*v26*v21 ; v42 = pow(v41,2)+pow(v22,2) ; v43 = 1/v42 ; v44 = v33*v16*v19*v21-v14*v34*v35*v19*v21/2-v13*v34*v35*v18*v21/2+v14*v16*v27*v21+v32*v9*v16*v21+v7*v5*v16*v21-v5*v9*v34*v35*v21/2-v14*v16*v19*v28*v29/2-v13*v16*v18*v28*v29/2-v5*v9*v16*v28*v29/2 ; v45 = 2*v40*v41+2*v44*v22 ; v46 = 1/pow(v42,2) ; v47 = pow(v28,2) ; v48 = 1/pow(v20,5) ; v49 = 2*pow(v7,2)+2*pow(v27,2) ; v50 = pow(v34,2) ; v51 = 1/pow(v15,5) ; v52 = 2*pow(v33,2)+2*pow(v32,2) ; v53 = 1/pow(v24,5) ; v54 = pow(v4,3) ; return 2*pow(v22*v40*v43-v44*v41*v43,2)*k+2*k*(-(-v14*v52*v35*v19*v21/2-v33*v34*v35*v19*v21+3*v14*v50*v51*v19*v21/4-v13*v52*v35*v18*v21/2+3*v13*v50*v51*v18*v21/4+2*v33*v16*v27*v21-v14*v34*v35*v27*v21+2*v32*v7*v16*v21-v5*v9*v52*v35*v21/2-v32*v9*v34*v35*v21-v7*v5*v34*v35*v21+3*v5*v9*v50*v51*v21/4-v33*v16*v19*v28*v29+v14*v34*v35*v19*v28*v29/2+v13*v34*v35*v18*v28*v29/2-v14*v16*v27*v28*v29-v32*v9*v16*v28*v29-v7*v5*v16*v28*v29+v5*v9*v34*v35*v28*v29/2-v14*v16*v49*v19*v29/2-v13*v16*v49*v18*v29/2-v5*v9*v16*v49*v29/2+3*v14*v16*v19*v47*v48/4+3*v13*v16*v18*v47*v48/4+3*v5*v9*v16*v47*v48/4)*v41*v43+v22*((2*v32*v25*v16-v12*v13*v36*v16-2*v32*v23*v36*v16+3*v4*v5*v36*v16+3*v23*v12*v13*v53*v16-3*v54*v5*v53*v16-v12*v13*v52*v25*v35/2+v4*v5*v52*v25*v35/2-v5*v34*v25*v35+v32*v4*v34*v25*v35-v4*v12*v13*v34*v36*v35+v23*v5*v34*v36*v35+3*v12*v13*v50*v25*v51/4-3*v4*v5*v50*v25*v51/4)*v19*v21+(v12*v14*v36*v16-2*v4*v33*v12*v36*v16-v1*v5*v36*v16+2*v32*v1*v4*v36*v16-3*v23*v12*v14*v53*v16+3*v1*v23*v5*v53*v16+v12*v14*v52*v25*v35/2-v1*v5*v52*v25*v35/2+v33*v12*v34*v25*v35-v32*v1*v34*v25*v35+v4*v12*v14*v34*v36*v35-v1*v4*v5*v34*v36*v35-3*v12*v14*v50*v25*v51/4+3*v1*v5*v50*v25*v51/4)*v18*v21+2*v39*v27*v21+2*v7*v37*v21+v9*(-2*v33*v25*v16-3*v4*v14*v36*v16+v1*v13*v36*v16+2*v23*v33*v36*v16+3*v54*v14*v53*v16-3*v1*v23*v13*v53*v16-v4*v14*v52*v25*v35/2+v1*v13*v52*v25*v35/2+v14*v34*v25*v35-v4*v33*v34*v25*v35-v23*v14*v34*v36*v35+v1*v4*v13*v34*v36*v35+3*v4*v14*v50*v25*v51/4-3*v1*v13*v50*v25*v51/4)*v21-v39*v19*v28*v29-v38*v18*v28*v29-v31*v27*v28*v29-v7*v26*v28*v29-v9*v37*v28*v29-v31*v49*v19*v29/2-v30*v49*v18*v29/2-v9*v26*v49*v29/2+3*v31*v19*v47*v48/4+3*v30*v18*v47*v48/4+3*v9*v26*v47*v48/4)*v43+v44*v41*v45*v46-v22*v40*v45*v46)*rad_subtraction(atan2(v41,v22), eq) ; }

double HarmonicDihedralConstraintFunctions::hessianYbZb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62 ; v1 = xc-xb ; v2 = yb-ya ; v3 = -xa ; v4 = xb+v3 ; v5 = yc-yb ; v6 = v4*v5-v1*v2 ; v7 = -xc ; v8 = xd+v7 ; v9 = -yc ; v10 = yd+v9 ; v11 = v1*v10-v8*v5 ; v12 = -za ; v13 = zb+v12 ; v14 = zc-zb ; v15 = v1*v13-v4*v14 ; v16 = v2*v14-v5*v13 ; v17 = sqrt(pow(v6,2)+pow(v16,2)+pow(v15,2)) ; v18 = 1/v17 ; v19 = zd-zc ; v20 = v8*v14-v1*v19 ; v21 = v5*v19-v10*v14 ; v22 = sqrt(pow(v21,2)+pow(v20,2)+pow(v11,2)) ; v23 = 1/v22 ; v24 = v16*v18*v21*v23+v15*v18*v20*v23+v6*v11*v18*v23 ; v25 = pow(v5,2) ; v26 = pow(v14,2) ; v27 = sqrt(v26+v25+pow(v1,2)) ; v28 = 1/v27 ; v29 = v5*v16*v28*v18-v1*v15*v28*v18 ; v30 = xc-xd ; v31 = 2*v10*v21+2*v30*v20 ; v32 = 1/pow(v22,3) ; v33 = v1*v6*v28*v18-v14*v16*v28*v18 ; v34 = v14*v15*v28*v18-v5*v6*v28*v18 ; v35 = xc+v3 ; v36 = v9+ya ; v37 = 2*v36*v16+2*v35*v15 ; v38 = 1/pow(v17,3) ; v39 = 1/pow(v27,3) ; v40 = v36*v5*v28*v18-v35*v1*v28*v18+v5*v14*v16*v39*v18-v1*v14*v15*v39*v18-v5*v16*v37*v28*v38/2+v1*v15*v37*v28*v38/2 ; v41 = v16*v28*v18-v36*v14*v28*v18-v26*v16*v39*v18+v1*v6*v14*v39*v18+v14*v16*v37*v28*v38/2-v1*v6*v37*v28*v38/2 ; v42 = -v15*v28*v18+v35*v14*v28*v18+v26*v15*v39*v18-v5*v6*v14*v39*v18-v14*v15*v37*v28*v38/2+v5*v6*v37*v28*v38/2 ; v43 = v42*v21*v23+v41*v20*v23+v30*v33*v23+v10*v34*v23+v11*v40*v23-v34*v21*v31*v32/2-v33*v20*v31*v32/2-v11*v29*v31*v32/2 ; v44 = v34*v21*v23+v33*v20*v23+v11*v29*v23 ; v45 = pow(v44,2)+pow(v24,2) ; v46 = 1/v45 ; v47 = v36*v18*v21*v23-v16*v37*v38*v21*v23/2+v35*v18*v20*v23-v15*v37*v38*v20*v23/2+v10*v16*v18*v23+v30*v15*v18*v23-v6*v11*v37*v38*v23/2-v16*v18*v21*v31*v32/2-v15*v18*v20*v31*v32/2-v6*v11*v18*v31*v32/2 ; v48 = zc-zd ; v49 = 2*v48*v21+2*v8*v11 ; v50 = v7+xa ; v51 = zc+v12 ; v52 = 2*v51*v16+2*v50*v6 ; v53 = -v16*v28*v18+v5*v51*v28*v18+v25*v16*v39*v18-v1*v5*v15*v39*v18-v5*v16*v52*v28*v38/2+v1*v15*v52*v28*v38/2 ; v54 = -v51*v14*v28*v18+v50*v1*v28*v18-v5*v14*v16*v39*v18+v1*v5*v6*v39*v18+v14*v16*v52*v28*v38/2-v1*v6*v52*v28*v38/2 ; v55 = v6*v28*v18-v50*v5*v28*v18+v5*v14*v15*v39*v18-v25*v6*v39*v18-v14*v15*v52*v28*v38/2+v5*v6*v52*v28*v38/2 ; v56 = v55*v21*v23+v54*v20*v23+v34*v48*v23+v8*v29*v23+v11*v53*v23-v34*v21*v49*v32/2-v33*v20*v49*v32/2-v11*v29*v49*v32/2 ; v57 = v51*v18*v21*v23-v16*v52*v38*v21*v23/2-v15*v52*v38*v20*v23/2+v16*v18*v48*v23+v50*v11*v18*v23+v8*v6*v18*v23-v6*v11*v52*v38*v23/2-v16*v18*v21*v49*v32/2-v15*v18*v20*v49*v32/2-v6*v11*v18*v49*v32/2 ; v58 = 2*v43*v44+2*v47*v24 ; v59 = 1/pow(v45,2) ; v60 = 1/pow(v22,5) ; v61 = 1/pow(v17,5) ; v62 = 1/pow(v27,5) ; return 2*k*(-(-v36*v52*v38*v21*v23/2-v51*v37*v38*v21*v23/2-v36*v51*v16*v38*v21*v23+3*v16*v37*v52*v61*v21*v23/4-v35*v52*v38*v20*v23/2-v36*v51*v15*v38*v20*v23+3*v15*v37*v52*v61*v20*v23/4+v36*v18*v48*v23-v16*v37*v38*v48*v23/2+v10*v51*v18*v23-v10*v16*v52*v38*v23/2-v30*v15*v52*v38*v23/2-v50*v11*v37*v38*v23/2-v8*v6*v37*v38*v23/2-v36*v6*v11*v51*v38*v23+3*v6*v11*v37*v52*v61*v23/4-v36*v18*v21*v49*v32/2+v16*v37*v38*v21*v49*v32/4-v35*v18*v20*v49*v32/2+v15*v37*v38*v20*v49*v32/4-v10*v16*v18*v49*v32/2-v30*v15*v18*v49*v32/2+v6*v11*v37*v38*v49*v32/4-v51*v18*v21*v31*v32/2+v16*v52*v38*v21*v31*v32/4+v15*v52*v38*v20*v31*v32/4-v16*v18*v48*v31*v32/2-v50*v11*v18*v31*v32/2-v8*v6*v18*v31*v32/2+v6*v11*v52*v38*v31*v32/4-v10*v16*v18*v48*v21*v32-v10*v15*v18*v48*v20*v32-v6*v10*v11*v18*v48*v32+3*v16*v18*v21*v31*v49*v60/4+3*v15*v18*v20*v31*v49*v60/4+3*v6*v11*v18*v31*v49*v60/4)*v44*v46-v57*v43*v46+v47*v56*v46+v24*((-v5*v15*v39*v18+v6*v14*v39*v18+v35*v5*v14*v39*v18-v50*v5*v14*v39*v18+3*v5*v26*v15*v62*v18-3*v25*v6*v14*v62*v18+v15*v52*v28*v38/2-v35*v14*v52*v28*v38/2-v6*v37*v28*v38/2+v50*v5*v37*v28*v38/2-v36*v51*v14*v15*v28*v38+v36*v5*v6*v51*v28*v38-v26*v15*v52*v39*v38/2+v5*v6*v14*v52*v39*v38/2-v5*v14*v15*v37*v39*v38/2+v25*v6*v37*v39*v38/2+3*v14*v15*v37*v52*v28*v61/4-3*v5*v6*v37*v52*v28*v61/4)*v21*v23+(v51*v28*v18-v51*v26*v39*v18+v5*v16*v39*v18-v36*v5*v14*v39*v18+v50*v1*v14*v39*v18-3*v5*v26*v16*v62*v18+3*v1*v5*v6*v14*v62*v18-v16*v52*v28*v38/2+v36*v14*v52*v28*v38/2+v51*v14*v37*v28*v38/2-v50*v1*v37*v28*v38/2+v36*v51*v14*v16*v28*v38-v1*v36*v6*v51*v28*v38+v26*v16*v52*v39*v38/2-v1*v6*v14*v52*v39*v38/2+v5*v14*v16*v37*v39*v38/2-v1*v5*v6*v37*v39*v38/2-3*v14*v16*v37*v52*v28*v61/4+3*v1*v6*v37*v52*v28*v61/4)*v20*v23+v42*v48*v23+v30*v54*v23+v10*v55*v23+v8*v40*v23+v11*(-v36*v28*v18-v14*v16*v39*v18+v5*v51*v14*v39*v18+v36*v25*v39*v18-v35*v1*v5*v39*v18+3*v25*v14*v16*v62*v18-3*v1*v5*v14*v15*v62*v18-v36*v5*v52*v28*v38/2+v35*v1*v52*v28*v38/2+v16*v37*v28*v38/2-v5*v51*v37*v28*v38/2-v36*v5*v51*v16*v28*v38+v1*v36*v51*v15*v28*v38-v5*v14*v16*v52*v39*v38/2+v1*v14*v15*v52*v39*v38/2-v25*v16*v37*v39*v38/2+v1*v5*v15*v37*v39*v38/2+3*v5*v16*v37*v52*v28*v61/4-3*v1*v15*v37*v52*v28*v61/4)*v23-v42*v21*v49*v32/2-v41*v20*v49*v32/2-v30*v33*v49*v32/2-v10*v34*v49*v32/2-v11*v40*v49*v32/2-v55*v21*v31*v32/2-v54*v20*v31*v32/2-v34*v48*v31*v32/2-v8*v29*v31*v32/2-v11*v53*v31*v32/2-v10*v34*v48*v21*v32-v10*v33*v48*v20*v32-v10*v11*v29*v48*v32+3*v34*v21*v31*v49*v60/4+3*v33*v20*v31*v49*v60/4+3*v11*v29*v31*v49*v60/4)*v46+v57*v44*v58*v59-v24*v56*v58*v59)*rad_subtraction(atan2(v44,v24), eq)+2*k*(v24*v43*v46-v47*v44*v46)*(v24*v56*v46-v57*v44*v46) ; }

double HarmonicDihedralConstraintFunctions::hessianYbXc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = -yb ; v5 = yc+v4 ; v6 = v3*v5-v1*v2 ; v7 = -xc ; v8 = xd+v7 ; v9 = yd-yc ; v10 = v1*v9-v8*v5 ; v11 = -za ; v12 = zb+v11 ; v13 = zc-zb ; v14 = v1*v12-v3*v13 ; v15 = v2*v13-v5*v12 ; v16 = sqrt(pow(v6,2)+pow(v15,2)+pow(v14,2)) ; v17 = 1/v16 ; v18 = zd-zc ; v19 = v8*v13-v1*v18 ; v20 = v5*v18-v9*v13 ; v21 = sqrt(pow(v20,2)+pow(v19,2)+pow(v10,2)) ; v22 = 1/v21 ; v23 = v15*v17*v20*v22+v14*v17*v19*v22+v6*v10*v17*v22 ; v24 = pow(v1,2) ; v25 = pow(v5,2) ; v26 = sqrt(v25+v24+pow(v13,2)) ; v27 = 1/v26 ; v28 = v5*v15*v27*v17-v1*v14*v27*v17 ; v29 = yd+v4 ; v30 = -zd ; v31 = v30+zb ; v32 = 2*v31*v19+2*v29*v10 ; v33 = 1/pow(v21,3) ; v34 = v1*v6*v27*v17-v13*v15*v27*v17 ; v35 = v13*v14*v27*v17-v5*v6*v27*v17 ; v36 = v4+ya ; v37 = 2*v12*v14+2*v36*v6 ; v38 = 1/pow(v16,3) ; v39 = 1/pow(v26,3) ; v40 = -v14*v27*v17-v1*v12*v27*v17-v1*v5*v15*v39*v17+v24*v14*v39*v17-v5*v15*v37*v27*v38/2+v1*v14*v37*v27*v38/2 ; v41 = v6*v27*v17 ; v42 = v41+v1*v36*v27*v17+v1*v13*v15*v39*v17-v24*v6*v39*v17+v13*v15*v37*v27*v38/2-v1*v6*v37*v27*v38/2 ; v43 = v1*v5*v6*v39*v17 ; v44 = v12*v13*v27*v17-v36*v5*v27*v17-v1*v13*v14*v39*v17+v43-v13*v14*v37*v27*v38/2+v5*v6*v37*v27*v38/2 ; v45 = v44*v20*v22+v42*v19*v22+v34*v31*v22+v29*v28*v22+v10*v40*v22-v35*v20*v32*v33/2-v34*v19*v32*v33/2-v10*v28*v32*v33/2 ; v46 = v35*v20*v22+v34*v19*v22+v10*v28*v22 ; v47 = pow(v46,2)+pow(v23,2) ; v48 = 1/v47 ; v49 = -v15*v37*v38*v20*v22/2+v12*v17*v19*v22-v14*v37*v38*v19*v22/2+v14*v17*v31*v22+v36*v10*v17*v22+v6*v29*v17*v22-v6*v10*v37*v38*v22/2-v15*v17*v20*v32*v33/2-v14*v17*v19*v32*v33/2-v6*v10*v17*v32*v33/2 ; v50 = v30+zc ; v51 = 2*v50*v20+2*v8*v10 ; v52 = v7+xa ; v53 = zc+v11 ; v54 = 2*v53*v15+2*v52*v6 ; v55 = -v15*v27*v17+v5*v53*v27*v17+v25*v15*v39*v17-v1*v5*v14*v39*v17-v5*v15*v54*v27*v38/2+v1*v14*v54*v27*v38/2 ; v56 = -v53*v13*v27*v17+v52*v1*v27*v17-v5*v13*v15*v39*v17+v43+v13*v15*v54*v27*v38/2-v1*v6*v54*v27*v38/2 ; v57 = v41-v52*v5*v27*v17+v5*v13*v14*v39*v17-v25*v6*v39*v17-v13*v14*v54*v27*v38/2+v5*v6*v54*v27*v38/2 ; v58 = v57*v20*v22+v56*v19*v22+v35*v50*v22+v8*v28*v22+v10*v55*v22-v35*v20*v51*v33/2-v34*v19*v51*v33/2-v10*v28*v51*v33/2 ; v59 = v53*v17*v20*v22-v15*v54*v38*v20*v22/2-v14*v54*v38*v19*v22/2+v15*v17*v50*v22+v52*v10*v17*v22+v8*v6*v17*v22-v6*v10*v54*v38*v22/2-v15*v17*v20*v51*v33/2-v14*v17*v19*v51*v33/2-v6*v10*v17*v51*v33/2 ; v60 = 2*v45*v46+2*v49*v23 ; v61 = 1/pow(v47,2) ; v62 = 1/pow(v21,5) ; v63 = 2*v8*v29-2*v10 ; v64 = 1/pow(v16,5) ; v65 = 2*v52*v36-2*v6 ; v66 = 1/pow(v26,5) ; return 2*k*(-(-v53*v37*v38*v20*v22/2-v65*v15*v38*v20*v22/2+3*v15*v37*v54*v64*v20*v22/4-v12*v54*v38*v19*v22/2-v65*v14*v38*v19*v22/2+3*v14*v37*v54*v64*v19*v22/4-v15*v37*v38*v50*v22/2-v14*v54*v38*v31*v22/2-v10*v17*v22+v52*v29*v17*v22-v6*v17*v22+v8*v36*v17*v22-v36*v10*v54*v38*v22/2-v6*v29*v54*v38*v22/2-v52*v10*v37*v38*v22/2-v8*v6*v37*v38*v22/2-v6*v65*v10*v38*v22/2+3*v6*v10*v37*v54*v64*v22/4+v15*v37*v38*v20*v51*v33/4-v12*v17*v19*v51*v33/2+v14*v37*v38*v19*v51*v33/4-v14*v17*v31*v51*v33/2-v36*v10*v17*v51*v33/2-v6*v29*v17*v51*v33/2+v6*v10*v37*v38*v51*v33/4-v53*v17*v20*v32*v33/2+v15*v54*v38*v20*v32*v33/4+v14*v54*v38*v19*v32*v33/4-v15*v17*v50*v32*v33/2-v52*v10*v17*v32*v33/2-v8*v6*v17*v32*v33/2+v6*v10*v54*v38*v32*v33/4-v63*v15*v17*v20*v33/2-v63*v14*v17*v19*v33/2-v6*v10*v63*v17*v33/2+3*v15*v17*v20*v32*v51*v62/4+3*v14*v17*v19*v32*v51*v62/4+3*v6*v10*v17*v32*v51*v62/4)*v46*v48-v59*v45*v48+v49*v58*v48+v23*((v5*v27*v17+v36*v27*v17+v5*v12*v13*v39*v17-v36*v25*v39*v17-v1*v6*v39*v17+v52*v1*v5*v39*v17-3*v1*v5*v13*v14*v66*v17+3*v1*v25*v6*v66*v17-v12*v13*v54*v27*v38/2+v36*v5*v54*v27*v38/2-v6*v37*v27*v38/2+v52*v5*v37*v27*v38/2-v65*v13*v14*v27*v38/2+v5*v6*v65*v27*v38/2+v1*v13*v14*v54*v39*v38/2-v1*v5*v6*v54*v39*v38/2-v5*v13*v14*v37*v39*v38/2+v25*v6*v37*v39*v38/2+3*v13*v14*v37*v54*v27*v64/4-3*v5*v6*v37*v54*v27*v64/4)*v20*v22+(-v1*v27*v17+v52*v27*v17+v1*v53*v13*v39*v17+v5*v6*v39*v17+v1*v36*v5*v39*v17-v52*v24*v39*v17+3*v1*v5*v13*v15*v66*v17-3*v24*v5*v6*v66*v17-v6*v54*v27*v38/2-v1*v36*v54*v27*v38/2+v53*v13*v37*v27*v38/2-v52*v1*v37*v27*v38/2+v65*v13*v15*v27*v38/2-v1*v6*v65*v27*v38/2-v1*v13*v15*v54*v39*v38/2+v24*v6*v54*v39*v38/2+v5*v13*v15*v37*v39*v38/2-v1*v5*v6*v37*v39*v38/2-3*v13*v15*v37*v54*v27*v64/4+3*v1*v6*v37*v54*v27*v64/4)*v19*v22+v44*v50*v22+v56*v31*v22-v28*v22+v29*v55*v22+v8*v40*v22+v10*(v1*v15*v39*v17-v5*v14*v39*v17-v1*v5*v53*v39*v17-v1*v5*v12*v39*v17-3*v1*v25*v15*v66*v17+3*v24*v5*v14*v66*v17+v14*v54*v27*v38/2+v1*v12*v54*v27*v38/2+v15*v37*v27*v38/2-v5*v53*v37*v27*v38/2-v5*v65*v15*v27*v38/2+v1*v65*v14*v27*v38/2+v1*v5*v15*v54*v39*v38/2-v24*v14*v54*v39*v38/2-v25*v15*v37*v39*v38/2+v1*v5*v14*v37*v39*v38/2+3*v5*v15*v37*v54*v27*v64/4-3*v1*v14*v37*v54*v27*v64/4)*v22-v44*v20*v51*v33/2-v42*v19*v51*v33/2-v34*v31*v51*v33/2-v29*v28*v51*v33/2-v10*v40*v51*v33/2-v57*v20*v32*v33/2-v56*v19*v32*v33/2-v35*v50*v32*v33/2-v8*v28*v32*v33/2-v10*v55*v32*v33/2-v63*v35*v20*v33/2-v63*v34*v19*v33/2-v10*v63*v28*v33/2+3*v35*v20*v32*v51*v62/4+3*v34*v19*v32*v51*v62/4+3*v10*v28*v32*v51*v62/4)*v48+v59*v46*v60*v61-v23*v58*v60*v61)*rad_subtraction(atan2(v46,v23), eq)+2*k*(v23*v45*v48-v49*v46*v48)*(v23*v58*v48-v59*v46*v48) ; }

double HarmonicDihedralConstraintFunctions::hessianYbYc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = -xc ; v7 = xd+v6 ; v8 = yd-yc ; v9 = v1*v8-v7*v4 ; v10 = -za ; v11 = zb+v10 ; v12 = -zb ; v13 = zc+v12 ; v14 = v1*v11-v3*v13 ; v15 = v2*v13-v4*v11 ; v16 = sqrt(pow(v5,2)+pow(v15,2)+pow(v14,2)) ; v17 = 1/v16 ; v18 = zd-zc ; v19 = v7*v13-v1*v18 ; v20 = v4*v18-v8*v13 ; v21 = sqrt(pow(v9,2)+pow(v20,2)+pow(v19,2)) ; v22 = 1/v21 ; v23 = v15*v17*v20*v22+v14*v17*v19*v22+v5*v9*v17*v22 ; v24 = pow(v4,2) ; v25 = sqrt(v24+pow(v13,2)+pow(v1,2)) ; v26 = 1/v25 ; v27 = v4*v15*v26*v17-v1*v14*v26*v17 ; v28 = xb-xd ; v29 = zd+v12 ; v30 = 2*v29*v20+2*v28*v9 ; v31 = 1/pow(v21,3) ; v32 = v1*v5*v26*v17-v13*v15*v26*v17 ; v33 = v13*v14*v26*v17-v4*v5*v26*v17 ; v34 = v12+za ; v35 = 2*v34*v15+2*v3*v5 ; v36 = 1/pow(v16,3) ; v37 = 1/pow(v25,3) ; v38 = v15*v26*v17+v4*v34*v26*v17-v24*v15*v37*v17+v1*v4*v14*v37*v17-v4*v15*v35*v26*v36/2+v1*v14*v35*v26*v36/2 ; v39 = -v34*v13*v26*v17+v3*v1*v26*v17+v4*v13*v15*v37*v17-v1*v4*v5*v37*v17+v13*v15*v35*v26*v36/2-v1*v5*v35*v26*v36/2 ; v40 = -v5*v26*v17-v3*v4*v26*v17-v4*v13*v14*v37*v17+v24*v5*v37*v17-v13*v14*v35*v26*v36/2+v4*v5*v35*v26*v36/2 ; v41 = v40*v20*v22+v39*v19*v22+v33*v29*v22+v28*v27*v22+v9*v38*v22-v33*v20*v30*v31/2-v32*v19*v30*v31/2-v9*v27*v30*v31/2 ; v42 = v33*v20*v22+v32*v19*v22+v9*v27*v22 ; v43 = pow(v42,2)+pow(v23,2) ; v44 = 1/v43 ; v45 = v34*v17*v20*v22-v15*v35*v36*v20*v22/2-v14*v35*v36*v19*v22/2+v15*v17*v29*v22+v3*v9*v17*v22+v28*v5*v17*v22-v5*v9*v35*v36*v22/2-v15*v17*v20*v30*v31/2-v14*v17*v19*v30*v31/2-v5*v9*v17*v30*v31/2 ; v46 = zc-zd ; v47 = 2*v46*v20+2*v7*v9 ; v48 = v6+xa ; v49 = zc+v10 ; v50 = 2*v49*v15+2*v48*v5 ; v51 = -v15*v26*v17+v4*v49*v26*v17+v24*v15*v37*v17-v1*v4*v14*v37*v17-v4*v15*v50*v26*v36/2+v1*v14*v50*v26*v36/2 ; v52 = -v49*v13*v26*v17+v48*v1*v26*v17-v4*v13*v15*v37*v17+v1*v4*v5*v37*v17+v13*v15*v50*v26*v36/2-v1*v5*v50*v26*v36/2 ; v53 = v5*v26*v17-v48*v4*v26*v17+v4*v13*v14*v37*v17-v24*v5*v37*v17-v13*v14*v50*v26*v36/2+v4*v5*v50*v26*v36/2 ; v54 = v53*v20*v22+v52*v19*v22+v33*v46*v22+v7*v27*v22+v9*v51*v22-v33*v20*v47*v31/2-v32*v19*v47*v31/2-v9*v27*v47*v31/2 ; v55 = v49*v17*v20*v22-v15*v50*v36*v20*v22/2-v14*v50*v36*v19*v22/2+v15*v17*v46*v22+v48*v9*v17*v22+v7*v5*v17*v22-v5*v9*v50*v36*v22/2-v15*v17*v20*v47*v31/2-v14*v17*v19*v47*v31/2-v5*v9*v17*v47*v31/2 ; v56 = 2*v41*v42+2*v45*v23 ; v57 = 1/pow(v43,2) ; v58 = 1/pow(v21,5) ; v59 = 2*v46*v29+2*v28*v7 ; v60 = 1/pow(v16,5) ; v61 = 2*v34*v49+2*v3*v48 ; v62 = 1/pow(v25,5) ; v63 = pow(v4,3) ; return 2*k*(-(-v34*v50*v36*v20*v22/2-v49*v35*v36*v20*v22/2-v61*v15*v36*v20*v22/2+3*v15*v35*v50*v60*v20*v22/4-v61*v14*v36*v19*v22/2+3*v14*v35*v50*v60*v19*v22/4+v49*v17*v29*v22-v15*v50*v36*v29*v22/2+v34*v17*v46*v22-v15*v35*v36*v46*v22/2+v3*v7*v17*v22+v48*v28*v17*v22-v3*v9*v50*v36*v22/2-v28*v5*v50*v36*v22/2-v48*v9*v35*v36*v22/2-v7*v5*v35*v36*v22/2-v5*v9*v61*v36*v22/2+3*v5*v9*v35*v50*v60*v22/4-v49*v17*v20*v30*v31/2+v15*v50*v36*v20*v30*v31/4+v14*v50*v36*v19*v30*v31/4-v15*v17*v46*v30*v31/2-v48*v9*v17*v30*v31/2-v7*v5*v17*v30*v31/2+v5*v9*v50*v36*v30*v31/4-v34*v17*v20*v47*v31/2+v15*v35*v36*v20*v47*v31/4+v14*v35*v36*v19*v47*v31/4-v15*v17*v29*v47*v31/2-v3*v9*v17*v47*v31/2-v28*v5*v17*v47*v31/2+v5*v9*v35*v36*v47*v31/4-v15*v17*v59*v20*v31/2-v14*v17*v59*v19*v31/2-v5*v9*v17*v59*v31/2+3*v15*v17*v20*v47*v30*v58/4+3*v14*v17*v19*v47*v30*v58/4+3*v5*v9*v17*v47*v30*v58/4)*v42*v44+v45*v54*v44-v55*v41*v44+v23*((-v48*v26*v17+v3*v26*v17+v13*v14*v37*v17+v48*v24*v37*v17-v3*v24*v37*v17-3*v4*v5*v37*v17-3*v24*v13*v14*v62*v17+3*v63*v5*v62*v17+v5*v50*v26*v36/2+v3*v4*v50*v26*v36/2-v5*v35*v26*v36/2+v48*v4*v35*v26*v36/2-v13*v61*v14*v26*v36/2+v4*v5*v61*v26*v36/2+v4*v13*v14*v50*v37*v36/2-v24*v5*v50*v37*v36/2-v4*v13*v14*v35*v37*v36/2+v24*v5*v35*v37*v36/2+3*v13*v14*v35*v50*v26*v60/4-3*v4*v5*v35*v50*v26*v60/4)*v20*v22+(-v13*v15*v37*v17+v4*v49*v13*v37*v17-v4*v34*v13*v37*v17+v1*v5*v37*v17-v48*v1*v4*v37*v17+v3*v1*v4*v37*v17+3*v24*v13*v15*v62*v17-3*v1*v24*v5*v62*v17+v34*v13*v50*v26*v36/2-v3*v1*v50*v26*v36/2+v49*v13*v35*v26*v36/2-v48*v1*v35*v26*v36/2+v13*v61*v15*v26*v36/2-v1*v5*v61*v26*v36/2-v4*v13*v15*v50*v37*v36/2+v1*v4*v5*v50*v37*v36/2+v4*v13*v15*v35*v37*v36/2-v1*v4*v5*v35*v37*v36/2-3*v13*v15*v35*v50*v26*v60/4+3*v1*v5*v35*v50*v26*v60/4)*v19*v22+v53*v29*v22+v40*v46*v22+v7*v38*v22+v28*v51*v22+v9*(v49*v26*v17-v34*v26*v17+3*v4*v15*v37*v17-v1*v14*v37*v17-v24*v49*v37*v17+v24*v34*v37*v17-3*v63*v15*v62*v17+3*v1*v24*v14*v62*v17-v15*v50*v26*v36/2-v4*v34*v50*v26*v36/2+v15*v35*v26*v36/2-v4*v49*v35*v26*v36/2-v4*v61*v15*v26*v36/2+v1*v61*v14*v26*v36/2+v24*v15*v50*v37*v36/2-v1*v4*v14*v50*v37*v36/2-v24*v15*v35*v37*v36/2+v1*v4*v14*v35*v37*v36/2+3*v4*v15*v35*v50*v26*v60/4-3*v1*v14*v35*v50*v26*v60/4)*v22-v53*v20*v30*v31/2-v52*v19*v30*v31/2-v33*v46*v30*v31/2-v7*v27*v30*v31/2-v9*v51*v30*v31/2-v40*v20*v47*v31/2-v39*v19*v47*v31/2-v33*v29*v47*v31/2-v28*v27*v47*v31/2-v9*v38*v47*v31/2-v33*v59*v20*v31/2-v32*v59*v19*v31/2-v9*v27*v59*v31/2+3*v33*v20*v47*v30*v58/4+3*v32*v19*v47*v30*v58/4+3*v9*v27*v47*v30*v58/4)*v44+v55*v42*v56*v57-v23*v54*v56*v57)*rad_subtraction(atan2(v42,v23), eq)+2*k*(v23*v41*v44-v45*v42*v44)*(v23*v54*v44-v55*v42*v44) ; }

double HarmonicDihedralConstraintFunctions::hessianYbZc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65 ; v1 = -xb ; v2 = xc+v1 ; v3 = yb-ya ; v4 = xb-xa ; v5 = yc-yb ; v6 = v4*v5-v2*v3 ; v7 = -xc ; v8 = xd+v7 ; v9 = yd-yc ; v10 = v2*v9-v8*v5 ; v11 = -za ; v12 = zb+v11 ; v13 = zc-zb ; v14 = v2*v12-v4*v13 ; v15 = v3*v13-v5*v12 ; v16 = sqrt(pow(v6,2)+pow(v15,2)+pow(v14,2)) ; v17 = 1/v16 ; v18 = zd-zc ; v19 = v8*v13-v2*v18 ; v20 = v5*v18-v9*v13 ; v21 = sqrt(pow(v20,2)+pow(v19,2)+pow(v10,2)) ; v22 = 1/v21 ; v23 = v15*v17*v20*v22+v14*v17*v19*v22+v6*v10*v17*v22 ; v24 = pow(v5,2) ; v25 = pow(v13,2) ; v26 = sqrt(v25+v24+pow(v2,2)) ; v27 = 1/v26 ; v28 = v5*v15*v27*v17-v2*v14*v27*v17 ; v29 = xd+v1 ; v30 = yb-yd ; v31 = 2*v30*v20+2*v29*v19 ; v32 = 1/pow(v21,3) ; v33 = v2*v6*v27*v17-v13*v15*v27*v17 ; v34 = v13*v14*v27*v17-v5*v6*v27*v17 ; v35 = v1+xa ; v36 = 2*v3*v15+2*v35*v14 ; v37 = 1/pow(v16,3) ; v38 = 1/pow(v26,3) ; v39 = -v5*v13*v15*v38*v17 ; v40 = v3*v5*v27*v17-v35*v2*v27*v17+v39+v2*v13*v14*v38*v17-v5*v15*v36*v27*v37/2+v2*v14*v36*v27*v37/2 ; v41 = -v15*v27*v17 ; v42 = v41-v3*v13*v27*v17+v25*v15*v38*v17-v2*v6*v13*v38*v17+v13*v15*v36*v27*v37/2-v2*v6*v36*v27*v37/2 ; v43 = v14*v27*v17+v35*v13*v27*v17-v25*v14*v38*v17+v5*v6*v13*v38*v17-v13*v14*v36*v27*v37/2+v5*v6*v36*v27*v37/2 ; v44 = v43*v20*v22+v42*v19*v22+v29*v33*v22+v30*v34*v22+v10*v40*v22-v34*v20*v31*v32/2-v33*v19*v31*v32/2-v10*v28*v31*v32/2 ; v45 = v34*v20*v22+v33*v19*v22+v10*v28*v22 ; v46 = pow(v45,2)+pow(v23,2) ; v47 = 1/v46 ; v48 = v3*v17*v20*v22-v15*v36*v37*v20*v22/2+v35*v17*v19*v22-v14*v36*v37*v19*v22/2+v30*v15*v17*v22+v29*v14*v17*v22-v6*v10*v36*v37*v22/2-v15*v17*v20*v31*v32/2-v14*v17*v19*v31*v32/2-v6*v10*v17*v31*v32/2 ; v49 = zc-zd ; v50 = 2*v49*v20+2*v8*v10 ; v51 = v7+xa ; v52 = zc+v11 ; v53 = 2*v52*v15+2*v51*v6 ; v54 = v41+v5*v52*v27*v17+v24*v15*v38*v17-v2*v5*v14*v38*v17-v5*v15*v53*v27*v37/2+v2*v14*v53*v27*v37/2 ; v55 = -v52*v13*v27*v17+v51*v2*v27*v17+v39+v2*v5*v6*v38*v17+v13*v15*v53*v27*v37/2-v2*v6*v53*v27*v37/2 ; v56 = v6*v27*v17-v51*v5*v27*v17+v5*v13*v14*v38*v17-v24*v6*v38*v17-v13*v14*v53*v27*v37/2+v5*v6*v53*v27*v37/2 ; v57 = v56*v20*v22+v55*v19*v22+v34*v49*v22+v8*v28*v22+v10*v54*v22-v34*v20*v50*v32/2-v33*v19*v50*v32/2-v10*v28*v50*v32/2 ; v58 = v52*v17*v20*v22-v15*v53*v37*v20*v22/2-v14*v53*v37*v19*v22/2+v15*v17*v49*v22+v51*v10*v17*v22+v8*v6*v17*v22-v6*v10*v53*v37*v22/2-v15*v17*v20*v50*v32/2-v14*v17*v19*v50*v32/2-v6*v10*v17*v50*v32/2 ; v59 = 2*v44*v45+2*v48*v23 ; v60 = 1/pow(v46,2) ; v61 = 1/pow(v21,5) ; v62 = 2*v20+2*v30*v49 ; v63 = 1/pow(v16,5) ; v64 = 2*v15+2*v3*v52 ; v65 = 1/pow(v26,5) ; return 2*k*(-(v17*v20*v22-v3*v53*v37*v20*v22/2-v52*v36*v37*v20*v22/2-v15*v64*v37*v20*v22/2+3*v15*v36*v53*v63*v20*v22/4-v35*v53*v37*v19*v22/2-v14*v64*v37*v19*v22/2+3*v14*v36*v53*v63*v19*v22/4+v3*v17*v49*v22-v15*v36*v37*v49*v22/2+v15*v17*v22+v30*v52*v17*v22-v30*v15*v53*v37*v22/2-v29*v14*v53*v37*v22/2-v51*v10*v36*v37*v22/2-v8*v6*v36*v37*v22/2-v6*v10*v64*v37*v22/2+3*v6*v10*v36*v53*v63*v22/4-v3*v17*v20*v50*v32/2+v15*v36*v37*v20*v50*v32/4-v35*v17*v19*v50*v32/2+v14*v36*v37*v19*v50*v32/4-v30*v15*v17*v50*v32/2-v29*v14*v17*v50*v32/2+v6*v10*v36*v37*v50*v32/4-v52*v17*v20*v31*v32/2+v15*v53*v37*v20*v31*v32/4+v14*v53*v37*v19*v31*v32/4-v15*v17*v49*v31*v32/2-v51*v10*v17*v31*v32/2-v8*v6*v17*v31*v32/2+v6*v10*v53*v37*v31*v32/4-v15*v17*v20*v62*v32/2-v14*v17*v19*v62*v32/2-v6*v10*v17*v62*v32/2+3*v15*v17*v20*v31*v50*v61/4+3*v14*v17*v19*v31*v50*v61/4+3*v6*v10*v17*v31*v50*v61/4)*v45*v47-v58*v44*v47+v48*v57*v47+v23*((v5*v14*v38*v17-v6*v13*v38*v17+v51*v5*v13*v38*v17+v35*v5*v13*v38*v17-3*v5*v25*v14*v65*v17+3*v24*v6*v13*v65*v17-v14*v53*v27*v37/2-v35*v13*v53*v27*v37/2-v6*v36*v27*v37/2+v51*v5*v36*v27*v37/2-v13*v14*v64*v27*v37/2+v5*v6*v64*v27*v37/2+v25*v14*v53*v38*v37/2-v5*v6*v13*v53*v38*v37/2-v5*v13*v14*v36*v38*v37/2+v24*v6*v36*v38*v37/2+3*v13*v14*v36*v53*v27*v63/4-3*v5*v6*v36*v53*v27*v63/4)*v20*v22+(-v13*v27*v17-v52*v27*v17+v52*v25*v38*v17-v5*v15*v38*v17-v3*v5*v13*v38*v17-v51*v2*v13*v38*v17+3*v5*v25*v15*v65*v17-3*v2*v5*v6*v13*v65*v17+v15*v53*v27*v37/2+v3*v13*v53*v27*v37/2+v52*v13*v36*v27*v37/2-v51*v2*v36*v27*v37/2+v13*v15*v64*v27*v37/2-v2*v6*v64*v27*v37/2-v25*v15*v53*v38*v37/2+v2*v6*v13*v53*v38*v37/2+v5*v13*v15*v36*v38*v37/2-v2*v5*v6*v36*v38*v37/2-3*v13*v15*v36*v53*v27*v63/4+3*v2*v6*v36*v53*v27*v63/4)*v19*v22+v43*v49*v22+v34*v22+v29*v55*v22+v30*v56*v22+v8*v40*v22+v10*(v5*v27*v17-v3*v27*v17+v13*v15*v38*v17-v5*v52*v13*v38*v17+v3*v24*v38*v17-v35*v2*v5*v38*v17-3*v24*v13*v15*v65*v17+3*v2*v5*v13*v14*v65*v17-v3*v5*v53*v27*v37/2+v35*v2*v53*v27*v37/2+v15*v36*v27*v37/2-v5*v52*v36*v27*v37/2-v5*v15*v64*v27*v37/2+v2*v14*v64*v27*v37/2+v5*v13*v15*v53*v38*v37/2-v2*v13*v14*v53*v38*v37/2-v24*v15*v36*v38*v37/2+v2*v5*v14*v36*v38*v37/2+3*v5*v15*v36*v53*v27*v63/4-3*v2*v14*v36*v53*v27*v63/4)*v22-v43*v20*v50*v32/2-v42*v19*v50*v32/2-v29*v33*v50*v32/2-v30*v34*v50*v32/2-v10*v40*v50*v32/2-v56*v20*v31*v32/2-v55*v19*v31*v32/2-v34*v49*v31*v32/2-v8*v28*v31*v32/2-v10*v54*v31*v32/2-v34*v20*v62*v32/2-v33*v19*v62*v32/2-v10*v28*v62*v32/2+3*v34*v20*v31*v50*v61/4+3*v33*v19*v31*v50*v61/4+3*v10*v28*v31*v50*v61/4)*v47+v58*v45*v59*v60-v23*v57*v59*v60)*rad_subtraction(atan2(v45,v23), eq)+2*k*(v23*v44*v47-v48*v45*v47)*(v23*v57*v47-v58*v45*v47) ; }

double HarmonicDihedralConstraintFunctions::hessianYbXd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = xc-xb ; v5 = -yc ; v6 = yd+v5 ; v7 = v4*v6-v2*v3 ; v8 = -za ; v9 = zb+v8 ; v10 = xb-xa ; v11 = zc-zb ; v12 = v4*v9-v10*v11 ; v13 = pow(v3,2) ; v14 = sqrt(pow(v4,2)+v13+pow(v11,2)) ; v15 = 1/v14 ; v16 = yb-ya ; v17 = v10*v3-v4*v16 ; v18 = v16*v11-v3*v9 ; v19 = sqrt(pow(v18,2)+pow(v17,2)+pow(v12,2)) ; v20 = 1/v19 ; v21 = v3*v18*v15*v20-v4*v12*v15*v20 ; v22 = v5+yb ; v23 = zd-zc ; v24 = v2*v11-v4*v23 ; v25 = 2*v11*v24+2*v22*v7 ; v26 = v3*v23-v6*v11 ; v27 = sqrt(pow(v7,2)+pow(v26,2)+pow(v24,2)) ; v28 = 1/pow(v27,3) ; v29 = v4*v17*v15*v20-v11*v18*v15*v20 ; v30 = v11*v12*v15*v20-v3*v17*v15*v20 ; v31 = 1/v27 ; v32 = v11*v29*v31+v22*v21*v31-v30*v26*v25*v28/2-v29*v24*v25*v28/2-v7*v21*v25*v28/2 ; v33 = v18*v20*v26*v31+v12*v20*v24*v31+v17*v7*v20*v31 ; v34 = v30*v26*v31+v29*v24*v31+v7*v21*v31 ; v35 = pow(v34,2)+pow(v33,2) ; v36 = 1/v35 ; v37 = v11*v12*v20*v31+v22*v17*v20*v31-v18*v20*v26*v25*v28/2-v12*v20*v24*v25*v28/2-v17*v7*v20*v25*v28/2 ; v38 = zc-zd ; v39 = 2*v38*v26+2*v2*v7 ; v40 = v1+xa ; v41 = zc+v8 ; v42 = 2*v41*v18+2*v40*v17 ; v43 = 1/pow(v19,3) ; v44 = 1/pow(v14,3) ; v45 = -v18*v15*v20+v3*v41*v15*v20+v13*v18*v44*v20-v4*v3*v12*v44*v20-v3*v18*v42*v15*v43/2+v4*v12*v42*v15*v43/2 ; v46 = -v41*v11*v15*v20+v40*v4*v15*v20-v3*v11*v18*v44*v20+v4*v3*v17*v44*v20+v11*v18*v42*v15*v43/2-v4*v17*v42*v15*v43/2 ; v47 = v17*v15*v20-v40*v3*v15*v20+v3*v11*v12*v44*v20-v13*v17*v44*v20-v11*v12*v42*v15*v43/2+v3*v17*v42*v15*v43/2 ; v48 = v47*v26*v31+v46*v24*v31+v30*v38*v31+v2*v21*v31+v7*v45*v31-v30*v26*v39*v28/2-v29*v24*v39*v28/2-v7*v21*v39*v28/2 ; v49 = v41*v20*v26*v31-v18*v42*v43*v26*v31/2-v12*v42*v43*v24*v31/2+v18*v20*v38*v31+v40*v7*v20*v31+v2*v17*v20*v31-v17*v7*v42*v43*v31/2-v18*v20*v26*v39*v28/2-v12*v20*v24*v39*v28/2-v17*v7*v20*v39*v28/2 ; v50 = 2*v32*v34+2*v37*v33 ; v51 = 1/pow(v35,2) ; v52 = 1/pow(v27,5) ; v53 = 2*v7+2*v2*v22 ; return 2*k*(-(v17*v20*v31+v40*v22*v20*v31-v11*v12*v42*v43*v31/2-v22*v17*v42*v43*v31/2-v11*v12*v20*v39*v28/2-v22*v17*v20*v39*v28/2-v41*v20*v26*v25*v28/2+v18*v42*v43*v26*v25*v28/4+v12*v42*v43*v24*v25*v28/4-v18*v20*v38*v25*v28/2-v40*v7*v20*v25*v28/2-v2*v17*v20*v25*v28/2+v17*v7*v42*v43*v25*v28/4-v53*v18*v20*v26*v28/2-v53*v12*v20*v24*v28/2-v17*v7*v53*v20*v28/2+3*v18*v20*v26*v25*v39*v52/4+3*v12*v20*v24*v25*v39*v52/4+3*v17*v7*v20*v25*v39*v52/4)*v34*v36+v37*v48*v36+(v21*v31+v22*v45*v31+v11*v46*v31-v11*v29*v39*v28/2-v22*v21*v39*v28/2-v47*v26*v25*v28/2-v46*v24*v25*v28/2-v30*v38*v25*v28/2-v2*v21*v25*v28/2-v7*v45*v25*v28/2-v53*v30*v26*v28/2-v53*v29*v24*v28/2-v7*v53*v21*v28/2+3*v30*v26*v25*v39*v52/4+3*v29*v24*v25*v39*v52/4+3*v7*v21*v25*v39*v52/4)*v33*v36-v32*v49*v36+v49*v34*v50*v51-v33*v48*v50*v51)*rad_subtraction(atan2(v34,v33), eq)+2*k*(v32*v33*v36-v37*v34*v36)*(v33*v48*v36-v49*v34*v36) ; }

double HarmonicDihedralConstraintFunctions::hessianYbYd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = xc-xb ; v5 = yd-yc ; v6 = v4*v5-v2*v3 ; v7 = -za ; v8 = zb+v7 ; v9 = xb-xa ; v10 = zc-zb ; v11 = v4*v8-v9*v10 ; v12 = pow(v3,2) ; v13 = sqrt(pow(v4,2)+v12+pow(v10,2)) ; v14 = 1/v13 ; v15 = yb-ya ; v16 = v9*v3-v4*v15 ; v17 = v15*v10-v3*v8 ; v18 = sqrt(pow(v17,2)+pow(v16,2)+pow(v11,2)) ; v19 = 1/v18 ; v20 = v3*v17*v14*v19-v4*v11*v14*v19 ; v21 = -zc ; v22 = v21+zb ; v23 = zd+v21 ; v24 = v3*v23-v5*v10 ; v25 = 2*v22*v24+2*v4*v6 ; v26 = v2*v10-v4*v23 ; v27 = sqrt(pow(v6,2)+pow(v26,2)+pow(v24,2)) ; v28 = 1/pow(v27,3) ; v29 = v4*v16*v14*v19-v10*v17*v14*v19 ; v30 = v10*v11*v14*v19-v3*v16*v14*v19 ; v31 = 1/v27 ; v32 = v4*v20*v31+v22*v30*v31-v30*v24*v25*v28/2-v29*v26*v25*v28/2-v6*v20*v25*v28/2 ; v33 = v17*v19*v24*v31+v11*v19*v26*v31+v16*v6*v19*v31 ; v34 = v30*v24*v31+v29*v26*v31+v6*v20*v31 ; v35 = pow(v34,2)+pow(v33,2) ; v36 = 1/v35 ; v37 = v22*v17*v19*v31+v4*v16*v19*v31-v17*v19*v24*v25*v28/2-v11*v19*v26*v25*v28/2-v16*v6*v19*v25*v28/2 ; v38 = zc-zd ; v39 = 2*v38*v24+2*v2*v6 ; v40 = v1+xa ; v41 = zc+v7 ; v42 = 2*v41*v17+2*v40*v16 ; v43 = 1/pow(v18,3) ; v44 = 1/pow(v13,3) ; v45 = -v17*v14*v19+v3*v41*v14*v19+v12*v17*v44*v19-v4*v3*v11*v44*v19-v3*v17*v42*v14*v43/2+v4*v11*v42*v14*v43/2 ; v46 = -v41*v10*v14*v19+v40*v4*v14*v19-v3*v10*v17*v44*v19+v4*v3*v16*v44*v19+v10*v17*v42*v14*v43/2-v4*v16*v42*v14*v43/2 ; v47 = v16*v14*v19-v40*v3*v14*v19+v3*v10*v11*v44*v19-v12*v16*v44*v19-v10*v11*v42*v14*v43/2+v3*v16*v42*v14*v43/2 ; v48 = v47*v24*v31+v46*v26*v31+v30*v38*v31+v2*v20*v31+v6*v45*v31-v30*v24*v39*v28/2-v29*v26*v39*v28/2-v6*v20*v39*v28/2 ; v49 = v41*v19*v24*v31-v17*v42*v43*v24*v31/2-v11*v42*v43*v26*v31/2+v17*v19*v38*v31+v40*v6*v19*v31+v2*v16*v19*v31-v16*v6*v42*v43*v31/2-v17*v19*v24*v39*v28/2-v11*v19*v26*v39*v28/2-v16*v6*v19*v39*v28/2 ; v50 = 2*v32*v34+2*v37*v33 ; v51 = 1/pow(v35,2) ; v52 = 1/pow(v27,5) ; v53 = 2*v22*v38+2*v4*v2 ; return 2*k*(-(v22*v41*v19*v31+v40*v4*v19*v31-v22*v17*v42*v43*v31/2-v4*v16*v42*v43*v31/2-v22*v17*v19*v39*v28/2-v4*v16*v19*v39*v28/2-v41*v19*v24*v25*v28/2+v17*v42*v43*v24*v25*v28/4+v11*v42*v43*v26*v25*v28/4-v17*v19*v38*v25*v28/2-v40*v6*v19*v25*v28/2-v2*v16*v19*v25*v28/2+v16*v6*v42*v43*v25*v28/4-v17*v19*v53*v24*v28/2-v11*v19*v53*v26*v28/2-v16*v6*v19*v53*v28/2+3*v17*v19*v24*v25*v39*v52/4+3*v11*v19*v26*v25*v39*v52/4+3*v16*v6*v19*v25*v39*v52/4)*v34*v36+v37*v48*v36+(v4*v45*v31+v22*v47*v31-v4*v20*v39*v28/2-v22*v30*v39*v28/2-v47*v24*v25*v28/2-v46*v26*v25*v28/2-v30*v38*v25*v28/2-v2*v20*v25*v28/2-v6*v45*v25*v28/2-v30*v53*v24*v28/2-v29*v53*v26*v28/2-v6*v20*v53*v28/2+3*v30*v24*v25*v39*v52/4+3*v29*v26*v25*v39*v52/4+3*v6*v20*v25*v39*v52/4)*v33*v36-v32*v49*v36+v49*v34*v50*v51-v33*v48*v50*v51)*rad_subtraction(atan2(v34,v33), eq)+2*k*(v32*v33*v36-v37*v34*v36)*(v33*v48*v36-v49*v34*v36) ; }

double HarmonicDihedralConstraintFunctions::hessianYbZd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = xc-xb ; v5 = yd-yc ; v6 = v4*v5-v2*v3 ; v7 = -za ; v8 = zb+v7 ; v9 = xb-xa ; v10 = zc-zb ; v11 = v4*v8-v9*v10 ; v12 = pow(v3,2) ; v13 = sqrt(pow(v4,2)+v12+pow(v10,2)) ; v14 = 1/v13 ; v15 = yb-ya ; v16 = v9*v3-v4*v15 ; v17 = v15*v10-v3*v8 ; v18 = sqrt(pow(v17,2)+pow(v16,2)+pow(v11,2)) ; v19 = 1/v18 ; v20 = v3*v17*v14*v19-v4*v11*v14*v19 ; v21 = v1+xb ; v22 = zd-zc ; v23 = v2*v10-v4*v22 ; v24 = v3*v22-v5*v10 ; v25 = 2*v3*v24+2*v21*v23 ; v26 = sqrt(pow(v6,2)+pow(v24,2)+pow(v23,2)) ; v27 = 1/pow(v26,3) ; v28 = v4*v16*v14*v19-v10*v17*v14*v19 ; v29 = v10*v11*v14*v19-v3*v16*v14*v19 ; v30 = 1/v26 ; v31 = v21*v28*v30+v3*v29*v30-v29*v24*v25*v27/2-v28*v23*v25*v27/2-v6*v20*v25*v27/2 ; v32 = v17*v19*v24*v30+v11*v19*v23*v30+v16*v6*v19*v30 ; v33 = v29*v24*v30+v28*v23*v30+v6*v20*v30 ; v34 = pow(v33,2)+pow(v32,2) ; v35 = 1/v34 ; v36 = v3*v17*v19*v30+v21*v11*v19*v30-v17*v19*v24*v25*v27/2-v11*v19*v23*v25*v27/2-v16*v6*v19*v25*v27/2 ; v37 = zc-zd ; v38 = 2*v37*v24+2*v2*v6 ; v39 = v1+xa ; v40 = zc+v7 ; v41 = 2*v40*v17+2*v39*v16 ; v42 = 1/pow(v18,3) ; v43 = 1/pow(v13,3) ; v44 = -v17*v14*v19+v3*v40*v14*v19+v12*v17*v43*v19-v4*v3*v11*v43*v19-v3*v17*v41*v14*v42/2+v4*v11*v41*v14*v42/2 ; v45 = -v40*v10*v14*v19+v39*v4*v14*v19-v3*v10*v17*v43*v19+v4*v3*v16*v43*v19+v10*v17*v41*v14*v42/2-v4*v16*v41*v14*v42/2 ; v46 = v16*v14*v19-v39*v3*v14*v19+v3*v10*v11*v43*v19-v12*v16*v43*v19-v10*v11*v41*v14*v42/2+v3*v16*v41*v14*v42/2 ; v47 = v46*v24*v30+v45*v23*v30+v29*v37*v30+v2*v20*v30+v6*v44*v30-v29*v24*v38*v27/2-v28*v23*v38*v27/2-v6*v20*v38*v27/2 ; v48 = v40*v19*v24*v30-v17*v41*v42*v24*v30/2-v11*v41*v42*v23*v30/2+v17*v19*v37*v30+v39*v6*v19*v30+v2*v16*v19*v30-v16*v6*v41*v42*v30/2-v17*v19*v24*v38*v27/2-v11*v19*v23*v38*v27/2-v16*v6*v19*v38*v27/2 ; v49 = 2*v31*v33+2*v36*v32 ; v50 = 1/pow(v34,2) ; v51 = 1/pow(v26,5) ; v52 = 2*v3*v37-2*v24 ; return 2*k*(-(-v17*v19*v30+v3*v40*v19*v30-v3*v17*v41*v42*v30/2-v21*v11*v41*v42*v30/2-v3*v17*v19*v38*v27/2-v21*v11*v19*v38*v27/2-v40*v19*v24*v25*v27/2+v17*v41*v42*v24*v25*v27/4+v11*v41*v42*v23*v25*v27/4-v17*v19*v37*v25*v27/2-v39*v6*v19*v25*v27/2-v2*v16*v19*v25*v27/2+v16*v6*v41*v42*v25*v27/4-v17*v19*v24*v52*v27/2-v11*v19*v23*v52*v27/2-v16*v6*v19*v52*v27/2+3*v17*v19*v24*v25*v38*v51/4+3*v11*v19*v23*v25*v38*v51/4+3*v16*v6*v19*v25*v38*v51/4)*v33*v35+v36*v47*v35+(-v29*v30+v21*v45*v30+v3*v46*v30-v21*v28*v38*v27/2-v3*v29*v38*v27/2-v46*v24*v25*v27/2-v45*v23*v25*v27/2-v29*v37*v25*v27/2-v2*v20*v25*v27/2-v6*v44*v25*v27/2-v29*v24*v52*v27/2-v28*v23*v52*v27/2-v6*v20*v52*v27/2+3*v29*v24*v25*v38*v51/4+3*v28*v23*v25*v38*v51/4+3*v6*v20*v25*v38*v51/4)*v32*v35-v31*v48*v35+v48*v33*v49*v50-v32*v47*v49*v50)*rad_subtraction(atan2(v33,v32), eq)+2*k*(v31*v32*v35-v36*v33*v35)*(v32*v47*v35-v48*v33*v35) ; }

double HarmonicDihedralConstraintFunctions::hessianZbZb(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54 ; v1 = xc-xb ; v2 = yb-ya ; v3 = -xa ; v4 = xb+v3 ; v5 = yc-yb ; v6 = v4*v5-v1*v2 ; v7 = xd-xc ; v8 = -yc ; v9 = yd+v8 ; v10 = v1*v9-v7*v5 ; v11 = zb-za ; v12 = zc-zb ; v13 = v1*v11-v4*v12 ; v14 = v2*v12-v5*v11 ; v15 = sqrt(pow(v6,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = zd-zc ; v18 = v7*v12-v1*v17 ; v19 = v5*v17-v9*v12 ; v20 = sqrt(pow(v19,2)+pow(v18,2)+pow(v10,2)) ; v21 = 1/v20 ; v22 = v14*v16*v19*v21+v13*v16*v18*v21+v6*v10*v16*v21 ; v23 = pow(v12,2) ; v24 = sqrt(pow(v5,2)+v23+pow(v1,2)) ; v25 = 1/v24 ; v26 = v5*v14*v25*v16-v1*v13*v25*v16 ; v27 = xc-xd ; v28 = 2*v9*v19+2*v27*v18 ; v29 = 1/pow(v20,3) ; v30 = v1*v6*v25*v16-v12*v14*v25*v16 ; v31 = v12*v13*v25*v16-v5*v6*v25*v16 ; v32 = xc+v3 ; v33 = v8+ya ; v34 = 2*v33*v14+2*v32*v13 ; v35 = 1/pow(v15,3) ; v36 = 1/pow(v24,3) ; v37 = v33*v5*v25*v16-v32*v1*v25*v16+v5*v12*v14*v36*v16-v1*v12*v13*v36*v16-v5*v14*v34*v25*v35/2+v1*v13*v34*v25*v35/2 ; v38 = v14*v25*v16-v33*v12*v25*v16-v23*v14*v36*v16+v1*v6*v12*v36*v16+v12*v14*v34*v25*v35/2-v1*v6*v34*v25*v35/2 ; v39 = -v13*v25*v16+v32*v12*v25*v16+v23*v13*v36*v16-v5*v6*v12*v36*v16-v12*v13*v34*v25*v35/2+v5*v6*v34*v25*v35/2 ; v40 = v39*v19*v21+v38*v18*v21+v27*v30*v21+v9*v31*v21+v10*v37*v21-v31*v19*v28*v29/2-v30*v18*v28*v29/2-v10*v26*v28*v29/2 ; v41 = v31*v19*v21+v30*v18*v21+v10*v26*v21 ; v42 = pow(v41,2)+pow(v22,2) ; v43 = 1/v42 ; v44 = v33*v16*v19*v21-v14*v34*v35*v19*v21/2+v32*v16*v18*v21-v13*v34*v35*v18*v21/2+v9*v14*v16*v21+v27*v13*v16*v21-v6*v10*v34*v35*v21/2-v14*v16*v19*v28*v29/2-v13*v16*v18*v28*v29/2-v6*v10*v16*v28*v29/2 ; v45 = 2*v40*v41+2*v44*v22 ; v46 = 1/pow(v42,2) ; v47 = pow(v28,2) ; v48 = 1/pow(v20,5) ; v49 = 2*pow(v9,2)+2*pow(v27,2) ; v50 = pow(v34,2) ; v51 = 1/pow(v15,5) ; v52 = 2*pow(v33,2)+2*pow(v32,2) ; v53 = 1/pow(v24,5) ; v54 = pow(v12,3) ; return 2*pow(v22*v40*v43-v44*v41*v43,2)*k+2*k*(-(-v33*v34*v35*v19*v21-v52*v14*v35*v19*v21/2+3*v14*v50*v51*v19*v21/4-v32*v34*v35*v18*v21-v52*v13*v35*v18*v21/2+3*v13*v50*v51*v18*v21/4+2*v33*v9*v16*v21+2*v32*v27*v16*v21-v9*v14*v34*v35*v21-v27*v13*v34*v35*v21-v52*v6*v10*v35*v21/2+3*v6*v10*v50*v51*v21/4-v33*v16*v19*v28*v29+v14*v34*v35*v19*v28*v29/2-v32*v16*v18*v28*v29+v13*v34*v35*v18*v28*v29/2-v9*v14*v16*v28*v29-v27*v13*v16*v28*v29+v6*v10*v34*v35*v28*v29/2-v49*v14*v16*v19*v29/2-v49*v13*v16*v18*v29/2-v6*v10*v49*v16*v29/2+3*v14*v16*v19*v47*v48/4+3*v13*v16*v18*v47*v48/4+3*v6*v10*v16*v47*v48/4)*v41*v43+v22*((-2*v32*v25*v16+2*v32*v23*v36*v16-3*v12*v13*v36*v16+v5*v6*v36*v16-3*v5*v6*v23*v53*v16+3*v54*v13*v53*v16+v13*v34*v25*v35-v32*v12*v34*v25*v35-v52*v12*v13*v25*v35/2+v52*v5*v6*v25*v35/2-v23*v13*v34*v36*v35+v5*v6*v12*v34*v36*v35+3*v12*v13*v50*v25*v51/4-3*v5*v6*v50*v25*v51/4)*v19*v21+(2*v33*v25*v16-2*v33*v23*v36*v16+3*v12*v14*v36*v16-v1*v6*v36*v16+3*v1*v6*v23*v53*v16-3*v54*v14*v53*v16-v14*v34*v25*v35+v33*v12*v34*v25*v35+v52*v12*v14*v25*v35/2-v1*v52*v6*v25*v35/2+v23*v14*v34*v36*v35-v1*v6*v12*v34*v36*v35-3*v12*v14*v50*v25*v51/4+3*v1*v6*v50*v25*v51/4)*v18*v21+2*v27*v38*v21+2*v9*v39*v21+v10*(-v5*v14*v36*v16+v1*v13*v36*v16+2*v33*v5*v12*v36*v16-2*v32*v1*v12*v36*v16+3*v5*v23*v14*v53*v16-3*v1*v23*v13*v53*v16-v33*v5*v34*v25*v35+v32*v1*v34*v25*v35-v52*v5*v14*v25*v35/2+v1*v52*v13*v25*v35/2-v5*v12*v14*v34*v36*v35+v1*v12*v13*v34*v36*v35+3*v5*v14*v50*v25*v51/4-3*v1*v13*v50*v25*v51/4)*v21-v39*v19*v28*v29-v38*v18*v28*v29-v27*v30*v28*v29-v9*v31*v28*v29-v10*v37*v28*v29-v49*v31*v19*v29/2-v49*v30*v18*v29/2-v10*v49*v26*v29/2+3*v31*v19*v47*v48/4+3*v30*v18*v47*v48/4+3*v10*v26*v47*v48/4)*v43+v44*v41*v45*v46-v22*v40*v45*v46)*rad_subtraction(atan2(v41,v22), eq) ; }

double HarmonicDihedralConstraintFunctions::hessianZbXc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65 ; v1 = xc-xb ; v2 = yb-ya ; v3 = -xa ; v4 = xb+v3 ; v5 = -yb ; v6 = yc+v5 ; v7 = v4*v6-v1*v2 ; v8 = xd-xc ; v9 = -yc ; v10 = yd+v9 ; v11 = v1*v10-v8*v6 ; v12 = zb-za ; v13 = zc-zb ; v14 = v1*v12-v4*v13 ; v15 = v2*v13-v6*v12 ; v16 = sqrt(pow(v7,2)+pow(v15,2)+pow(v14,2)) ; v17 = 1/v16 ; v18 = zd-zc ; v19 = v8*v13-v1*v18 ; v20 = v6*v18-v10*v13 ; v21 = sqrt(pow(v20,2)+pow(v19,2)+pow(v11,2)) ; v22 = 1/v21 ; v23 = v15*v17*v20*v22+v14*v17*v19*v22+v7*v11*v17*v22 ; v24 = pow(v1,2) ; v25 = pow(v13,2) ; v26 = sqrt(pow(v6,2)+v25+v24) ; v27 = 1/v26 ; v28 = v6*v15*v27*v17-v1*v14*v27*v17 ; v29 = yd+v5 ; v30 = zb-zd ; v31 = 2*v30*v19+2*v29*v11 ; v32 = 1/pow(v21,3) ; v33 = v1*v7*v27*v17-v13*v15*v27*v17 ; v34 = v13*v14*v27*v17-v6*v7*v27*v17 ; v35 = v5+ya ; v36 = 2*v12*v14+2*v35*v7 ; v37 = 1/pow(v16,3) ; v38 = 1/pow(v26,3) ; v39 = -v14*v27*v17 ; v40 = v39-v1*v12*v27*v17-v1*v6*v15*v38*v17+v24*v14*v38*v17-v6*v15*v36*v27*v37/2+v1*v14*v36*v27*v37/2 ; v41 = v7*v27*v17+v1*v35*v27*v17+v1*v13*v15*v38*v17-v24*v7*v38*v17+v13*v15*v36*v27*v37/2-v1*v7*v36*v27*v37/2 ; v42 = -v1*v13*v14*v38*v17 ; v43 = v12*v13*v27*v17-v35*v6*v27*v17+v42+v1*v6*v7*v38*v17-v13*v14*v36*v27*v37/2+v6*v7*v36*v27*v37/2 ; v44 = v43*v20*v22+v41*v19*v22+v33*v30*v22+v29*v28*v22+v11*v40*v22-v34*v20*v31*v32/2-v33*v19*v31*v32/2-v11*v28*v31*v32/2 ; v45 = v34*v20*v22+v33*v19*v22+v11*v28*v22 ; v46 = pow(v45,2)+pow(v23,2) ; v47 = 1/v46 ; v48 = -v15*v36*v37*v20*v22/2+v12*v17*v19*v22-v14*v36*v37*v19*v22/2+v14*v17*v30*v22+v35*v11*v17*v22+v7*v29*v17*v22-v7*v11*v36*v37*v22/2-v15*v17*v20*v31*v32/2-v14*v17*v19*v31*v32/2-v7*v11*v17*v31*v32/2 ; v49 = xc-xd ; v50 = 2*v10*v20+2*v49*v19 ; v51 = xc+v3 ; v52 = v9+ya ; v53 = 2*v52*v15+2*v51*v14 ; v54 = v52*v6*v27*v17-v51*v1*v27*v17+v6*v13*v15*v38*v17+v42-v6*v15*v53*v27*v37/2+v1*v14*v53*v27*v37/2 ; v55 = v15*v27*v17-v52*v13*v27*v17-v25*v15*v38*v17+v1*v7*v13*v38*v17+v13*v15*v53*v27*v37/2-v1*v7*v53*v27*v37/2 ; v56 = v39+v51*v13*v27*v17+v25*v14*v38*v17-v6*v7*v13*v38*v17-v13*v14*v53*v27*v37/2+v6*v7*v53*v27*v37/2 ; v57 = v56*v20*v22+v55*v19*v22+v49*v33*v22+v10*v34*v22+v11*v54*v22-v34*v20*v50*v32/2-v33*v19*v50*v32/2-v11*v28*v50*v32/2 ; v58 = v52*v17*v20*v22-v15*v53*v37*v20*v22/2+v51*v17*v19*v22-v14*v53*v37*v19*v22/2+v10*v15*v17*v22+v49*v14*v17*v22-v7*v11*v53*v37*v22/2-v15*v17*v20*v50*v32/2-v14*v17*v19*v50*v32/2-v7*v11*v17*v50*v32/2 ; v59 = 2*v44*v45+2*v48*v23 ; v60 = 1/pow(v46,2) ; v61 = 1/pow(v21,5) ; v62 = 2*v19+2*v49*v30 ; v63 = 1/pow(v16,5) ; v64 = 2*v14+2*v51*v12 ; v65 = 1/pow(v26,5) ; return 2*k*(-(-v52*v36*v37*v20*v22/2-v15*v64*v37*v20*v22/2+3*v15*v36*v53*v63*v20*v22/4+v17*v19*v22-v12*v53*v37*v19*v22/2-v51*v36*v37*v19*v22/2-v14*v64*v37*v19*v22/2+3*v14*v36*v53*v63*v19*v22/4+v51*v17*v30*v22-v14*v53*v37*v30*v22/2+v14*v17*v22+v49*v12*v17*v22-v35*v11*v53*v37*v22/2-v7*v29*v53*v37*v22/2-v10*v15*v36*v37*v22/2-v49*v14*v36*v37*v22/2-v7*v11*v64*v37*v22/2+3*v7*v11*v36*v53*v63*v22/4+v15*v36*v37*v20*v50*v32/4-v12*v17*v19*v50*v32/2+v14*v36*v37*v19*v50*v32/4-v14*v17*v30*v50*v32/2-v35*v11*v17*v50*v32/2-v7*v29*v17*v50*v32/2+v7*v11*v36*v37*v50*v32/4-v52*v17*v20*v31*v32/2+v15*v53*v37*v20*v31*v32/4-v51*v17*v19*v31*v32/2+v14*v53*v37*v19*v31*v32/4-v10*v15*v17*v31*v32/2-v49*v14*v17*v31*v32/2+v7*v11*v53*v37*v31*v32/4-v15*v17*v20*v62*v32/2-v14*v17*v19*v62*v32/2-v7*v11*v17*v62*v32/2+3*v15*v17*v20*v31*v50*v61/4+3*v14*v17*v19*v31*v50*v61/4+3*v7*v11*v17*v31*v50*v61/4)*v45*v47+v48*v57*v47-v58*v44*v47+v23*((v13*v27*v17-v12*v27*v17+v12*v25*v38*v17+v1*v14*v38*v17-v35*v6*v13*v38*v17-v51*v1*v13*v38*v17-3*v1*v25*v14*v65*v17+3*v1*v6*v7*v13*v65*v17-v12*v13*v53*v27*v37/2+v35*v6*v53*v27*v37/2+v14*v36*v27*v37/2-v51*v13*v36*v27*v37/2-v13*v14*v64*v27*v37/2+v6*v7*v64*v27*v37/2+v1*v13*v14*v53*v38*v37/2-v1*v6*v7*v53*v38*v37/2-v25*v14*v36*v38*v37/2+v6*v7*v13*v36*v38*v37/2+3*v13*v14*v36*v53*v27*v63/4-3*v6*v7*v36*v53*v27*v63/4)*v20*v22+(-v1*v15*v38*v17+v7*v13*v38*v17+v1*v52*v13*v38*v17+v1*v35*v13*v38*v17+3*v1*v25*v15*v65*v17-3*v24*v7*v13*v65*v17-v7*v53*v27*v37/2-v1*v35*v53*v27*v37/2-v15*v36*v27*v37/2+v52*v13*v36*v27*v37/2+v13*v15*v64*v27*v37/2-v1*v7*v64*v27*v37/2-v1*v13*v15*v53*v38*v37/2+v24*v7*v53*v38*v37/2+v25*v15*v36*v38*v37/2-v1*v7*v13*v36*v38*v37/2-3*v13*v15*v36*v53*v27*v63/4+3*v1*v7*v36*v53*v27*v63/4)*v19*v22+v55*v30*v22+v33*v22+v10*v43*v22+v49*v41*v22+v29*v54*v22+v11*(-v1*v27*v17-v51*v27*v17-v13*v14*v38*v17-v1*v12*v13*v38*v17-v1*v52*v6*v38*v17+v51*v24*v38*v17-3*v1*v6*v13*v15*v65*v17+3*v24*v13*v14*v65*v17+v14*v53*v27*v37/2+v1*v12*v53*v27*v37/2-v52*v6*v36*v27*v37/2+v51*v1*v36*v27*v37/2-v6*v15*v64*v27*v37/2+v1*v14*v64*v27*v37/2+v1*v6*v15*v53*v38*v37/2-v24*v14*v53*v38*v37/2-v6*v13*v15*v36*v38*v37/2+v1*v13*v14*v36*v38*v37/2+3*v6*v15*v36*v53*v27*v63/4-3*v1*v14*v36*v53*v27*v63/4)*v22-v43*v20*v50*v32/2-v41*v19*v50*v32/2-v33*v30*v50*v32/2-v29*v28*v50*v32/2-v11*v40*v50*v32/2-v56*v20*v31*v32/2-v55*v19*v31*v32/2-v49*v33*v31*v32/2-v10*v34*v31*v32/2-v11*v54*v31*v32/2-v34*v20*v62*v32/2-v33*v19*v62*v32/2-v11*v28*v62*v32/2+3*v34*v20*v31*v50*v61/4+3*v33*v19*v31*v50*v61/4+3*v11*v28*v31*v50*v61/4)*v47+v58*v45*v59*v60-v23*v57*v59*v60)*rad_subtraction(atan2(v45,v23), eq)+2*k*(v23*v44*v47-v48*v45*v47)*(v23*v57*v47-v58*v45*v47) ; }

double HarmonicDihedralConstraintFunctions::hessianZbYc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66 ; v1 = xc-xb ; v2 = yb-ya ; v3 = -xa ; v4 = xb+v3 ; v5 = yc-yb ; v6 = v4*v5-v1*v2 ; v7 = xd-xc ; v8 = -yc ; v9 = yd+v8 ; v10 = v1*v9-v7*v5 ; v11 = zb-za ; v12 = -zb ; v13 = zc+v12 ; v14 = v1*v11-v4*v13 ; v15 = v2*v13-v5*v11 ; v16 = sqrt(pow(v6,2)+pow(v15,2)+pow(v14,2)) ; v17 = 1/v16 ; v18 = zd-zc ; v19 = v7*v13-v1*v18 ; v20 = v5*v18-v9*v13 ; v21 = sqrt(pow(v20,2)+pow(v19,2)+pow(v10,2)) ; v22 = 1/v21 ; v23 = v15*v17*v20*v22+v14*v17*v19*v22+v6*v10*v17*v22 ; v24 = pow(v5,2) ; v25 = pow(v13,2) ; v26 = sqrt(v25+v24+pow(v1,2)) ; v27 = 1/v26 ; v28 = v5*v15*v27*v17-v1*v14*v27*v17 ; v29 = -xd ; v30 = v29+xc ; v31 = 2*v9*v20+2*v30*v19 ; v32 = 1/pow(v21,3) ; v33 = v1*v6*v27*v17-v13*v15*v27*v17 ; v34 = v13*v14*v27*v17-v5*v6*v27*v17 ; v35 = xc+v3 ; v36 = v8+ya ; v37 = 2*v36*v15+2*v35*v14 ; v38 = 1/pow(v16,3) ; v39 = 1/pow(v26,3) ; v40 = v5*v13*v15*v39*v17 ; v41 = v36*v5*v27*v17-v35*v1*v27*v17+v40-v1*v13*v14*v39*v17-v5*v15*v37*v27*v38/2+v1*v14*v37*v27*v38/2 ; v42 = v15*v27*v17 ; v43 = v42-v36*v13*v27*v17-v25*v15*v39*v17+v1*v6*v13*v39*v17+v13*v15*v37*v27*v38/2-v1*v6*v37*v27*v38/2 ; v44 = -v14*v27*v17+v35*v13*v27*v17+v25*v14*v39*v17-v5*v6*v13*v39*v17-v13*v14*v37*v27*v38/2+v5*v6*v37*v27*v38/2 ; v45 = v44*v20*v22+v43*v19*v22+v30*v33*v22+v9*v34*v22+v10*v41*v22-v34*v20*v31*v32/2-v33*v19*v31*v32/2-v10*v28*v31*v32/2 ; v46 = v34*v20*v22+v33*v19*v22+v10*v28*v22 ; v47 = pow(v46,2)+pow(v23,2) ; v48 = 1/v47 ; v49 = v36*v17*v20*v22-v15*v37*v38*v20*v22/2+v35*v17*v19*v22-v14*v37*v38*v19*v22/2+v9*v15*v17*v22+v30*v14*v17*v22-v6*v10*v37*v38*v22/2-v15*v17*v20*v31*v32/2-v14*v17*v19*v31*v32/2-v6*v10*v17*v31*v32/2 ; v50 = v29+xb ; v51 = zd+v12 ; v52 = 2*v51*v20+2*v50*v10 ; v53 = v12+za ; v54 = 2*v53*v15+2*v4*v6 ; v55 = v42+v5*v53*v27*v17-v24*v15*v39*v17+v1*v5*v14*v39*v17-v5*v15*v54*v27*v38/2+v1*v14*v54*v27*v38/2 ; v56 = -v53*v13*v27*v17+v4*v1*v27*v17+v40-v1*v5*v6*v39*v17+v13*v15*v54*v27*v38/2-v1*v6*v54*v27*v38/2 ; v57 = -v6*v27*v17-v4*v5*v27*v17-v5*v13*v14*v39*v17+v24*v6*v39*v17-v13*v14*v54*v27*v38/2+v5*v6*v54*v27*v38/2 ; v58 = v57*v20*v22+v56*v19*v22+v34*v51*v22+v50*v28*v22+v10*v55*v22-v34*v20*v52*v32/2-v33*v19*v52*v32/2-v10*v28*v52*v32/2 ; v59 = v53*v17*v20*v22-v15*v54*v38*v20*v22/2-v14*v54*v38*v19*v22/2+v15*v17*v51*v22+v4*v10*v17*v22+v50*v6*v17*v22-v6*v10*v54*v38*v22/2-v15*v17*v20*v52*v32/2-v14*v17*v19*v52*v32/2-v6*v10*v17*v52*v32/2 ; v60 = 2*v58*v46+2*v59*v23 ; v61 = 1/pow(v47,2) ; v62 = 1/pow(v21,5) ; v63 = 2*v9*v51-2*v20 ; v64 = 1/pow(v16,5) ; v65 = 2*v36*v53-2*v15 ; v66 = 1/pow(v26,5) ; return 2*k*(-(-v17*v20*v22-v36*v54*v38*v20*v22/2-v53*v37*v38*v20*v22/2-v15*v65*v38*v20*v22/2+3*v15*v37*v54*v64*v20*v22/4-v35*v54*v38*v19*v22/2-v14*v65*v38*v19*v22/2+3*v14*v37*v54*v64*v19*v22/4+v36*v17*v51*v22-v15*v37*v38*v51*v22/2-v15*v17*v22+v9*v53*v17*v22-v9*v15*v54*v38*v22/2-v30*v14*v54*v38*v22/2-v4*v10*v37*v38*v22/2-v50*v6*v37*v38*v22/2-v6*v10*v65*v38*v22/2+3*v6*v10*v37*v54*v64*v22/4-v36*v17*v20*v52*v32/2+v15*v37*v38*v20*v52*v32/4-v35*v17*v19*v52*v32/2+v14*v37*v38*v19*v52*v32/4-v9*v15*v17*v52*v32/2-v30*v14*v17*v52*v32/2+v6*v10*v37*v38*v52*v32/4-v53*v17*v20*v31*v32/2+v15*v54*v38*v20*v31*v32/4+v14*v54*v38*v19*v31*v32/4-v15*v17*v51*v31*v32/2-v4*v10*v17*v31*v32/2-v50*v6*v17*v31*v32/2+v6*v10*v54*v38*v31*v32/4-v15*v17*v20*v63*v32/2-v14*v17*v19*v63*v32/2-v6*v10*v17*v63*v32/2+3*v15*v17*v20*v31*v52*v62/4+3*v14*v17*v19*v31*v52*v62/4+3*v6*v10*v17*v31*v52*v62/4)*v46*v48+v59*v45*v48-v49*v58*v48+v23*((v5*v14*v39*v17-v6*v13*v39*v17-v35*v5*v13*v39*v17-v4*v5*v13*v39*v17-3*v5*v25*v14*v66*v17+3*v24*v6*v13*v66*v17+v14*v54*v27*v38/2-v35*v13*v54*v27*v38/2+v6*v37*v27*v38/2+v4*v5*v37*v27*v38/2-v13*v14*v65*v27*v38/2+v5*v6*v65*v27*v38/2-v25*v14*v54*v39*v38/2+v5*v6*v13*v54*v39*v38/2+v5*v13*v14*v37*v39*v38/2-v24*v6*v37*v39*v38/2+3*v13*v14*v37*v54*v27*v64/4-3*v5*v6*v37*v54*v27*v64/4)*v20*v22+(v13*v27*v17+v53*v27*v17-v53*v25*v39*v17-v5*v15*v39*v17+v36*v5*v13*v39*v17+v4*v1*v13*v39*v17+3*v5*v25*v15*v66*v17-3*v1*v5*v6*v13*v66*v17-v15*v54*v27*v38/2+v36*v13*v54*v27*v38/2+v53*v13*v37*v27*v38/2-v4*v1*v37*v27*v38/2+v13*v15*v65*v27*v38/2-v1*v6*v65*v27*v38/2+v25*v15*v54*v39*v38/2-v1*v6*v13*v54*v39*v38/2-v5*v13*v15*v37*v39*v38/2+v1*v5*v6*v37*v39*v38/2-3*v13*v15*v37*v54*v27*v64/4+3*v1*v6*v37*v54*v27*v64/4)*v19*v22+v44*v51*v22-v34*v22+v30*v56*v22+v9*v57*v22+v50*v41*v22+v10*(-v5*v27*v17+v36*v27*v17+v13*v15*v39*v17+v5*v53*v13*v39*v17-v36*v24*v39*v17+v35*v1*v5*v39*v17-3*v24*v13*v15*v66*v17+3*v1*v5*v13*v14*v66*v17-v36*v5*v54*v27*v38/2+v35*v1*v54*v27*v38/2-v15*v37*v27*v38/2-v5*v53*v37*v27*v38/2-v5*v15*v65*v27*v38/2+v1*v14*v65*v27*v38/2-v5*v13*v15*v54*v39*v38/2+v1*v13*v14*v54*v39*v38/2+v24*v15*v37*v39*v38/2-v1*v5*v14*v37*v39*v38/2+3*v5*v15*v37*v54*v27*v64/4-3*v1*v14*v37*v54*v27*v64/4)*v22-v44*v20*v52*v32/2-v43*v19*v52*v32/2-v30*v33*v52*v32/2-v9*v34*v52*v32/2-v10*v41*v52*v32/2-v57*v20*v31*v32/2-v56*v19*v31*v32/2-v34*v51*v31*v32/2-v50*v28*v31*v32/2-v10*v55*v31*v32/2-v34*v20*v63*v32/2-v33*v19*v63*v32/2-v10*v28*v63*v32/2+3*v34*v20*v31*v52*v62/4+3*v33*v19*v31*v52*v62/4+3*v10*v28*v31*v52*v62/4)*v48+v49*v46*v60*v61-v23*v45*v60*v61)*rad_subtraction(atan2(v46,v23), eq)+2*k*(v23*v45*v48-v49*v46*v48)*(v23*v58*v48-v59*v46*v48) ; }

double HarmonicDihedralConstraintFunctions::hessianZbZc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63 ; v1 = -xb ; v2 = xc+v1 ; v3 = yb-ya ; v4 = -xa ; v5 = xb+v4 ; v6 = yc-yb ; v7 = v5*v6-v2*v3 ; v8 = xd-xc ; v9 = -yc ; v10 = yd+v9 ; v11 = v2*v10-v8*v6 ; v12 = zb-za ; v13 = zc-zb ; v14 = v2*v12-v5*v13 ; v15 = v3*v13-v6*v12 ; v16 = sqrt(pow(v7,2)+pow(v15,2)+pow(v14,2)) ; v17 = 1/v16 ; v18 = zd-zc ; v19 = v8*v13-v2*v18 ; v20 = v6*v18-v10*v13 ; v21 = sqrt(pow(v20,2)+pow(v19,2)+pow(v11,2)) ; v22 = 1/v21 ; v23 = v15*v17*v20*v22+v14*v17*v19*v22+v7*v11*v17*v22 ; v24 = pow(v13,2) ; v25 = sqrt(pow(v6,2)+v24+pow(v2,2)) ; v26 = 1/v25 ; v27 = v6*v15*v26*v17-v2*v14*v26*v17 ; v28 = xd+v1 ; v29 = yb-yd ; v30 = 2*v29*v20+2*v28*v19 ; v31 = 1/pow(v21,3) ; v32 = v2*v7*v26*v17-v13*v15*v26*v17 ; v33 = v13*v14*v26*v17-v6*v7*v26*v17 ; v34 = v1+xa ; v35 = 2*v3*v15+2*v34*v14 ; v36 = 1/pow(v16,3) ; v37 = 1/pow(v25,3) ; v38 = v3*v6*v26*v17-v34*v2*v26*v17-v6*v13*v15*v37*v17+v2*v13*v14*v37*v17-v6*v15*v35*v26*v36/2+v2*v14*v35*v26*v36/2 ; v39 = -v15*v26*v17-v3*v13*v26*v17+v24*v15*v37*v17-v2*v7*v13*v37*v17+v13*v15*v35*v26*v36/2-v2*v7*v35*v26*v36/2 ; v40 = v14*v26*v17+v34*v13*v26*v17-v24*v14*v37*v17+v6*v7*v13*v37*v17-v13*v14*v35*v26*v36/2+v6*v7*v35*v26*v36/2 ; v41 = v40*v20*v22+v39*v19*v22+v28*v32*v22+v29*v33*v22+v11*v38*v22-v33*v20*v30*v31/2-v32*v19*v30*v31/2-v11*v27*v30*v31/2 ; v42 = v33*v20*v22+v32*v19*v22+v11*v27*v22 ; v43 = pow(v42,2)+pow(v23,2) ; v44 = 1/v43 ; v45 = v3*v17*v20*v22-v15*v35*v36*v20*v22/2+v34*v17*v19*v22-v14*v35*v36*v19*v22/2+v29*v15*v17*v22+v28*v14*v17*v22-v7*v11*v35*v36*v22/2-v15*v17*v20*v30*v31/2-v14*v17*v19*v30*v31/2-v7*v11*v17*v30*v31/2 ; v46 = xc-xd ; v47 = 2*v10*v20+2*v46*v19 ; v48 = xc+v4 ; v49 = v9+ya ; v50 = 2*v49*v15+2*v48*v14 ; v51 = v49*v6*v26*v17-v48*v2*v26*v17+v6*v13*v15*v37*v17-v2*v13*v14*v37*v17-v6*v15*v50*v26*v36/2+v2*v14*v50*v26*v36/2 ; v52 = v15*v26*v17-v49*v13*v26*v17-v24*v15*v37*v17+v2*v7*v13*v37*v17+v13*v15*v50*v26*v36/2-v2*v7*v50*v26*v36/2 ; v53 = -v14*v26*v17+v48*v13*v26*v17+v24*v14*v37*v17-v6*v7*v13*v37*v17-v13*v14*v50*v26*v36/2+v6*v7*v50*v26*v36/2 ; v54 = v53*v20*v22+v52*v19*v22+v46*v32*v22+v10*v33*v22+v11*v51*v22-v33*v20*v47*v31/2-v32*v19*v47*v31/2-v11*v27*v47*v31/2 ; v55 = v49*v17*v20*v22-v15*v50*v36*v20*v22/2+v48*v17*v19*v22-v14*v50*v36*v19*v22/2+v10*v15*v17*v22+v46*v14*v17*v22-v7*v11*v50*v36*v22/2-v15*v17*v20*v47*v31/2-v14*v17*v19*v47*v31/2-v7*v11*v17*v47*v31/2 ; v56 = 2*v41*v42+2*v45*v23 ; v57 = 1/pow(v43,2) ; v58 = 1/pow(v21,5) ; v59 = 2*v29*v10+2*v46*v28 ; v60 = 1/pow(v16,5) ; v61 = 2*v3*v49+2*v34*v48 ; v62 = 1/pow(v25,5) ; v63 = pow(v13,3) ; return 2*k*(-(-v3*v50*v36*v20*v22/2-v49*v35*v36*v20*v22/2-v61*v15*v36*v20*v22/2+3*v15*v35*v50*v60*v20*v22/4-v34*v50*v36*v19*v22/2-v48*v35*v36*v19*v22/2-v61*v14*v36*v19*v22/2+3*v14*v35*v50*v60*v19*v22/4+v3*v10*v17*v22+v49*v29*v17*v22+v48*v28*v17*v22+v34*v46*v17*v22-v29*v15*v50*v36*v22/2-v28*v14*v50*v36*v22/2-v10*v15*v35*v36*v22/2-v46*v14*v35*v36*v22/2-v61*v7*v11*v36*v22/2+3*v7*v11*v35*v50*v60*v22/4-v3*v17*v20*v47*v31/2+v15*v35*v36*v20*v47*v31/4-v34*v17*v19*v47*v31/2+v14*v35*v36*v19*v47*v31/4-v29*v15*v17*v47*v31/2-v28*v14*v17*v47*v31/2+v7*v11*v35*v36*v47*v31/4-v49*v17*v20*v30*v31/2+v15*v50*v36*v20*v30*v31/4-v48*v17*v19*v30*v31/2+v14*v50*v36*v19*v30*v31/4-v10*v15*v17*v30*v31/2-v46*v14*v17*v30*v31/2+v7*v11*v50*v36*v30*v31/4-v59*v15*v17*v20*v31/2-v59*v14*v17*v19*v31/2-v7*v11*v59*v17*v31/2+3*v15*v17*v20*v30*v47*v58/4+3*v14*v17*v19*v30*v47*v58/4+3*v7*v11*v17*v30*v47*v58/4)*v42*v44-v55*v41*v44+v45*v54*v44+v23*((v48*v26*v17-v34*v26*v17-v48*v24*v37*v17+v34*v24*v37*v17+3*v13*v14*v37*v17-v6*v7*v37*v17+3*v6*v7*v24*v62*v17-3*v63*v14*v62*v17-v14*v50*v26*v36/2-v34*v13*v50*v26*v36/2+v14*v35*v26*v36/2-v48*v13*v35*v26*v36/2-v61*v13*v14*v26*v36/2+v61*v6*v7*v26*v36/2+v24*v14*v50*v37*v36/2-v6*v7*v13*v50*v37*v36/2-v24*v14*v35*v37*v36/2+v6*v7*v13*v35*v37*v36/2+3*v13*v14*v35*v50*v26*v60/4-3*v6*v7*v35*v50*v26*v60/4)*v20*v22+(-v49*v26*v17+v3*v26*v17+v49*v24*v37*v17-v3*v24*v37*v17-3*v13*v15*v37*v17+v2*v7*v37*v17-3*v2*v7*v24*v62*v17+3*v63*v15*v62*v17+v15*v50*v26*v36/2+v3*v13*v50*v26*v36/2-v15*v35*v26*v36/2+v49*v13*v35*v26*v36/2+v61*v13*v15*v26*v36/2-v2*v61*v7*v26*v36/2-v24*v15*v50*v37*v36/2+v2*v7*v13*v50*v37*v36/2+v24*v15*v35*v37*v36/2-v2*v7*v13*v35*v37*v36/2-3*v13*v15*v35*v50*v26*v60/4+3*v2*v7*v35*v50*v26*v60/4)*v19*v22+v28*v52*v22+v46*v39*v22+v10*v40*v22+v29*v53*v22+v11*(v6*v15*v37*v17-v2*v14*v37*v17-v49*v6*v13*v37*v17+v3*v6*v13*v37*v17+v48*v2*v13*v37*v17-v34*v2*v13*v37*v17-3*v6*v24*v15*v62*v17+3*v2*v24*v14*v62*v17-v3*v6*v50*v26*v36/2+v34*v2*v50*v26*v36/2-v49*v6*v35*v26*v36/2+v48*v2*v35*v26*v36/2-v61*v6*v15*v26*v36/2+v2*v61*v14*v26*v36/2+v6*v13*v15*v50*v37*v36/2-v2*v13*v14*v50*v37*v36/2-v6*v13*v15*v35*v37*v36/2+v2*v13*v14*v35*v37*v36/2+3*v6*v15*v35*v50*v26*v60/4-3*v2*v14*v35*v50*v26*v60/4)*v22-v40*v20*v47*v31/2-v39*v19*v47*v31/2-v28*v32*v47*v31/2-v29*v33*v47*v31/2-v11*v38*v47*v31/2-v53*v20*v30*v31/2-v52*v19*v30*v31/2-v46*v32*v30*v31/2-v10*v33*v30*v31/2-v11*v51*v30*v31/2-v59*v33*v20*v31/2-v59*v32*v19*v31/2-v11*v59*v27*v31/2+3*v33*v20*v30*v47*v58/4+3*v32*v19*v30*v47*v58/4+3*v11*v27*v30*v47*v58/4)*v44+v55*v42*v56*v57-v23*v54*v56*v57)*rad_subtraction(atan2(v42,v23), eq)+2*k*(v23*v41*v44-v45*v42*v44)*(v23*v54*v44-v55*v42*v44) ; }

double HarmonicDihedralConstraintFunctions::hessianZbXd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = xd-xc ; v2 = yc-yb ; v3 = xc-xb ; v4 = -yc ; v5 = yd+v4 ; v6 = v3*v5-v1*v2 ; v7 = zb-za ; v8 = -xa ; v9 = xb+v8 ; v10 = zc-zb ; v11 = v3*v7-v9*v10 ; v12 = pow(v10,2) ; v13 = sqrt(pow(v3,2)+pow(v2,2)+v12) ; v14 = 1/v13 ; v15 = yb-ya ; v16 = v9*v2-v3*v15 ; v17 = v15*v10-v2*v7 ; v18 = sqrt(pow(v17,2)+pow(v16,2)+pow(v11,2)) ; v19 = 1/v18 ; v20 = v2*v17*v14*v19-v3*v11*v14*v19 ; v21 = v4+yb ; v22 = zd-zc ; v23 = v1*v10-v3*v22 ; v24 = 2*v10*v23+2*v21*v6 ; v25 = v2*v22-v5*v10 ; v26 = sqrt(pow(v6,2)+pow(v25,2)+pow(v23,2)) ; v27 = 1/pow(v26,3) ; v28 = v3*v16*v14*v19-v10*v17*v14*v19 ; v29 = v10*v11*v14*v19-v2*v16*v14*v19 ; v30 = 1/v26 ; v31 = v10*v28*v30+v21*v20*v30-v29*v25*v24*v27/2-v28*v23*v24*v27/2-v6*v20*v24*v27/2 ; v32 = v17*v19*v25*v30+v11*v19*v23*v30+v16*v6*v19*v30 ; v33 = v29*v25*v30+v28*v23*v30+v6*v20*v30 ; v34 = pow(v33,2)+pow(v32,2) ; v35 = 1/v34 ; v36 = v10*v11*v19*v30+v21*v16*v19*v30-v17*v19*v25*v24*v27/2-v11*v19*v23*v24*v27/2-v16*v6*v19*v24*v27/2 ; v37 = xc-xd ; v38 = 2*v5*v25+2*v37*v23 ; v39 = xc+v8 ; v40 = v4+ya ; v41 = 2*v40*v17+2*v39*v11 ; v42 = 1/pow(v18,3) ; v43 = 1/pow(v13,3) ; v44 = v40*v2*v14*v19-v39*v3*v14*v19+v2*v10*v17*v43*v19-v3*v10*v11*v43*v19-v2*v17*v41*v14*v42/2+v3*v11*v41*v14*v42/2 ; v45 = v17*v14*v19-v40*v10*v14*v19-v12*v17*v43*v19+v3*v16*v10*v43*v19+v10*v17*v41*v14*v42/2-v3*v16*v41*v14*v42/2 ; v46 = -v11*v14*v19+v39*v10*v14*v19+v12*v11*v43*v19-v2*v16*v10*v43*v19-v10*v11*v41*v14*v42/2+v2*v16*v41*v14*v42/2 ; v47 = v46*v25*v30+v45*v23*v30+v37*v28*v30+v5*v29*v30+v6*v44*v30-v29*v25*v38*v27/2-v28*v23*v38*v27/2-v6*v20*v38*v27/2 ; v48 = v40*v19*v25*v30-v17*v41*v42*v25*v30/2+v39*v19*v23*v30-v11*v41*v42*v23*v30/2+v5*v17*v19*v30+v37*v11*v19*v30-v16*v6*v41*v42*v30/2-v17*v19*v25*v38*v27/2-v11*v19*v23*v38*v27/2-v16*v6*v19*v38*v27/2 ; v49 = 2*v31*v33+2*v36*v32 ; v50 = 1/pow(v34,2) ; v51 = 1/pow(v26,5) ; v52 = 2*v37*v10-2*v23 ; return 2*k*(-(-v11*v19*v30+v39*v10*v19*v30-v10*v11*v41*v42*v30/2-v21*v16*v41*v42*v30/2-v10*v11*v19*v38*v27/2-v21*v16*v19*v38*v27/2-v40*v19*v25*v24*v27/2+v17*v41*v42*v25*v24*v27/4-v39*v19*v23*v24*v27/2+v11*v41*v42*v23*v24*v27/4-v5*v17*v19*v24*v27/2-v37*v11*v19*v24*v27/2+v16*v6*v41*v42*v24*v27/4-v17*v19*v25*v52*v27/2-v11*v19*v23*v52*v27/2-v16*v6*v19*v52*v27/2+3*v17*v19*v25*v24*v38*v51/4+3*v11*v19*v23*v24*v38*v51/4+3*v16*v6*v19*v24*v38*v51/4)*v33*v35+v36*v47*v35+(-v28*v30+v10*v45*v30+v21*v44*v30-v10*v28*v38*v27/2-v21*v20*v38*v27/2-v46*v25*v24*v27/2-v45*v23*v24*v27/2-v37*v28*v24*v27/2-v5*v29*v24*v27/2-v6*v44*v24*v27/2-v29*v25*v52*v27/2-v28*v23*v52*v27/2-v6*v20*v52*v27/2+3*v29*v25*v24*v38*v51/4+3*v28*v23*v24*v38*v51/4+3*v6*v20*v24*v38*v51/4)*v32*v35-v31*v48*v35+v48*v33*v49*v50-v32*v47*v49*v50)*rad_subtraction(atan2(v33,v32), eq)+2*k*(v31*v32*v35-v36*v33*v35)*(v32*v47*v35-v48*v33*v35) ; }

double HarmonicDihedralConstraintFunctions::hessianZbYd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = xd-xc ; v2 = yc-yb ; v3 = xc-xb ; v4 = -yc ; v5 = yd+v4 ; v6 = v3*v5-v1*v2 ; v7 = zb-za ; v8 = -xa ; v9 = xb+v8 ; v10 = zc-zb ; v11 = v3*v7-v9*v10 ; v12 = pow(v10,2) ; v13 = sqrt(pow(v3,2)+pow(v2,2)+v12) ; v14 = 1/v13 ; v15 = yb-ya ; v16 = v9*v2-v3*v15 ; v17 = v15*v10-v2*v7 ; v18 = sqrt(pow(v17,2)+pow(v16,2)+pow(v11,2)) ; v19 = 1/v18 ; v20 = v2*v17*v14*v19-v3*v11*v14*v19 ; v21 = -zc ; v22 = v21+zb ; v23 = zd+v21 ; v24 = v2*v23-v5*v10 ; v25 = 2*v22*v24+2*v3*v6 ; v26 = v1*v10-v3*v23 ; v27 = sqrt(pow(v6,2)+pow(v26,2)+pow(v24,2)) ; v28 = 1/pow(v27,3) ; v29 = v3*v16*v14*v19-v10*v17*v14*v19 ; v30 = v10*v11*v14*v19-v2*v16*v14*v19 ; v31 = 1/v27 ; v32 = v3*v20*v31+v22*v30*v31-v30*v24*v25*v28/2-v29*v26*v25*v28/2-v6*v20*v25*v28/2 ; v33 = v17*v19*v24*v31+v11*v19*v26*v31+v16*v6*v19*v31 ; v34 = v30*v24*v31+v29*v26*v31+v6*v20*v31 ; v35 = pow(v34,2)+pow(v33,2) ; v36 = 1/v35 ; v37 = v22*v17*v19*v31+v3*v16*v19*v31-v17*v19*v24*v25*v28/2-v11*v19*v26*v25*v28/2-v16*v6*v19*v25*v28/2 ; v38 = xc-xd ; v39 = 2*v5*v24+2*v38*v26 ; v40 = xc+v8 ; v41 = v4+ya ; v42 = 2*v41*v17+2*v40*v11 ; v43 = 1/pow(v18,3) ; v44 = 1/pow(v13,3) ; v45 = v41*v2*v14*v19-v40*v3*v14*v19+v2*v10*v17*v44*v19-v3*v10*v11*v44*v19-v2*v17*v42*v14*v43/2+v3*v11*v42*v14*v43/2 ; v46 = v17*v14*v19-v41*v10*v14*v19-v12*v17*v44*v19+v3*v16*v10*v44*v19+v10*v17*v42*v14*v43/2-v3*v16*v42*v14*v43/2 ; v47 = -v11*v14*v19+v40*v10*v14*v19+v12*v11*v44*v19-v2*v16*v10*v44*v19-v10*v11*v42*v14*v43/2+v2*v16*v42*v14*v43/2 ; v48 = v47*v24*v31+v46*v26*v31+v38*v29*v31+v5*v30*v31+v6*v45*v31-v30*v24*v39*v28/2-v29*v26*v39*v28/2-v6*v20*v39*v28/2 ; v49 = v41*v19*v24*v31-v17*v42*v43*v24*v31/2+v40*v19*v26*v31-v11*v42*v43*v26*v31/2+v5*v17*v19*v31+v38*v11*v19*v31-v16*v6*v42*v43*v31/2-v17*v19*v24*v39*v28/2-v11*v19*v26*v39*v28/2-v16*v6*v19*v39*v28/2 ; v50 = 2*v32*v34+2*v37*v33 ; v51 = 1/pow(v35,2) ; v52 = 1/pow(v27,5) ; v53 = 2*v24+2*v5*v22 ; return 2*k*(-(v17*v19*v31+v41*v22*v19*v31-v22*v17*v42*v43*v31/2-v3*v16*v42*v43*v31/2-v41*v19*v24*v25*v28/2+v17*v42*v43*v24*v25*v28/4-v40*v19*v26*v25*v28/2+v11*v42*v43*v26*v25*v28/4-v5*v17*v19*v25*v28/2-v38*v11*v19*v25*v28/2+v16*v6*v42*v43*v25*v28/4-v22*v17*v19*v39*v28/2-v3*v16*v19*v39*v28/2-v17*v19*v24*v53*v28/2-v11*v19*v26*v53*v28/2-v16*v6*v19*v53*v28/2+3*v17*v19*v24*v39*v25*v52/4+3*v11*v19*v26*v39*v25*v52/4+3*v16*v6*v19*v39*v25*v52/4)*v34*v36+v37*v48*v36+(v30*v31+v22*v47*v31+v3*v45*v31-v47*v24*v25*v28/2-v46*v26*v25*v28/2-v38*v29*v25*v28/2-v5*v30*v25*v28/2-v6*v45*v25*v28/2-v3*v20*v39*v28/2-v22*v30*v39*v28/2-v30*v24*v53*v28/2-v29*v26*v53*v28/2-v6*v20*v53*v28/2+3*v30*v24*v39*v25*v52/4+3*v29*v26*v39*v25*v52/4+3*v6*v20*v39*v25*v52/4)*v33*v36-v32*v49*v36+v49*v34*v50*v51-v33*v48*v50*v51)*rad_subtraction(atan2(v34,v33), eq)+2*k*(v32*v33*v36-v37*v34*v36)*(v33*v48*v36-v49*v34*v36) ; }

double HarmonicDihedralConstraintFunctions::hessianZbZd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = xc-xb ; v5 = -yc ; v6 = yd+v5 ; v7 = v4*v6-v2*v3 ; v8 = zb-za ; v9 = -xa ; v10 = xb+v9 ; v11 = zc-zb ; v12 = v4*v8-v10*v11 ; v13 = pow(v11,2) ; v14 = sqrt(pow(v4,2)+pow(v3,2)+v13) ; v15 = 1/v14 ; v16 = yb-ya ; v17 = v10*v3-v4*v16 ; v18 = v16*v11-v3*v8 ; v19 = sqrt(pow(v18,2)+pow(v17,2)+pow(v12,2)) ; v20 = 1/v19 ; v21 = v3*v18*v15*v20-v4*v12*v15*v20 ; v22 = v1+xb ; v23 = zd-zc ; v24 = v2*v11-v4*v23 ; v25 = v3*v23-v6*v11 ; v26 = 2*v3*v25+2*v22*v24 ; v27 = sqrt(pow(v7,2)+pow(v25,2)+pow(v24,2)) ; v28 = 1/pow(v27,3) ; v29 = v4*v17*v15*v20-v11*v18*v15*v20 ; v30 = v11*v12*v15*v20-v3*v17*v15*v20 ; v31 = 1/v27 ; v32 = v22*v29*v31+v3*v30*v31-v30*v25*v26*v28/2-v29*v24*v26*v28/2-v7*v21*v26*v28/2 ; v33 = v18*v20*v25*v31+v12*v20*v24*v31+v17*v7*v20*v31 ; v34 = v30*v25*v31+v29*v24*v31+v7*v21*v31 ; v35 = pow(v34,2)+pow(v33,2) ; v36 = 1/v35 ; v37 = v3*v18*v20*v31+v22*v12*v20*v31-v18*v20*v25*v26*v28/2-v12*v20*v24*v26*v28/2-v17*v7*v20*v26*v28/2 ; v38 = xc-xd ; v39 = 2*v6*v25+2*v38*v24 ; v40 = xc+v9 ; v41 = v5+ya ; v42 = 2*v41*v18+2*v40*v12 ; v43 = 1/pow(v19,3) ; v44 = 1/pow(v14,3) ; v45 = v41*v3*v15*v20-v40*v4*v15*v20+v3*v11*v18*v44*v20-v4*v11*v12*v44*v20-v3*v18*v42*v15*v43/2+v4*v12*v42*v15*v43/2 ; v46 = v18*v15*v20-v41*v11*v15*v20-v13*v18*v44*v20+v4*v17*v11*v44*v20+v11*v18*v42*v15*v43/2-v4*v17*v42*v15*v43/2 ; v47 = -v12*v15*v20+v40*v11*v15*v20+v13*v12*v44*v20-v3*v17*v11*v44*v20-v11*v12*v42*v15*v43/2+v3*v17*v42*v15*v43/2 ; v48 = v47*v25*v31+v46*v24*v31+v38*v29*v31+v6*v30*v31+v7*v45*v31-v30*v25*v39*v28/2-v29*v24*v39*v28/2-v7*v21*v39*v28/2 ; v49 = v41*v20*v25*v31-v18*v42*v43*v25*v31/2+v40*v20*v24*v31-v12*v42*v43*v24*v31/2+v6*v18*v20*v31+v38*v12*v20*v31-v17*v7*v42*v43*v31/2-v18*v20*v25*v39*v28/2-v12*v20*v24*v39*v28/2-v17*v7*v20*v39*v28/2 ; v50 = 2*v32*v34+2*v37*v33 ; v51 = 1/pow(v35,2) ; v52 = 1/pow(v27,5) ; v53 = 2*v3*v6+2*v22*v38 ; return 2*k*(-(v41*v3*v20*v31+v22*v40*v20*v31-v3*v18*v42*v43*v31/2-v22*v12*v42*v43*v31/2-v3*v18*v20*v39*v28/2-v22*v12*v20*v39*v28/2-v41*v20*v25*v26*v28/2+v18*v42*v43*v25*v26*v28/4-v40*v20*v24*v26*v28/2+v12*v42*v43*v24*v26*v28/4-v6*v18*v20*v26*v28/2-v38*v12*v20*v26*v28/2+v17*v7*v42*v43*v26*v28/4-v53*v18*v20*v25*v28/2-v53*v12*v20*v24*v28/2-v17*v7*v53*v20*v28/2+3*v18*v20*v25*v26*v39*v52/4+3*v12*v20*v24*v26*v39*v52/4+3*v17*v7*v20*v26*v39*v52/4)*v34*v36+v37*v48*v36+(v22*v46*v31+v3*v47*v31-v22*v29*v39*v28/2-v3*v30*v39*v28/2-v47*v25*v26*v28/2-v46*v24*v26*v28/2-v38*v29*v26*v28/2-v6*v30*v26*v28/2-v7*v45*v26*v28/2-v53*v30*v25*v28/2-v53*v29*v24*v28/2-v7*v53*v21*v28/2+3*v30*v25*v26*v39*v52/4+3*v29*v24*v26*v39*v52/4+3*v7*v21*v26*v39*v52/4)*v33*v36-v32*v49*v36+v49*v34*v50*v51-v33*v48*v50*v51)*rad_subtraction(atan2(v34,v33), eq)+2*k*(v32*v33*v36-v37*v34*v36)*(v33*v48*v36-v49*v34*v36) ; }

double HarmonicDihedralConstraintFunctions::hessianXcXc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = -yb ; v5 = yc+v4 ; v6 = v3*v5-v1*v2 ; v7 = xd-xc ; v8 = yd-yc ; v9 = v1*v8-v7*v5 ; v10 = zb-za ; v11 = zc-zb ; v12 = v1*v10-v3*v11 ; v13 = v2*v11-v5*v10 ; v14 = sqrt(pow(v6,2)+pow(v13,2)+pow(v12,2)) ; v15 = 1/v14 ; v16 = zd-zc ; v17 = v7*v11-v1*v16 ; v18 = v5*v16-v8*v11 ; v19 = sqrt(pow(v9,2)+pow(v18,2)+pow(v17,2)) ; v20 = 1/v19 ; v21 = v13*v15*v18*v20+v12*v15*v17*v20+v6*v9*v15*v20 ; v22 = pow(v1,2) ; v23 = sqrt(pow(v5,2)+v22+pow(v11,2)) ; v24 = 1/v23 ; v25 = v5*v13*v24*v15-v1*v12*v24*v15 ; v26 = yd+v4 ; v27 = zb-zd ; v28 = 2*v27*v17+2*v26*v9 ; v29 = 1/pow(v19,3) ; v30 = v1*v6*v24*v15-v11*v13*v24*v15 ; v31 = v11*v12*v24*v15-v5*v6*v24*v15 ; v32 = v4+ya ; v33 = 2*v10*v12+2*v32*v6 ; v34 = 1/pow(v14,3) ; v35 = 1/pow(v23,3) ; v36 = -v12*v24*v15-v1*v10*v24*v15-v1*v5*v13*v35*v15+v22*v12*v35*v15-v5*v13*v33*v24*v34/2+v1*v12*v33*v24*v34/2 ; v37 = v6*v24*v15+v1*v32*v24*v15+v1*v11*v13*v35*v15-v22*v6*v35*v15+v11*v13*v33*v24*v34/2-v1*v6*v33*v24*v34/2 ; v38 = v10*v11*v24*v15-v32*v5*v24*v15-v1*v11*v12*v35*v15+v1*v5*v6*v35*v15-v11*v12*v33*v24*v34/2+v5*v6*v33*v24*v34/2 ; v39 = v38*v18*v20+v37*v17*v20+v30*v27*v20+v26*v25*v20+v9*v36*v20-v31*v18*v28*v29/2-v30*v17*v28*v29/2-v9*v25*v28*v29/2 ; v40 = v31*v18*v20+v30*v17*v20+v9*v25*v20 ; v41 = pow(v40,2)+pow(v21,2) ; v42 = 1/v41 ; v43 = -v13*v33*v34*v18*v20/2+v10*v15*v17*v20-v12*v33*v34*v17*v20/2+v12*v15*v27*v20+v32*v9*v15*v20+v6*v26*v15*v20-v6*v9*v33*v34*v20/2-v13*v15*v18*v28*v29/2-v12*v15*v17*v28*v29/2-v6*v9*v15*v28*v29/2 ; v44 = 2*v39*v40+2*v43*v21 ; v45 = 1/pow(v41,2) ; v46 = pow(v28,2) ; v47 = 1/pow(v19,5) ; v48 = 2*pow(v27,2)+2*pow(v26,2) ; v49 = pow(v33,2) ; v50 = 1/pow(v14,5) ; v51 = 2*pow(v32,2)+2*pow(v10,2) ; v52 = pow(v1,3) ; v53 = 1/pow(v23,5) ; return 2*pow(v21*v39*v42-v43*v40*v42,2)*k+2*k*(-(-v51*v13*v34*v18*v20/2+3*v13*v49*v50*v18*v20/4-v10*v33*v34*v17*v20-v51*v12*v34*v17*v20/2+3*v12*v49*v50*v17*v20/4+2*v10*v15*v27*v20-v12*v33*v34*v27*v20+2*v32*v26*v15*v20-v32*v9*v33*v34*v20-v6*v26*v33*v34*v20-v6*v9*v51*v34*v20/2+3*v6*v9*v49*v50*v20/4+v13*v33*v34*v18*v28*v29/2-v10*v15*v17*v28*v29+v12*v33*v34*v17*v28*v29/2-v12*v15*v27*v28*v29-v32*v9*v15*v28*v29-v6*v26*v15*v28*v29+v6*v9*v33*v34*v28*v29/2-v13*v15*v48*v18*v29/2-v12*v15*v48*v17*v29/2-v6*v9*v15*v48*v29/2+3*v13*v15*v18*v46*v47/4+3*v12*v15*v17*v46*v47/4+3*v6*v9*v15*v46*v47/4)*v40*v42+v21*((-v11*v12*v35*v15-2*v1*v10*v11*v35*v15+v5*v6*v35*v15+2*v1*v32*v5*v35*v15+3*v22*v11*v12*v53*v15-3*v22*v5*v6*v53*v15-v10*v11*v33*v24*v34+v32*v5*v33*v24*v34-v51*v11*v12*v24*v34/2+v5*v6*v51*v24*v34/2+v1*v11*v12*v33*v35*v34-v1*v5*v6*v33*v35*v34+3*v11*v12*v49*v24*v50/4-3*v5*v6*v49*v24*v50/4)*v18*v20+(2*v32*v24*v15+v11*v13*v35*v15-3*v1*v6*v35*v15-2*v22*v32*v35*v15-3*v22*v11*v13*v53*v15+3*v52*v6*v53*v15-v6*v33*v24*v34-v1*v32*v33*v24*v34+v51*v11*v13*v24*v34/2-v1*v6*v51*v24*v34/2-v1*v11*v13*v33*v35*v34+v22*v6*v33*v35*v34-3*v11*v13*v49*v24*v50/4+3*v1*v6*v49*v24*v50/4)*v17*v20+2*v37*v27*v20+2*v26*v36*v20+v9*(-2*v10*v24*v15-v5*v13*v35*v15+3*v1*v12*v35*v15+2*v22*v10*v35*v15+3*v22*v5*v13*v53*v15-3*v52*v12*v53*v15+v12*v33*v24*v34+v1*v10*v33*v24*v34-v5*v51*v13*v24*v34/2+v1*v51*v12*v24*v34/2+v1*v5*v13*v33*v35*v34-v22*v12*v33*v35*v34+3*v5*v13*v49*v24*v50/4-3*v1*v12*v49*v24*v50/4)*v20-v38*v18*v28*v29-v37*v17*v28*v29-v30*v27*v28*v29-v26*v25*v28*v29-v9*v36*v28*v29-v31*v48*v18*v29/2-v30*v48*v17*v29/2-v9*v25*v48*v29/2+3*v31*v18*v46*v47/4+3*v30*v17*v46*v47/4+3*v9*v25*v46*v47/4)*v42+v43*v40*v44*v45-v21*v39*v44*v45)*rad_subtraction(atan2(v40,v21), eq) ; }

double HarmonicDihedralConstraintFunctions::hessianXcYc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = -yb ; v5 = yc+v4 ; v6 = v3*v5-v1*v2 ; v7 = xd-xc ; v8 = yd-yc ; v9 = v1*v8-v7*v5 ; v10 = zb-za ; v11 = -zb ; v12 = zc+v11 ; v13 = v1*v10-v3*v12 ; v14 = v2*v12-v5*v10 ; v15 = sqrt(pow(v6,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = zd-zc ; v18 = v7*v12-v1*v17 ; v19 = v5*v17-v8*v12 ; v20 = sqrt(pow(v9,2)+pow(v19,2)+pow(v18,2)) ; v21 = 1/v20 ; v22 = v14*v16*v19*v21+v13*v16*v18*v21+v6*v9*v16*v21 ; v23 = pow(v1,2) ; v24 = pow(v5,2) ; v25 = sqrt(v24+v23+pow(v12,2)) ; v26 = 1/v25 ; v27 = v5*v14*v26*v16-v1*v13*v26*v16 ; v28 = yd+v4 ; v29 = zb-zd ; v30 = 2*v29*v18+2*v28*v9 ; v31 = 1/pow(v20,3) ; v32 = v1*v6*v26*v16-v12*v14*v26*v16 ; v33 = v12*v13*v26*v16-v5*v6*v26*v16 ; v34 = v4+ya ; v35 = 2*v10*v13+2*v34*v6 ; v36 = 1/pow(v15,3) ; v37 = 1/pow(v25,3) ; v38 = -v13*v26*v16-v1*v10*v26*v16-v1*v5*v14*v37*v16+v23*v13*v37*v16-v5*v14*v35*v26*v36/2+v1*v13*v35*v26*v36/2 ; v39 = v6*v26*v16+v1*v34*v26*v16+v1*v12*v14*v37*v16-v23*v6*v37*v16+v12*v14*v35*v26*v36/2-v1*v6*v35*v26*v36/2 ; v40 = v10*v12*v26*v16-v34*v5*v26*v16-v1*v12*v13*v37*v16+v1*v5*v6*v37*v16-v12*v13*v35*v26*v36/2+v5*v6*v35*v26*v36/2 ; v41 = v40*v19*v21+v39*v18*v21+v32*v29*v21+v28*v27*v21+v9*v38*v21-v33*v19*v30*v31/2-v32*v18*v30*v31/2-v9*v27*v30*v31/2 ; v42 = v33*v19*v21+v32*v18*v21+v9*v27*v21 ; v43 = pow(v42,2)+pow(v22,2) ; v44 = 1/v43 ; v45 = -v14*v35*v36*v19*v21/2+v10*v16*v18*v21-v13*v35*v36*v18*v21/2+v13*v16*v29*v21+v34*v9*v16*v21+v6*v28*v16*v21-v6*v9*v35*v36*v21/2-v14*v16*v19*v30*v31/2-v13*v16*v18*v30*v31/2-v6*v9*v16*v30*v31/2 ; v46 = xb-xd ; v47 = zd+v11 ; v48 = 2*v47*v19+2*v46*v9 ; v49 = v11+za ; v50 = 2*v49*v14+2*v3*v6 ; v51 = v14*v26*v16+v5*v49*v26*v16-v24*v14*v37*v16+v1*v5*v13*v37*v16-v5*v14*v50*v26*v36/2+v1*v13*v50*v26*v36/2 ; v52 = -v49*v12*v26*v16+v3*v1*v26*v16+v5*v12*v14*v37*v16-v1*v5*v6*v37*v16+v12*v14*v50*v26*v36/2-v1*v6*v50*v26*v36/2 ; v53 = -v6*v26*v16-v3*v5*v26*v16-v5*v12*v13*v37*v16+v24*v6*v37*v16-v12*v13*v50*v26*v36/2+v5*v6*v50*v26*v36/2 ; v54 = v53*v19*v21+v52*v18*v21+v33*v47*v21+v46*v27*v21+v9*v51*v21-v33*v19*v48*v31/2-v32*v18*v48*v31/2-v9*v27*v48*v31/2 ; v55 = v49*v16*v19*v21-v14*v50*v36*v19*v21/2-v13*v50*v36*v18*v21/2+v14*v16*v47*v21+v3*v9*v16*v21+v46*v6*v16*v21-v6*v9*v50*v36*v21/2-v14*v16*v19*v48*v31/2-v13*v16*v18*v48*v31/2-v6*v9*v16*v48*v31/2 ; v56 = 2*v54*v42+2*v55*v22 ; v57 = 1/pow(v43,2) ; v58 = 1/pow(v20,5) ; v59 = 1/pow(v15,5) ; v60 = 1/pow(v25,5) ; return 2*k*(-(-v49*v35*v36*v19*v21/2-v3*v34*v14*v36*v19*v21+3*v14*v35*v50*v59*v19*v21/4-v10*v50*v36*v18*v21/2-v3*v34*v13*v36*v18*v21+3*v13*v35*v50*v59*v18*v21/4-v14*v35*v36*v47*v21/2-v13*v50*v36*v29*v21/2+v3*v28*v16*v21+v46*v34*v16*v21-v34*v9*v50*v36*v21/2-v6*v28*v50*v36*v21/2-v3*v9*v35*v36*v21/2-v46*v6*v35*v36*v21/2-v3*v34*v6*v9*v36*v21+3*v6*v9*v35*v50*v59*v21/4+v14*v35*v36*v19*v48*v31/4-v10*v16*v18*v48*v31/2+v13*v35*v36*v18*v48*v31/4-v13*v16*v29*v48*v31/2-v34*v9*v16*v48*v31/2-v6*v28*v16*v48*v31/2+v6*v9*v35*v36*v48*v31/4-v49*v16*v19*v30*v31/2+v14*v50*v36*v19*v30*v31/4+v13*v50*v36*v18*v30*v31/4-v14*v16*v47*v30*v31/2-v3*v9*v16*v30*v31/2-v46*v6*v16*v30*v31/2+v6*v9*v50*v36*v30*v31/4-v46*v28*v14*v16*v19*v31-v46*v28*v13*v16*v18*v31-v46*v6*v28*v9*v16*v31+3*v14*v16*v19*v30*v48*v58/4+3*v13*v16*v18*v30*v48*v58/4+3*v6*v9*v16*v30*v48*v58/4)*v42*v44+v55*v41*v44-v45*v54*v44+v22*((-v34*v26*v16-v5*v10*v12*v37*v16+v34*v24*v37*v16+v1*v6*v37*v16+v3*v1*v5*v37*v16+3*v1*v5*v12*v13*v60*v16-3*v1*v24*v6*v60*v16-v10*v12*v50*v26*v36/2+v34*v5*v50*v26*v36/2+v6*v35*v26*v36/2+v3*v5*v35*v26*v36/2-v3*v34*v12*v13*v26*v36+v3*v34*v5*v6*v26*v36+v1*v12*v13*v50*v37*v36/2-v1*v5*v6*v50*v37*v36/2+v5*v12*v13*v35*v37*v36/2-v24*v6*v35*v37*v36/2+3*v12*v13*v35*v50*v26*v59/4-3*v5*v6*v35*v50*v26*v59/4)*v19*v21+(v3*v26*v16+v1*v49*v12*v37*v16-v5*v6*v37*v16-v1*v34*v5*v37*v16-v3*v23*v37*v16-3*v1*v5*v12*v14*v60*v16+3*v23*v5*v6*v60*v16-v6*v50*v26*v36/2-v1*v34*v50*v26*v36/2+v49*v12*v35*v26*v36/2-v3*v1*v35*v26*v36/2+v3*v34*v12*v14*v26*v36-v3*v1*v34*v6*v26*v36-v1*v12*v14*v50*v37*v36/2+v23*v6*v50*v37*v36/2-v5*v12*v14*v35*v37*v36/2+v1*v5*v6*v35*v37*v36/2-3*v12*v14*v35*v50*v26*v59/4+3*v1*v6*v35*v50*v26*v59/4)*v18*v21+v40*v47*v21+v52*v29*v21+v28*v51*v21+v46*v38*v21+v9*(-v1*v14*v37*v16+v5*v13*v37*v16+v1*v5*v10*v37*v16-v1*v5*v49*v37*v16+3*v1*v24*v14*v60*v16-3*v23*v5*v13*v60*v16+v13*v50*v26*v36/2+v1*v10*v50*v26*v36/2-v14*v35*v26*v36/2-v5*v49*v35*v26*v36/2-v3*v34*v5*v14*v26*v36+v3*v1*v34*v13*v26*v36+v1*v5*v14*v50*v37*v36/2-v23*v13*v50*v37*v36/2+v24*v14*v35*v37*v36/2-v1*v5*v13*v35*v37*v36/2+3*v5*v14*v35*v50*v26*v59/4-3*v1*v13*v35*v50*v26*v59/4)*v21-v40*v19*v48*v31/2-v39*v18*v48*v31/2-v32*v29*v48*v31/2-v28*v27*v48*v31/2-v9*v38*v48*v31/2-v53*v19*v30*v31/2-v52*v18*v30*v31/2-v33*v47*v30*v31/2-v46*v27*v30*v31/2-v9*v51*v30*v31/2-v46*v28*v33*v19*v31-v46*v28*v32*v18*v31-v46*v28*v9*v27*v31+3*v33*v19*v30*v48*v58/4+3*v32*v18*v30*v48*v58/4+3*v9*v27*v30*v48*v58/4)*v44+v45*v42*v56*v57-v22*v41*v56*v57)*rad_subtraction(atan2(v42,v22), eq)+2*k*(v22*v41*v44-v45*v42*v44)*(v22*v54*v44-v55*v42*v44) ; }

double HarmonicDihedralConstraintFunctions::hessianXcZc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60 ; v1 = -xb ; v2 = xc+v1 ; v3 = yb-ya ; v4 = xb-xa ; v5 = -yb ; v6 = yc+v5 ; v7 = v4*v6-v2*v3 ; v8 = xd-xc ; v9 = yd-yc ; v10 = v2*v9-v8*v6 ; v11 = zb-za ; v12 = zc-zb ; v13 = v2*v11-v4*v12 ; v14 = v3*v12-v6*v11 ; v15 = sqrt(pow(v7,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = zd-zc ; v18 = v8*v12-v2*v17 ; v19 = v6*v17-v9*v12 ; v20 = sqrt(pow(v19,2)+pow(v18,2)+pow(v10,2)) ; v21 = 1/v20 ; v22 = v14*v16*v19*v21+v13*v16*v18*v21+v7*v10*v16*v21 ; v23 = pow(v2,2) ; v24 = pow(v12,2) ; v25 = sqrt(pow(v6,2)+v24+v23) ; v26 = 1/v25 ; v27 = v6*v14*v26*v16-v2*v13*v26*v16 ; v28 = yd+v5 ; v29 = zb-zd ; v30 = 2*v29*v18+2*v28*v10 ; v31 = 1/pow(v20,3) ; v32 = v2*v7*v26*v16-v12*v14*v26*v16 ; v33 = v12*v13*v26*v16-v6*v7*v26*v16 ; v34 = v5+ya ; v35 = 2*v11*v13+2*v34*v7 ; v36 = 1/pow(v15,3) ; v37 = 1/pow(v25,3) ; v38 = -v13*v26*v16-v2*v11*v26*v16-v2*v6*v14*v37*v16+v23*v13*v37*v16-v6*v14*v35*v26*v36/2+v2*v13*v35*v26*v36/2 ; v39 = v7*v26*v16+v2*v34*v26*v16+v2*v12*v14*v37*v16-v23*v7*v37*v16+v12*v14*v35*v26*v36/2-v2*v7*v35*v26*v36/2 ; v40 = v11*v12*v26*v16-v34*v6*v26*v16-v2*v12*v13*v37*v16+v2*v6*v7*v37*v16-v12*v13*v35*v26*v36/2+v6*v7*v35*v26*v36/2 ; v41 = v40*v19*v21+v39*v18*v21+v32*v29*v21+v28*v27*v21+v10*v38*v21-v33*v19*v30*v31/2-v32*v18*v30*v31/2-v10*v27*v30*v31/2 ; v42 = v33*v19*v21+v32*v18*v21+v10*v27*v21 ; v43 = pow(v42,2)+pow(v22,2) ; v44 = 1/v43 ; v45 = -v14*v35*v36*v19*v21/2+v11*v16*v18*v21-v13*v35*v36*v18*v21/2+v13*v16*v29*v21+v34*v10*v16*v21+v7*v28*v16*v21-v7*v10*v35*v36*v21/2-v14*v16*v19*v30*v31/2-v13*v16*v18*v30*v31/2-v7*v10*v16*v30*v31/2 ; v46 = xd+v1 ; v47 = yb-yd ; v48 = 2*v47*v19+2*v46*v18 ; v49 = v1+xa ; v50 = 2*v3*v14+2*v49*v13 ; v51 = v3*v6*v26*v16-v49*v2*v26*v16-v6*v12*v14*v37*v16+v2*v12*v13*v37*v16-v6*v14*v50*v26*v36/2+v2*v13*v50*v26*v36/2 ; v52 = -v14*v26*v16-v3*v12*v26*v16+v24*v14*v37*v16-v2*v7*v12*v37*v16+v12*v14*v50*v26*v36/2-v2*v7*v50*v26*v36/2 ; v53 = v13*v26*v16+v49*v12*v26*v16-v24*v13*v37*v16+v6*v7*v12*v37*v16-v12*v13*v50*v26*v36/2+v6*v7*v50*v26*v36/2 ; v54 = v53*v19*v21+v52*v18*v21+v46*v32*v21+v47*v33*v21+v10*v51*v21-v33*v19*v48*v31/2-v32*v18*v48*v31/2-v10*v27*v48*v31/2 ; v55 = v3*v16*v19*v21-v14*v50*v36*v19*v21/2+v49*v16*v18*v21-v13*v50*v36*v18*v21/2+v47*v14*v16*v21+v46*v13*v16*v21-v7*v10*v50*v36*v21/2-v14*v16*v19*v48*v31/2-v13*v16*v18*v48*v31/2-v7*v10*v16*v48*v31/2 ; v56 = 2*v54*v42+2*v55*v22 ; v57 = 1/pow(v43,2) ; v58 = 1/pow(v20,5) ; v59 = 1/pow(v15,5) ; v60 = 1/pow(v25,5) ; return 2*k*(-(-v3*v35*v36*v19*v21/2-v49*v11*v14*v36*v19*v21+3*v14*v35*v50*v59*v19*v21/4-v11*v50*v36*v18*v21/2-v49*v35*v36*v18*v21/2-v49*v11*v13*v36*v18*v21+3*v13*v35*v50*v59*v18*v21/4+v49*v16*v29*v21-v13*v50*v36*v29*v21/2+v46*v11*v16*v21-v34*v10*v50*v36*v21/2-v7*v28*v50*v36*v21/2-v47*v14*v35*v36*v21/2-v46*v13*v35*v36*v21/2-v49*v7*v10*v11*v36*v21+3*v7*v10*v35*v50*v59*v21/4+v14*v35*v36*v19*v48*v31/4-v11*v16*v18*v48*v31/2+v13*v35*v36*v18*v48*v31/4-v13*v16*v29*v48*v31/2-v34*v10*v16*v48*v31/2-v7*v28*v16*v48*v31/2+v7*v10*v35*v36*v48*v31/4-v3*v16*v19*v30*v31/2+v14*v50*v36*v19*v30*v31/4-v49*v16*v18*v30*v31/2+v13*v50*v36*v18*v30*v31/4-v47*v14*v16*v30*v31/2-v46*v13*v16*v30*v31/2+v7*v10*v50*v36*v30*v31/4-v46*v14*v16*v29*v19*v31-v46*v13*v16*v29*v18*v31-v46*v7*v10*v16*v29*v31+3*v14*v16*v19*v30*v48*v58/4+3*v13*v16*v18*v30*v48*v58/4+3*v7*v10*v16*v30*v48*v58/4)*v42*v44-v45*v54*v44+v55*v41*v44+v22*((v11*v26*v16-v11*v24*v37*v16-v2*v13*v37*v16+v34*v6*v12*v37*v16-v49*v2*v12*v37*v16+3*v2*v24*v13*v60*v16-3*v2*v6*v7*v12*v60*v16-v11*v12*v50*v26*v36/2+v34*v6*v50*v26*v36/2-v13*v35*v26*v36/2-v49*v12*v35*v26*v36/2-v49*v11*v12*v13*v26*v36+v49*v6*v7*v11*v26*v36+v2*v12*v13*v50*v37*v36/2-v2*v6*v7*v50*v37*v36/2+v24*v13*v35*v37*v36/2-v6*v7*v12*v35*v37*v36/2+3*v12*v13*v35*v50*v26*v59/4-3*v6*v7*v35*v50*v26*v59/4)*v19*v21+(v2*v14*v37*v16-v7*v12*v37*v16+v2*v3*v12*v37*v16-v2*v34*v12*v37*v16-3*v2*v24*v14*v60*v16+3*v23*v7*v12*v60*v16-v7*v50*v26*v36/2-v2*v34*v50*v26*v36/2+v14*v35*v26*v36/2+v3*v12*v35*v26*v36/2+v49*v11*v12*v14*v26*v36-v49*v2*v7*v11*v26*v36-v2*v12*v14*v50*v37*v36/2+v23*v7*v50*v37*v36/2-v24*v14*v35*v37*v36/2+v2*v7*v12*v35*v37*v36/2-3*v12*v14*v35*v50*v26*v59/4+3*v2*v7*v35*v50*v26*v59/4)*v18*v21+v52*v29*v21+v47*v40*v21+v46*v39*v21+v28*v51*v21+v10*(-v49*v26*v16+v12*v13*v37*v16+v2*v11*v12*v37*v16-v2*v3*v6*v37*v16+v49*v23*v37*v16+3*v2*v6*v12*v14*v60*v16-3*v23*v12*v13*v60*v16+v13*v50*v26*v36/2+v2*v11*v50*v26*v36/2-v3*v6*v35*v26*v36/2+v49*v2*v35*v26*v36/2-v49*v6*v11*v14*v26*v36+v49*v2*v11*v13*v26*v36+v2*v6*v14*v50*v37*v36/2-v23*v13*v50*v37*v36/2+v6*v12*v14*v35*v37*v36/2-v2*v12*v13*v35*v37*v36/2+3*v6*v14*v35*v50*v26*v59/4-3*v2*v13*v35*v50*v26*v59/4)*v21-v40*v19*v48*v31/2-v39*v18*v48*v31/2-v32*v29*v48*v31/2-v28*v27*v48*v31/2-v10*v38*v48*v31/2-v53*v19*v30*v31/2-v52*v18*v30*v31/2-v46*v32*v30*v31/2-v47*v33*v30*v31/2-v10*v51*v30*v31/2-v46*v33*v29*v19*v31-v46*v32*v29*v18*v31-v46*v10*v27*v29*v31+3*v33*v19*v30*v48*v58/4+3*v32*v18*v30*v48*v58/4+3*v10*v27*v30*v48*v58/4)*v44+v45*v42*v56*v57-v22*v41*v56*v57)*rad_subtraction(atan2(v42,v22), eq)+2*k*(v22*v41*v44-v45*v42*v44)*(v22*v54*v44-v55*v42*v44) ; }

double HarmonicDihedralConstraintFunctions::hessianXcXd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = xd-xc ; v2 = -yb ; v3 = yc+v2 ; v4 = xc-xb ; v5 = -yc ; v6 = yd+v5 ; v7 = v4*v6-v1*v3 ; v8 = zb-za ; v9 = xb-xa ; v10 = zc-zb ; v11 = v4*v8-v9*v10 ; v12 = pow(v4,2) ; v13 = sqrt(pow(v3,2)+v12+pow(v10,2)) ; v14 = 1/v13 ; v15 = yb-ya ; v16 = v9*v3-v4*v15 ; v17 = v15*v10-v3*v8 ; v18 = sqrt(pow(v17,2)+pow(v16,2)+pow(v11,2)) ; v19 = 1/v18 ; v20 = v3*v17*v14*v19-v4*v11*v14*v19 ; v21 = v5+yb ; v22 = zd-zc ; v23 = v1*v10-v4*v22 ; v24 = 2*v10*v23+2*v21*v7 ; v25 = v3*v22-v6*v10 ; v26 = sqrt(pow(v7,2)+pow(v25,2)+pow(v23,2)) ; v27 = 1/pow(v26,3) ; v28 = v4*v16*v14*v19-v10*v17*v14*v19 ; v29 = v10*v11*v14*v19-v3*v16*v14*v19 ; v30 = 1/v26 ; v31 = v10*v28*v30+v21*v20*v30-v29*v25*v24*v27/2-v28*v23*v24*v27/2-v7*v20*v24*v27/2 ; v32 = v17*v19*v25*v30+v11*v19*v23*v30+v16*v7*v19*v30 ; v33 = v29*v25*v30+v28*v23*v30+v7*v20*v30 ; v34 = pow(v33,2)+pow(v32,2) ; v35 = 1/v34 ; v36 = v10*v11*v19*v30+v21*v16*v19*v30-v17*v19*v25*v24*v27/2-v11*v19*v23*v24*v27/2-v16*v7*v19*v24*v27/2 ; v37 = yd+v2 ; v38 = zb-zd ; v39 = 2*v38*v23+2*v37*v7 ; v40 = v2+ya ; v41 = 2*v8*v11+2*v40*v16 ; v42 = 1/pow(v18,3) ; v43 = 1/pow(v13,3) ; v44 = -v11*v14*v19-v4*v8*v14*v19-v4*v3*v17*v43*v19+v12*v11*v43*v19-v3*v17*v41*v14*v42/2+v4*v11*v41*v14*v42/2 ; v45 = v16*v14*v19+v4*v40*v14*v19+v4*v10*v17*v43*v19-v12*v16*v43*v19+v10*v17*v41*v14*v42/2-v4*v16*v41*v14*v42/2 ; v46 = v8*v10*v14*v19-v40*v3*v14*v19-v4*v10*v11*v43*v19+v4*v3*v16*v43*v19-v10*v11*v41*v14*v42/2+v3*v16*v41*v14*v42/2 ; v47 = v46*v25*v30+v45*v23*v30+v28*v38*v30+v37*v20*v30+v7*v44*v30-v29*v25*v39*v27/2-v28*v23*v39*v27/2-v7*v20*v39*v27/2 ; v48 = -v17*v41*v42*v25*v30/2+v8*v19*v23*v30-v11*v41*v42*v23*v30/2+v11*v19*v38*v30+v40*v7*v19*v30+v16*v37*v19*v30-v16*v7*v41*v42*v30/2-v17*v19*v25*v39*v27/2-v11*v19*v23*v39*v27/2-v16*v7*v19*v39*v27/2 ; v49 = 2*v31*v33+2*v36*v32 ; v50 = 1/pow(v34,2) ; v51 = 1/pow(v26,5) ; v52 = 2*v10*v38+2*v21*v37 ; return 2*k*(-(v8*v10*v19*v30+v40*v21*v19*v30-v10*v11*v41*v42*v30/2-v21*v16*v41*v42*v30/2-v10*v11*v19*v39*v27/2-v21*v16*v19*v39*v27/2+v17*v41*v42*v25*v24*v27/4-v8*v19*v23*v24*v27/2+v11*v41*v42*v23*v24*v27/4-v11*v19*v38*v24*v27/2-v40*v7*v19*v24*v27/2-v16*v37*v19*v24*v27/2+v16*v7*v41*v42*v24*v27/4-v17*v19*v52*v25*v27/2-v11*v19*v52*v23*v27/2-v16*v7*v19*v52*v27/2+3*v17*v19*v25*v24*v39*v51/4+3*v11*v19*v23*v24*v39*v51/4+3*v16*v7*v19*v24*v39*v51/4)*v33*v35+v36*v47*v35+(v21*v44*v30+v10*v45*v30-v10*v28*v39*v27/2-v21*v20*v39*v27/2-v46*v25*v24*v27/2-v45*v23*v24*v27/2-v28*v38*v24*v27/2-v37*v20*v24*v27/2-v7*v44*v24*v27/2-v29*v52*v25*v27/2-v28*v52*v23*v27/2-v7*v20*v52*v27/2+3*v29*v25*v24*v39*v51/4+3*v28*v23*v24*v39*v51/4+3*v7*v20*v24*v39*v51/4)*v32*v35-v31*v48*v35+v48*v33*v49*v50-v32*v47*v49*v50)*rad_subtraction(atan2(v33,v32), eq)+2*k*(v31*v32*v35-v36*v33*v35)*(v32*v47*v35-v48*v33*v35) ; }

double HarmonicDihedralConstraintFunctions::hessianXcYd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = xd-xc ; v2 = -yb ; v3 = yc+v2 ; v4 = xc-xb ; v5 = yd-yc ; v6 = v4*v5-v1*v3 ; v7 = zb-za ; v8 = xb-xa ; v9 = zc-zb ; v10 = v4*v7-v8*v9 ; v11 = pow(v4,2) ; v12 = sqrt(pow(v9,2)+pow(v3,2)+v11) ; v13 = 1/v12 ; v14 = yb-ya ; v15 = v8*v3-v4*v14 ; v16 = v14*v9-v3*v7 ; v17 = sqrt(pow(v16,2)+pow(v15,2)+pow(v10,2)) ; v18 = 1/v17 ; v19 = v3*v16*v13*v18-v4*v10*v13*v18 ; v20 = -zc ; v21 = v20+zb ; v22 = zd+v20 ; v23 = v3*v22-v5*v9 ; v24 = 2*v21*v23+2*v4*v6 ; v25 = v1*v9-v4*v22 ; v26 = sqrt(pow(v6,2)+pow(v25,2)+pow(v23,2)) ; v27 = 1/pow(v26,3) ; v28 = v4*v15*v13*v18-v9*v16*v13*v18 ; v29 = v9*v10*v13*v18-v3*v15*v13*v18 ; v30 = 1/v26 ; v31 = v4*v19*v30+v21*v29*v30-v29*v23*v24*v27/2-v28*v25*v24*v27/2-v6*v19*v24*v27/2 ; v32 = v16*v18*v23*v30+v10*v18*v25*v30+v15*v6*v18*v30 ; v33 = v29*v23*v30+v28*v25*v30+v6*v19*v30 ; v34 = pow(v33,2)+pow(v32,2) ; v35 = 1/v34 ; v36 = v21*v16*v18*v30+v4*v15*v18*v30-v16*v18*v23*v24*v27/2-v10*v18*v25*v24*v27/2-v15*v6*v18*v24*v27/2 ; v37 = yd+v2 ; v38 = zb-zd ; v39 = 2*v38*v25+2*v37*v6 ; v40 = v2+ya ; v41 = 2*v7*v10+2*v40*v15 ; v42 = 1/pow(v17,3) ; v43 = 1/pow(v12,3) ; v44 = -v10*v13*v18-v4*v7*v13*v18-v4*v3*v16*v43*v18+v11*v10*v43*v18-v3*v16*v41*v13*v42/2+v4*v10*v41*v13*v42/2 ; v45 = v15*v13*v18+v4*v40*v13*v18+v4*v9*v16*v43*v18-v11*v15*v43*v18+v9*v16*v41*v13*v42/2-v4*v15*v41*v13*v42/2 ; v46 = v7*v9*v13*v18-v40*v3*v13*v18-v4*v9*v10*v43*v18+v4*v3*v15*v43*v18-v9*v10*v41*v13*v42/2+v3*v15*v41*v13*v42/2 ; v47 = v46*v23*v30+v45*v25*v30+v28*v38*v30+v37*v19*v30+v6*v44*v30-v29*v23*v39*v27/2-v28*v25*v39*v27/2-v6*v19*v39*v27/2 ; v48 = -v16*v41*v42*v23*v30/2+v7*v18*v25*v30-v10*v41*v42*v25*v30/2+v10*v18*v38*v30+v40*v6*v18*v30+v15*v37*v18*v30-v15*v6*v41*v42*v30/2-v16*v18*v23*v39*v27/2-v10*v18*v25*v39*v27/2-v15*v6*v18*v39*v27/2 ; v49 = 2*v31*v33+2*v36*v32 ; v50 = 1/pow(v34,2) ; v51 = 1/pow(v26,5) ; v52 = 2*v6+2*v4*v37 ; return 2*k*(-(v15*v18*v30+v4*v40*v18*v30-v21*v16*v41*v42*v30/2-v4*v15*v41*v42*v30/2+v16*v41*v42*v23*v24*v27/4-v7*v18*v25*v24*v27/2+v10*v41*v42*v25*v24*v27/4-v10*v18*v38*v24*v27/2-v40*v6*v18*v24*v27/2-v15*v37*v18*v24*v27/2+v15*v6*v41*v42*v24*v27/4-v21*v16*v18*v39*v27/2-v4*v15*v18*v39*v27/2-v52*v16*v18*v23*v27/2-v52*v10*v18*v25*v27/2-v15*v6*v52*v18*v27/2+3*v16*v18*v23*v39*v24*v51/4+3*v10*v18*v25*v39*v24*v51/4+3*v15*v6*v18*v39*v24*v51/4)*v33*v35+v36*v47*v35+(v19*v30+v4*v44*v30+v21*v46*v30-v46*v23*v24*v27/2-v45*v25*v24*v27/2-v28*v38*v24*v27/2-v37*v19*v24*v27/2-v6*v44*v24*v27/2-v4*v19*v39*v27/2-v21*v29*v39*v27/2-v52*v29*v23*v27/2-v52*v28*v25*v27/2-v6*v52*v19*v27/2+3*v29*v23*v39*v24*v51/4+3*v28*v25*v39*v24*v51/4+3*v6*v19*v39*v24*v51/4)*v32*v35-v31*v48*v35+v48*v33*v49*v50-v32*v47*v49*v50)*rad_subtraction(atan2(v33,v32), eq)+2*k*(v31*v32*v35-v36*v33*v35)*(v32*v47*v35-v48*v33*v35) ; }

double HarmonicDihedralConstraintFunctions::hessianXcZd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = -xc ; v2 = xd+v1 ; v3 = -yb ; v4 = yc+v3 ; v5 = xc-xb ; v6 = yd-yc ; v7 = v5*v6-v2*v4 ; v8 = zb-za ; v9 = xb-xa ; v10 = zc-zb ; v11 = v5*v8-v9*v10 ; v12 = pow(v5,2) ; v13 = sqrt(pow(v4,2)+v12+pow(v10,2)) ; v14 = 1/v13 ; v15 = yb-ya ; v16 = v9*v4-v5*v15 ; v17 = v15*v10-v4*v8 ; v18 = sqrt(pow(v17,2)+pow(v16,2)+pow(v11,2)) ; v19 = 1/v18 ; v20 = v4*v17*v14*v19-v5*v11*v14*v19 ; v21 = v1+xb ; v22 = zd-zc ; v23 = v2*v10-v5*v22 ; v24 = v4*v22-v6*v10 ; v25 = 2*v4*v24+2*v21*v23 ; v26 = sqrt(pow(v7,2)+pow(v24,2)+pow(v23,2)) ; v27 = 1/pow(v26,3) ; v28 = v5*v16*v14*v19-v10*v17*v14*v19 ; v29 = v10*v11*v14*v19-v4*v16*v14*v19 ; v30 = 1/v26 ; v31 = v21*v28*v30+v4*v29*v30-v29*v24*v25*v27/2-v28*v23*v25*v27/2-v7*v20*v25*v27/2 ; v32 = v17*v19*v24*v30+v11*v19*v23*v30+v16*v7*v19*v30 ; v33 = v29*v24*v30+v28*v23*v30+v7*v20*v30 ; v34 = pow(v33,2)+pow(v32,2) ; v35 = 1/v34 ; v36 = v4*v17*v19*v30+v21*v11*v19*v30-v17*v19*v24*v25*v27/2-v11*v19*v23*v25*v27/2-v16*v7*v19*v25*v27/2 ; v37 = yd+v3 ; v38 = zb-zd ; v39 = 2*v38*v23+2*v37*v7 ; v40 = v3+ya ; v41 = 2*v8*v11+2*v40*v16 ; v42 = 1/pow(v18,3) ; v43 = 1/pow(v13,3) ; v44 = -v11*v14*v19-v5*v8*v14*v19-v5*v4*v17*v43*v19+v12*v11*v43*v19-v4*v17*v41*v14*v42/2+v5*v11*v41*v14*v42/2 ; v45 = v16*v14*v19+v5*v40*v14*v19+v5*v10*v17*v43*v19-v12*v16*v43*v19+v10*v17*v41*v14*v42/2-v5*v16*v41*v14*v42/2 ; v46 = v8*v10*v14*v19-v40*v4*v14*v19-v5*v10*v11*v43*v19+v5*v4*v16*v43*v19-v10*v11*v41*v14*v42/2+v4*v16*v41*v14*v42/2 ; v47 = v46*v24*v30+v45*v23*v30+v28*v38*v30+v37*v20*v30+v7*v44*v30-v29*v24*v39*v27/2-v28*v23*v39*v27/2-v7*v20*v39*v27/2 ; v48 = -v17*v41*v42*v24*v30/2+v8*v19*v23*v30-v11*v41*v42*v23*v30/2+v11*v19*v38*v30+v40*v7*v19*v30+v16*v37*v19*v30-v16*v7*v41*v42*v30/2-v17*v19*v24*v39*v27/2-v11*v19*v23*v39*v27/2-v16*v7*v19*v39*v27/2 ; v49 = 2*v31*v33+2*v36*v32 ; v50 = 1/pow(v34,2) ; v51 = 1/pow(v26,5) ; v52 = 2*v21*v38-2*v23 ; return 2*k*(-(-v11*v19*v30+v21*v8*v19*v30-v4*v17*v41*v42*v30/2-v21*v11*v41*v42*v30/2+v17*v41*v42*v24*v25*v27/4-v8*v19*v23*v25*v27/2+v11*v41*v42*v23*v25*v27/4-v11*v19*v38*v25*v27/2-v40*v7*v19*v25*v27/2-v16*v37*v19*v25*v27/2+v16*v7*v41*v42*v25*v27/4-v4*v17*v19*v39*v27/2-v21*v11*v19*v39*v27/2-v17*v19*v24*v52*v27/2-v11*v19*v23*v52*v27/2-v16*v7*v19*v52*v27/2+3*v17*v19*v24*v39*v25*v51/4+3*v11*v19*v23*v39*v25*v51/4+3*v16*v7*v19*v39*v25*v51/4)*v33*v35+v36*v47*v35+(-v28*v30+v4*v46*v30+v21*v45*v30-v46*v24*v25*v27/2-v45*v23*v25*v27/2-v28*v38*v25*v27/2-v37*v20*v25*v27/2-v7*v44*v25*v27/2-v21*v28*v39*v27/2-v4*v29*v39*v27/2-v29*v24*v52*v27/2-v28*v23*v52*v27/2-v7*v20*v52*v27/2+3*v29*v24*v39*v25*v51/4+3*v28*v23*v39*v25*v51/4+3*v7*v20*v39*v25*v51/4)*v32*v35-v31*v48*v35+v48*v33*v49*v50-v32*v47*v49*v50)*rad_subtraction(atan2(v33,v32), eq)+2*k*(v31*v32*v35-v36*v33*v35)*(v32*v47*v35-v48*v33*v35) ; }

double HarmonicDihedralConstraintFunctions::hessianYcYc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = xc-xb ; v2 = yb-ya ; v3 = xb-xa ; v4 = yc-yb ; v5 = v3*v4-v1*v2 ; v6 = xd-xc ; v7 = yd-yc ; v8 = v1*v7-v6*v4 ; v9 = zb-za ; v10 = -zb ; v11 = zc+v10 ; v12 = v1*v9-v3*v11 ; v13 = v2*v11-v4*v9 ; v14 = sqrt(pow(v5,2)+pow(v13,2)+pow(v12,2)) ; v15 = 1/v14 ; v16 = zd-zc ; v17 = v6*v11-v1*v16 ; v18 = v4*v16-v7*v11 ; v19 = sqrt(pow(v8,2)+pow(v18,2)+pow(v17,2)) ; v20 = 1/v19 ; v21 = v13*v15*v18*v20+v12*v15*v17*v20+v5*v8*v15*v20 ; v22 = pow(v4,2) ; v23 = sqrt(v22+pow(v11,2)+pow(v1,2)) ; v24 = 1/v23 ; v25 = v4*v13*v24*v15-v1*v12*v24*v15 ; v26 = xb-xd ; v27 = zd+v10 ; v28 = 2*v27*v18+2*v26*v8 ; v29 = 1/pow(v19,3) ; v30 = v1*v5*v24*v15-v11*v13*v24*v15 ; v31 = v11*v12*v24*v15-v4*v5*v24*v15 ; v32 = v10+za ; v33 = 2*v32*v13+2*v3*v5 ; v34 = 1/pow(v14,3) ; v35 = 1/pow(v23,3) ; v36 = v13*v24*v15+v4*v32*v24*v15-v22*v13*v35*v15+v1*v4*v12*v35*v15-v4*v13*v33*v24*v34/2+v1*v12*v33*v24*v34/2 ; v37 = -v32*v11*v24*v15+v3*v1*v24*v15+v4*v11*v13*v35*v15-v1*v4*v5*v35*v15+v11*v13*v33*v24*v34/2-v1*v5*v33*v24*v34/2 ; v38 = -v5*v24*v15-v3*v4*v24*v15-v4*v11*v12*v35*v15+v22*v5*v35*v15-v11*v12*v33*v24*v34/2+v4*v5*v33*v24*v34/2 ; v39 = v38*v18*v20+v37*v17*v20+v31*v27*v20+v26*v25*v20+v8*v36*v20-v31*v18*v28*v29/2-v30*v17*v28*v29/2-v8*v25*v28*v29/2 ; v40 = v31*v18*v20+v30*v17*v20+v8*v25*v20 ; v41 = pow(v40,2)+pow(v21,2) ; v42 = 1/v41 ; v43 = v32*v15*v18*v20-v13*v33*v34*v18*v20/2-v12*v33*v34*v17*v20/2+v13*v15*v27*v20+v3*v8*v15*v20+v26*v5*v15*v20-v5*v8*v33*v34*v20/2-v13*v15*v18*v28*v29/2-v12*v15*v17*v28*v29/2-v5*v8*v15*v28*v29/2 ; v44 = 2*v39*v40+2*v43*v21 ; v45 = 1/pow(v41,2) ; v46 = pow(v28,2) ; v47 = 1/pow(v19,5) ; v48 = 2*pow(v27,2)+2*pow(v26,2) ; v49 = pow(v33,2) ; v50 = 1/pow(v14,5) ; v51 = 2*pow(v32,2)+2*pow(v3,2) ; v52 = 1/pow(v23,5) ; v53 = pow(v4,3) ; return 2*pow(v21*v39*v42-v43*v40*v42,2)*k+2*k*(-(-v32*v33*v34*v18*v20-v51*v13*v34*v18*v20/2+3*v13*v49*v50*v18*v20/4-v51*v12*v34*v17*v20/2+3*v12*v49*v50*v17*v20/4+2*v32*v15*v27*v20-v13*v33*v34*v27*v20+2*v3*v26*v15*v20-v3*v8*v33*v34*v20-v26*v5*v33*v34*v20-v5*v8*v51*v34*v20/2+3*v5*v8*v49*v50*v20/4-v13*v15*v18*v48*v29/2-v12*v15*v17*v48*v29/2-v5*v8*v15*v48*v29/2-v32*v15*v18*v28*v29+v13*v33*v34*v18*v28*v29/2+v12*v33*v34*v17*v28*v29/2-v13*v15*v27*v28*v29-v3*v8*v15*v28*v29-v26*v5*v15*v28*v29+v5*v8*v33*v34*v28*v29/2+3*v13*v15*v18*v46*v47/4+3*v12*v15*v17*v46*v47/4+3*v5*v8*v15*v46*v47/4)*v40*v42+v21*((-2*v3*v24*v15-v11*v12*v35*v15+2*v3*v22*v35*v15+3*v4*v5*v35*v15+3*v22*v11*v12*v52*v15-3*v53*v5*v52*v15+v5*v33*v24*v34+v3*v4*v33*v24*v34-v51*v11*v12*v24*v34/2+v4*v5*v51*v24*v34/2+v4*v11*v12*v33*v35*v34-v22*v5*v33*v35*v34+3*v11*v12*v49*v24*v50/4-3*v4*v5*v49*v24*v50/4)*v18*v20+(v11*v13*v35*v15+2*v4*v32*v11*v35*v15-v1*v5*v35*v15-2*v3*v1*v4*v35*v15-3*v22*v11*v13*v52*v15+3*v1*v22*v5*v52*v15+v32*v11*v33*v24*v34-v3*v1*v33*v24*v34+v51*v11*v13*v24*v34/2-v1*v5*v51*v24*v34/2-v4*v11*v13*v33*v35*v34+v1*v4*v5*v33*v35*v34-3*v11*v13*v49*v24*v50/4+3*v1*v5*v49*v24*v50/4)*v17*v20+2*v38*v27*v20+2*v26*v36*v20+v8*(2*v32*v24*v15-3*v4*v13*v35*v15+v1*v12*v35*v15-2*v22*v32*v35*v15+3*v53*v13*v52*v15-3*v1*v22*v12*v52*v15-v13*v33*v24*v34-v4*v32*v33*v24*v34-v4*v51*v13*v24*v34/2+v1*v51*v12*v24*v34/2+v22*v13*v33*v35*v34-v1*v4*v12*v33*v35*v34+3*v4*v13*v49*v24*v50/4-3*v1*v12*v49*v24*v50/4)*v20-v31*v18*v48*v29/2-v30*v17*v48*v29/2-v8*v25*v48*v29/2-v38*v18*v28*v29-v37*v17*v28*v29-v31*v27*v28*v29-v26*v25*v28*v29-v8*v36*v28*v29+3*v31*v18*v46*v47/4+3*v30*v17*v46*v47/4+3*v8*v25*v46*v47/4)*v42+v43*v40*v44*v45-v21*v39*v44*v45)*rad_subtraction(atan2(v40,v21), eq) ; }

double HarmonicDihedralConstraintFunctions::hessianYcZc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60 ; v1 = -xb ; v2 = xc+v1 ; v3 = yb-ya ; v4 = xb-xa ; v5 = yc-yb ; v6 = v4*v5-v2*v3 ; v7 = xd-xc ; v8 = yd-yc ; v9 = v2*v8-v7*v5 ; v10 = zb-za ; v11 = -zb ; v12 = zc+v11 ; v13 = v2*v10-v4*v12 ; v14 = v3*v12-v5*v10 ; v15 = sqrt(pow(v6,2)+pow(v14,2)+pow(v13,2)) ; v16 = 1/v15 ; v17 = zd-zc ; v18 = v7*v12-v2*v17 ; v19 = v5*v17-v8*v12 ; v20 = sqrt(pow(v9,2)+pow(v19,2)+pow(v18,2)) ; v21 = 1/v20 ; v22 = v14*v16*v19*v21+v13*v16*v18*v21+v6*v9*v16*v21 ; v23 = pow(v5,2) ; v24 = pow(v12,2) ; v25 = sqrt(v24+v23+pow(v2,2)) ; v26 = 1/v25 ; v27 = v5*v14*v26*v16-v2*v13*v26*v16 ; v28 = xd+v1 ; v29 = yb-yd ; v30 = 2*v29*v19+2*v28*v18 ; v31 = 1/pow(v20,3) ; v32 = v2*v6*v26*v16-v12*v14*v26*v16 ; v33 = v12*v13*v26*v16-v5*v6*v26*v16 ; v34 = v1+xa ; v35 = 2*v3*v14+2*v34*v13 ; v36 = 1/pow(v15,3) ; v37 = 1/pow(v25,3) ; v38 = v3*v5*v26*v16-v34*v2*v26*v16-v5*v12*v14*v37*v16+v2*v12*v13*v37*v16-v5*v14*v35*v26*v36/2+v2*v13*v35*v26*v36/2 ; v39 = -v14*v26*v16-v3*v12*v26*v16+v24*v14*v37*v16-v2*v6*v12*v37*v16+v12*v14*v35*v26*v36/2-v2*v6*v35*v26*v36/2 ; v40 = v13*v26*v16+v34*v12*v26*v16-v24*v13*v37*v16+v5*v6*v12*v37*v16-v12*v13*v35*v26*v36/2+v5*v6*v35*v26*v36/2 ; v41 = v40*v19*v21+v39*v18*v21+v28*v32*v21+v29*v33*v21+v9*v38*v21-v33*v19*v30*v31/2-v32*v18*v30*v31/2-v9*v27*v30*v31/2 ; v42 = v33*v19*v21+v32*v18*v21+v9*v27*v21 ; v43 = pow(v42,2)+pow(v22,2) ; v44 = 1/v43 ; v45 = v3*v16*v19*v21-v14*v35*v36*v19*v21/2+v34*v16*v18*v21-v13*v35*v36*v18*v21/2+v29*v14*v16*v21+v28*v13*v16*v21-v6*v9*v35*v36*v21/2-v14*v16*v19*v30*v31/2-v13*v16*v18*v30*v31/2-v6*v9*v16*v30*v31/2 ; v46 = xb-xd ; v47 = zd+v11 ; v48 = 2*v47*v19+2*v46*v9 ; v49 = v11+za ; v50 = 2*v49*v14+2*v4*v6 ; v51 = v14*v26*v16+v5*v49*v26*v16-v23*v14*v37*v16+v2*v5*v13*v37*v16-v5*v14*v50*v26*v36/2+v2*v13*v50*v26*v36/2 ; v52 = -v49*v12*v26*v16+v4*v2*v26*v16+v5*v12*v14*v37*v16-v2*v5*v6*v37*v16+v12*v14*v50*v26*v36/2-v2*v6*v50*v26*v36/2 ; v53 = -v6*v26*v16-v4*v5*v26*v16-v5*v12*v13*v37*v16+v23*v6*v37*v16-v12*v13*v50*v26*v36/2+v5*v6*v50*v26*v36/2 ; v54 = v53*v19*v21+v52*v18*v21+v33*v47*v21+v46*v27*v21+v9*v51*v21-v33*v19*v48*v31/2-v32*v18*v48*v31/2-v9*v27*v48*v31/2 ; v55 = v49*v16*v19*v21-v14*v50*v36*v19*v21/2-v13*v50*v36*v18*v21/2+v14*v16*v47*v21+v4*v9*v16*v21+v46*v6*v16*v21-v6*v9*v50*v36*v21/2-v14*v16*v19*v48*v31/2-v13*v16*v18*v48*v31/2-v6*v9*v16*v48*v31/2 ; v56 = 2*v41*v42+2*v45*v22 ; v57 = 1/pow(v43,2) ; v58 = 1/pow(v20,5) ; v59 = 1/pow(v15,5) ; v60 = 1/pow(v25,5) ; return 2*k*(-(-v3*v50*v36*v19*v21/2-v49*v35*v36*v19*v21/2-v3*v49*v14*v36*v19*v21+3*v14*v35*v50*v59*v19*v21/4-v34*v50*v36*v18*v21/2-v3*v49*v13*v36*v18*v21+3*v13*v35*v50*v59*v18*v21/4+v3*v16*v47*v21-v14*v35*v36*v47*v21/2+v29*v49*v16*v21-v29*v14*v50*v36*v21/2-v28*v13*v50*v36*v21/2-v4*v9*v35*v36*v21/2-v46*v6*v35*v36*v21/2-v3*v6*v9*v49*v36*v21+3*v6*v9*v35*v50*v59*v21/4-v3*v16*v19*v48*v31/2+v14*v35*v36*v19*v48*v31/4-v34*v16*v18*v48*v31/2+v13*v35*v36*v18*v48*v31/4-v29*v14*v16*v48*v31/2-v28*v13*v16*v48*v31/2+v6*v9*v35*v36*v48*v31/4-v49*v16*v19*v30*v31/2+v14*v50*v36*v19*v30*v31/4+v13*v50*v36*v18*v30*v31/4-v14*v16*v47*v30*v31/2-v4*v9*v16*v30*v31/2-v46*v6*v16*v30*v31/2+v6*v9*v50*v36*v30*v31/4-v29*v14*v16*v47*v19*v31-v29*v13*v16*v47*v18*v31-v6*v29*v9*v16*v47*v31+3*v14*v16*v19*v30*v48*v58/4+3*v13*v16*v18*v30*v48*v58/4+3*v6*v9*v16*v30*v48*v58/4)*v42*v44-v55*v41*v44+v45*v54*v44+v22*((-v5*v13*v37*v16+v6*v12*v37*v16+v4*v5*v12*v37*v16-v34*v5*v12*v37*v16+3*v5*v24*v13*v60*v16-3*v23*v6*v12*v60*v16-v13*v50*v26*v36/2-v34*v12*v50*v26*v36/2+v6*v35*v26*v36/2+v4*v5*v35*v26*v36/2-v3*v49*v12*v13*v26*v36+v3*v5*v6*v49*v26*v36+v24*v13*v50*v37*v36/2-v5*v6*v12*v50*v37*v36/2+v5*v12*v13*v35*v37*v36/2-v23*v6*v35*v37*v36/2+3*v12*v13*v35*v50*v26*v59/4-3*v5*v6*v35*v50*v26*v59/4)*v19*v21+(-v49*v26*v16+v49*v24*v37*v16+v5*v14*v37*v16+v3*v5*v12*v37*v16-v4*v2*v12*v37*v16-3*v5*v24*v14*v60*v16+3*v2*v5*v6*v12*v60*v16+v14*v50*v26*v36/2+v3*v12*v50*v26*v36/2+v49*v12*v35*v26*v36/2-v4*v2*v35*v26*v36/2+v3*v49*v12*v14*v26*v36-v2*v3*v6*v49*v26*v36-v24*v14*v50*v37*v36/2+v2*v6*v12*v50*v37*v36/2-v5*v12*v14*v35*v37*v36/2+v2*v5*v6*v35*v37*v36/2-3*v12*v14*v35*v50*v26*v59/4+3*v2*v6*v35*v50*v26*v59/4)*v18*v21+v40*v47*v21+v28*v52*v21+v29*v53*v21+v46*v38*v21+v9*(v3*v26*v16-v12*v14*v37*v16-v5*v49*v12*v37*v16-v3*v23*v37*v16+v34*v2*v5*v37*v16+3*v23*v12*v14*v60*v16-3*v2*v5*v12*v13*v60*v16-v3*v5*v50*v26*v36/2+v34*v2*v50*v26*v36/2-v14*v35*v26*v36/2-v5*v49*v35*v26*v36/2-v3*v5*v49*v14*v26*v36+v2*v3*v49*v13*v26*v36+v5*v12*v14*v50*v37*v36/2-v2*v12*v13*v50*v37*v36/2+v23*v14*v35*v37*v36/2-v2*v5*v13*v35*v37*v36/2+3*v5*v14*v35*v50*v26*v59/4-3*v2*v13*v35*v50*v26*v59/4)*v21-v40*v19*v48*v31/2-v39*v18*v48*v31/2-v28*v32*v48*v31/2-v29*v33*v48*v31/2-v9*v38*v48*v31/2-v53*v19*v30*v31/2-v52*v18*v30*v31/2-v33*v47*v30*v31/2-v46*v27*v30*v31/2-v9*v51*v30*v31/2-v29*v33*v47*v19*v31-v29*v32*v47*v18*v31-v29*v9*v27*v47*v31+3*v33*v19*v30*v48*v58/4+3*v32*v18*v30*v48*v58/4+3*v9*v27*v30*v48*v58/4)*v44+v55*v42*v56*v57-v22*v54*v56*v57)*rad_subtraction(atan2(v42,v22), eq)+2*k*(v22*v41*v44-v45*v42*v44)*(v22*v54*v44-v55*v42*v44) ; }

double HarmonicDihedralConstraintFunctions::hessianYcXd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = xd-xc ; v2 = yc-yb ; v3 = xc-xb ; v4 = -yc ; v5 = yd+v4 ; v6 = v3*v5-v1*v2 ; v7 = zb-za ; v8 = xb-xa ; v9 = -zb ; v10 = zc+v9 ; v11 = v3*v7-v8*v10 ; v12 = pow(v2,2) ; v13 = sqrt(pow(v3,2)+v12+pow(v10,2)) ; v14 = 1/v13 ; v15 = yb-ya ; v16 = v8*v2-v3*v15 ; v17 = v15*v10-v2*v7 ; v18 = sqrt(pow(v17,2)+pow(v16,2)+pow(v11,2)) ; v19 = 1/v18 ; v20 = v2*v17*v14*v19-v3*v11*v14*v19 ; v21 = v4+yb ; v22 = zd-zc ; v23 = v1*v10-v3*v22 ; v24 = 2*v10*v23+2*v21*v6 ; v25 = v2*v22-v5*v10 ; v26 = sqrt(pow(v6,2)+pow(v25,2)+pow(v23,2)) ; v27 = 1/pow(v26,3) ; v28 = v3*v16*v14*v19-v10*v17*v14*v19 ; v29 = v10*v11*v14*v19-v2*v16*v14*v19 ; v30 = 1/v26 ; v31 = v10*v28*v30+v21*v20*v30-v29*v25*v24*v27/2-v28*v23*v24*v27/2-v6*v20*v24*v27/2 ; v32 = v17*v19*v25*v30+v11*v19*v23*v30+v16*v6*v19*v30 ; v33 = v29*v25*v30+v28*v23*v30+v6*v20*v30 ; v34 = pow(v33,2)+pow(v32,2) ; v35 = 1/v34 ; v36 = v10*v11*v19*v30+v21*v16*v19*v30-v17*v19*v25*v24*v27/2-v11*v19*v23*v24*v27/2-v16*v6*v19*v24*v27/2 ; v37 = xb-xd ; v38 = zd+v9 ; v39 = 2*v38*v25+2*v37*v6 ; v40 = v9+za ; v41 = 2*v40*v17+2*v8*v16 ; v42 = 1/pow(v18,3) ; v43 = 1/pow(v13,3) ; v44 = v17*v14*v19+v2*v40*v14*v19-v12*v17*v43*v19+v3*v2*v11*v43*v19-v2*v17*v41*v14*v42/2+v3*v11*v41*v14*v42/2 ; v45 = -v40*v10*v14*v19+v8*v3*v14*v19+v2*v10*v17*v43*v19-v3*v2*v16*v43*v19+v10*v17*v41*v14*v42/2-v3*v16*v41*v14*v42/2 ; v46 = -v16*v14*v19-v8*v2*v14*v19-v2*v10*v11*v43*v19+v12*v16*v43*v19-v10*v11*v41*v14*v42/2+v2*v16*v41*v14*v42/2 ; v47 = v46*v25*v30+v45*v23*v30+v29*v38*v30+v37*v20*v30+v6*v44*v30-v29*v25*v39*v27/2-v28*v23*v39*v27/2-v6*v20*v39*v27/2 ; v48 = v40*v19*v25*v30-v17*v41*v42*v25*v30/2-v11*v41*v42*v23*v30/2+v17*v19*v38*v30+v8*v6*v19*v30+v37*v16*v19*v30-v16*v6*v41*v42*v30/2-v17*v19*v25*v39*v27/2-v11*v19*v23*v39*v27/2-v16*v6*v19*v39*v27/2 ; v49 = 2*v31*v33+2*v36*v32 ; v50 = 1/pow(v34,2) ; v51 = 1/pow(v26,5) ; v52 = 2*v37*v21-2*v6 ; return 2*k*(-(-v16*v19*v30+v8*v21*v19*v30-v10*v11*v41*v42*v30/2-v21*v16*v41*v42*v30/2-v10*v11*v19*v39*v27/2-v21*v16*v19*v39*v27/2-v40*v19*v25*v24*v27/2+v17*v41*v42*v25*v24*v27/4+v11*v41*v42*v23*v24*v27/4-v17*v19*v38*v24*v27/2-v8*v6*v19*v24*v27/2-v37*v16*v19*v24*v27/2+v16*v6*v41*v42*v24*v27/4-v52*v17*v19*v25*v27/2-v52*v11*v19*v23*v27/2-v16*v6*v52*v19*v27/2+3*v17*v19*v25*v24*v39*v51/4+3*v11*v19*v23*v24*v39*v51/4+3*v16*v6*v19*v24*v39*v51/4)*v33*v35+v36*v47*v35+(-v20*v30+v21*v44*v30+v10*v45*v30-v10*v28*v39*v27/2-v21*v20*v39*v27/2-v46*v25*v24*v27/2-v45*v23*v24*v27/2-v29*v38*v24*v27/2-v37*v20*v24*v27/2-v6*v44*v24*v27/2-v52*v29*v25*v27/2-v52*v28*v23*v27/2-v6*v52*v20*v27/2+3*v29*v25*v24*v39*v51/4+3*v28*v23*v24*v39*v51/4+3*v6*v20*v24*v39*v51/4)*v32*v35-v31*v48*v35+v48*v33*v49*v50-v32*v47*v49*v50)*rad_subtraction(atan2(v33,v32), eq)+2*k*(v31*v32*v35-v36*v33*v35)*(v32*v47*v35-v48*v33*v35) ; }

double HarmonicDihedralConstraintFunctions::hessianYcYd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = xd-xc ; v2 = yc-yb ; v3 = xc-xb ; v4 = yd-yc ; v5 = v3*v4-v1*v2 ; v6 = zb-za ; v7 = xb-xa ; v8 = -zb ; v9 = zc+v8 ; v10 = v3*v6-v7*v9 ; v11 = pow(v2,2) ; v12 = sqrt(pow(v9,2)+pow(v3,2)+v11) ; v13 = 1/v12 ; v14 = yb-ya ; v15 = v7*v2-v3*v14 ; v16 = v14*v9-v2*v6 ; v17 = sqrt(pow(v16,2)+pow(v15,2)+pow(v10,2)) ; v18 = 1/v17 ; v19 = v2*v16*v13*v18-v3*v10*v13*v18 ; v20 = -zc ; v21 = v20+zb ; v22 = zd+v20 ; v23 = v2*v22-v4*v9 ; v24 = 2*v21*v23+2*v3*v5 ; v25 = v1*v9-v3*v22 ; v26 = sqrt(pow(v5,2)+pow(v25,2)+pow(v23,2)) ; v27 = 1/pow(v26,3) ; v28 = v3*v15*v13*v18-v9*v16*v13*v18 ; v29 = v9*v10*v13*v18-v2*v15*v13*v18 ; v30 = 1/v26 ; v31 = v3*v19*v30+v21*v29*v30-v29*v23*v24*v27/2-v28*v25*v24*v27/2-v5*v19*v24*v27/2 ; v32 = v16*v18*v23*v30+v10*v18*v25*v30+v15*v5*v18*v30 ; v33 = v29*v23*v30+v28*v25*v30+v5*v19*v30 ; v34 = pow(v33,2)+pow(v32,2) ; v35 = 1/v34 ; v36 = v21*v16*v18*v30+v3*v15*v18*v30-v16*v18*v23*v24*v27/2-v10*v18*v25*v24*v27/2-v15*v5*v18*v24*v27/2 ; v37 = xb-xd ; v38 = zd+v8 ; v39 = 2*v38*v23+2*v37*v5 ; v40 = v8+za ; v41 = 2*v40*v16+2*v7*v15 ; v42 = 1/pow(v17,3) ; v43 = 1/pow(v12,3) ; v44 = v16*v13*v18+v2*v40*v13*v18-v11*v16*v43*v18+v3*v2*v10*v43*v18-v2*v16*v41*v13*v42/2+v3*v10*v41*v13*v42/2 ; v45 = -v40*v9*v13*v18+v7*v3*v13*v18+v2*v9*v16*v43*v18-v3*v2*v15*v43*v18+v9*v16*v41*v13*v42/2-v3*v15*v41*v13*v42/2 ; v46 = -v15*v13*v18-v7*v2*v13*v18-v2*v9*v10*v43*v18+v11*v15*v43*v18-v9*v10*v41*v13*v42/2+v2*v15*v41*v13*v42/2 ; v47 = v46*v23*v30+v45*v25*v30+v29*v38*v30+v37*v19*v30+v5*v44*v30-v29*v23*v39*v27/2-v28*v25*v39*v27/2-v5*v19*v39*v27/2 ; v48 = v40*v18*v23*v30-v16*v41*v42*v23*v30/2-v10*v41*v42*v25*v30/2+v16*v18*v38*v30+v7*v5*v18*v30+v37*v15*v18*v30-v15*v5*v41*v42*v30/2-v16*v18*v23*v39*v27/2-v10*v18*v25*v39*v27/2-v15*v5*v18*v39*v27/2 ; v49 = 2*v31*v33+2*v36*v32 ; v50 = 1/pow(v34,2) ; v51 = 1/pow(v26,5) ; v52 = 2*v21*v38+2*v3*v37 ; return 2*k*(-(v40*v21*v18*v30+v7*v3*v18*v30-v21*v16*v41*v42*v30/2-v3*v15*v41*v42*v30/2-v21*v16*v18*v39*v27/2-v3*v15*v18*v39*v27/2-v40*v18*v23*v24*v27/2+v16*v41*v42*v23*v24*v27/4+v10*v41*v42*v25*v24*v27/4-v16*v18*v38*v24*v27/2-v7*v5*v18*v24*v27/2-v37*v15*v18*v24*v27/2+v15*v5*v41*v42*v24*v27/4-v16*v18*v52*v23*v27/2-v10*v18*v52*v25*v27/2-v15*v5*v18*v52*v27/2+3*v16*v18*v23*v24*v39*v51/4+3*v10*v18*v25*v24*v39*v51/4+3*v15*v5*v18*v24*v39*v51/4)*v33*v35+v36*v47*v35+(v3*v44*v30+v21*v46*v30-v3*v19*v39*v27/2-v21*v29*v39*v27/2-v46*v23*v24*v27/2-v45*v25*v24*v27/2-v29*v38*v24*v27/2-v37*v19*v24*v27/2-v5*v44*v24*v27/2-v29*v52*v23*v27/2-v28*v52*v25*v27/2-v5*v19*v52*v27/2+3*v29*v23*v24*v39*v51/4+3*v28*v25*v24*v39*v51/4+3*v5*v19*v24*v39*v51/4)*v32*v35-v31*v48*v35+v48*v33*v49*v50-v32*v47*v49*v50)*rad_subtraction(atan2(v33,v32), eq)+2*k*(v31*v32*v35-v36*v33*v35)*(v32*v47*v35-v48*v33*v35) ; }

double HarmonicDihedralConstraintFunctions::hessianYcZd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = xc-xb ; v5 = yd-yc ; v6 = v4*v5-v2*v3 ; v7 = zb-za ; v8 = xb-xa ; v9 = -zb ; v10 = zc+v9 ; v11 = v4*v7-v8*v10 ; v12 = pow(v3,2) ; v13 = sqrt(pow(v4,2)+v12+pow(v10,2)) ; v14 = 1/v13 ; v15 = yb-ya ; v16 = v8*v3-v4*v15 ; v17 = v15*v10-v3*v7 ; v18 = sqrt(pow(v17,2)+pow(v16,2)+pow(v11,2)) ; v19 = 1/v18 ; v20 = v3*v17*v14*v19-v4*v11*v14*v19 ; v21 = v1+xb ; v22 = zd-zc ; v23 = v2*v10-v4*v22 ; v24 = v3*v22-v5*v10 ; v25 = 2*v3*v24+2*v21*v23 ; v26 = sqrt(pow(v6,2)+pow(v24,2)+pow(v23,2)) ; v27 = 1/pow(v26,3) ; v28 = v4*v16*v14*v19-v10*v17*v14*v19 ; v29 = v10*v11*v14*v19-v3*v16*v14*v19 ; v30 = 1/v26 ; v31 = v21*v28*v30+v3*v29*v30-v29*v24*v25*v27/2-v28*v23*v25*v27/2-v6*v20*v25*v27/2 ; v32 = v17*v19*v24*v30+v11*v19*v23*v30+v16*v6*v19*v30 ; v33 = v29*v24*v30+v28*v23*v30+v6*v20*v30 ; v34 = pow(v33,2)+pow(v32,2) ; v35 = 1/v34 ; v36 = v3*v17*v19*v30+v21*v11*v19*v30-v17*v19*v24*v25*v27/2-v11*v19*v23*v25*v27/2-v16*v6*v19*v25*v27/2 ; v37 = xb-xd ; v38 = zd+v9 ; v39 = 2*v38*v24+2*v37*v6 ; v40 = v9+za ; v41 = 2*v40*v17+2*v8*v16 ; v42 = 1/pow(v18,3) ; v43 = 1/pow(v13,3) ; v44 = v17*v14*v19+v3*v40*v14*v19-v12*v17*v43*v19+v4*v3*v11*v43*v19-v3*v17*v41*v14*v42/2+v4*v11*v41*v14*v42/2 ; v45 = -v40*v10*v14*v19+v8*v4*v14*v19+v3*v10*v17*v43*v19-v4*v3*v16*v43*v19+v10*v17*v41*v14*v42/2-v4*v16*v41*v14*v42/2 ; v46 = -v16*v14*v19-v8*v3*v14*v19-v3*v10*v11*v43*v19+v12*v16*v43*v19-v10*v11*v41*v14*v42/2+v3*v16*v41*v14*v42/2 ; v47 = v46*v24*v30+v45*v23*v30+v29*v38*v30+v37*v20*v30+v6*v44*v30-v29*v24*v39*v27/2-v28*v23*v39*v27/2-v6*v20*v39*v27/2 ; v48 = v40*v19*v24*v30-v17*v41*v42*v24*v30/2-v11*v41*v42*v23*v30/2+v17*v19*v38*v30+v8*v6*v19*v30+v37*v16*v19*v30-v16*v6*v41*v42*v30/2-v17*v19*v24*v39*v27/2-v11*v19*v23*v39*v27/2-v16*v6*v19*v39*v27/2 ; v49 = 2*v31*v33+2*v36*v32 ; v50 = 1/pow(v34,2) ; v51 = 1/pow(v26,5) ; v52 = 2*v24+2*v3*v38 ; return 2*k*(-(v17*v19*v30+v3*v40*v19*v30-v3*v17*v41*v42*v30/2-v21*v11*v41*v42*v30/2-v3*v17*v19*v39*v27/2-v21*v11*v19*v39*v27/2-v40*v19*v24*v25*v27/2+v17*v41*v42*v24*v25*v27/4+v11*v41*v42*v23*v25*v27/4-v17*v19*v38*v25*v27/2-v8*v6*v19*v25*v27/2-v37*v16*v19*v25*v27/2+v16*v6*v41*v42*v25*v27/4-v17*v19*v24*v52*v27/2-v11*v19*v23*v52*v27/2-v16*v6*v19*v52*v27/2+3*v17*v19*v24*v25*v39*v51/4+3*v11*v19*v23*v25*v39*v51/4+3*v16*v6*v19*v25*v39*v51/4)*v33*v35+v36*v47*v35+(v29*v30+v21*v45*v30+v3*v46*v30-v21*v28*v39*v27/2-v3*v29*v39*v27/2-v46*v24*v25*v27/2-v45*v23*v25*v27/2-v29*v38*v25*v27/2-v37*v20*v25*v27/2-v6*v44*v25*v27/2-v29*v24*v52*v27/2-v28*v23*v52*v27/2-v6*v20*v52*v27/2+3*v29*v24*v25*v39*v51/4+3*v28*v23*v25*v39*v51/4+3*v6*v20*v25*v39*v51/4)*v32*v35-v31*v48*v35+v48*v33*v49*v50-v32*v47*v49*v50)*rad_subtraction(atan2(v33,v32), eq)+2*k*(v31*v32*v35-v36*v33*v35)*(v32*v47*v35-v48*v33*v35) ; }

double HarmonicDihedralConstraintFunctions::hessianZcZc(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53 ; v1 = -xb ; v2 = xc+v1 ; v3 = yb-ya ; v4 = xb-xa ; v5 = yc-yb ; v6 = v4*v5-v2*v3 ; v7 = xd-xc ; v8 = yd-yc ; v9 = v2*v8-v7*v5 ; v10 = zb-za ; v11 = zc-zb ; v12 = v2*v10-v4*v11 ; v13 = v3*v11-v5*v10 ; v14 = sqrt(pow(v6,2)+pow(v13,2)+pow(v12,2)) ; v15 = 1/v14 ; v16 = zd-zc ; v17 = v7*v11-v2*v16 ; v18 = v5*v16-v8*v11 ; v19 = sqrt(pow(v9,2)+pow(v18,2)+pow(v17,2)) ; v20 = 1/v19 ; v21 = v13*v15*v18*v20+v12*v15*v17*v20+v6*v9*v15*v20 ; v22 = pow(v11,2) ; v23 = sqrt(pow(v5,2)+v22+pow(v2,2)) ; v24 = 1/v23 ; v25 = v5*v13*v24*v15-v2*v12*v24*v15 ; v26 = xd+v1 ; v27 = yb-yd ; v28 = 2*v27*v18+2*v26*v17 ; v29 = 1/pow(v19,3) ; v30 = v2*v6*v24*v15-v11*v13*v24*v15 ; v31 = v11*v12*v24*v15-v5*v6*v24*v15 ; v32 = v1+xa ; v33 = 2*v3*v13+2*v32*v12 ; v34 = 1/pow(v14,3) ; v35 = 1/pow(v23,3) ; v36 = v3*v5*v24*v15-v32*v2*v24*v15-v5*v11*v13*v35*v15+v2*v11*v12*v35*v15-v5*v13*v33*v24*v34/2+v2*v12*v33*v24*v34/2 ; v37 = -v13*v24*v15-v3*v11*v24*v15+v22*v13*v35*v15-v2*v6*v11*v35*v15+v11*v13*v33*v24*v34/2-v2*v6*v33*v24*v34/2 ; v38 = v12*v24*v15+v32*v11*v24*v15-v22*v12*v35*v15+v5*v6*v11*v35*v15-v11*v12*v33*v24*v34/2+v5*v6*v33*v24*v34/2 ; v39 = v38*v18*v20+v37*v17*v20+v26*v30*v20+v27*v31*v20+v9*v36*v20-v31*v18*v28*v29/2-v30*v17*v28*v29/2-v9*v25*v28*v29/2 ; v40 = v31*v18*v20+v30*v17*v20+v9*v25*v20 ; v41 = pow(v40,2)+pow(v21,2) ; v42 = 1/v41 ; v43 = v3*v15*v18*v20-v13*v33*v34*v18*v20/2+v32*v15*v17*v20-v12*v33*v34*v17*v20/2+v27*v13*v15*v20+v26*v12*v15*v20-v6*v9*v33*v34*v20/2-v13*v15*v18*v28*v29/2-v12*v15*v17*v28*v29/2-v6*v9*v15*v28*v29/2 ; v44 = 2*v39*v40+2*v43*v21 ; v45 = 1/pow(v41,2) ; v46 = pow(v28,2) ; v47 = 1/pow(v19,5) ; v48 = 2*pow(v27,2)+2*pow(v26,2) ; v49 = pow(v33,2) ; v50 = 1/pow(v14,5) ; v51 = 2*pow(v32,2)+2*pow(v3,2) ; v52 = 1/pow(v23,5) ; v53 = pow(v11,3) ; return 2*pow(v21*v39*v42-v43*v40*v42,2)*k+2*k*(-(-v3*v33*v34*v18*v20-v51*v13*v34*v18*v20/2+3*v13*v49*v50*v18*v20/4-v32*v33*v34*v17*v20-v51*v12*v34*v17*v20/2+3*v12*v49*v50*v17*v20/4+2*v3*v27*v15*v20+2*v32*v26*v15*v20-v27*v13*v33*v34*v20-v26*v12*v33*v34*v20-v51*v6*v9*v34*v20/2+3*v6*v9*v49*v50*v20/4-v3*v15*v18*v28*v29+v13*v33*v34*v18*v28*v29/2-v32*v15*v17*v28*v29+v12*v33*v34*v17*v28*v29/2-v27*v13*v15*v28*v29-v26*v12*v15*v28*v29+v6*v9*v33*v34*v28*v29/2-v48*v13*v15*v18*v29/2-v48*v12*v15*v17*v29/2-v6*v48*v9*v15*v29/2+3*v13*v15*v18*v46*v47/4+3*v12*v15*v17*v46*v47/4+3*v6*v9*v15*v46*v47/4)*v40*v42+v21*((2*v32*v24*v15-2*v32*v22*v35*v15-3*v11*v12*v35*v15+v5*v6*v35*v15-3*v5*v6*v22*v52*v15+3*v53*v12*v52*v15-v12*v33*v24*v34-v32*v11*v33*v24*v34-v51*v11*v12*v24*v34/2+v51*v5*v6*v24*v34/2+v22*v12*v33*v35*v34-v5*v6*v11*v33*v35*v34+3*v11*v12*v49*v24*v50/4-3*v5*v6*v49*v24*v50/4)*v18*v20+(-2*v3*v24*v15+2*v3*v22*v35*v15+3*v11*v13*v35*v15-v2*v6*v35*v15+3*v2*v6*v22*v52*v15-3*v53*v13*v52*v15+v13*v33*v24*v34+v3*v11*v33*v24*v34+v51*v11*v13*v24*v34/2-v2*v51*v6*v24*v34/2-v22*v13*v33*v35*v34+v2*v6*v11*v33*v35*v34-3*v11*v13*v49*v24*v50/4+3*v2*v6*v49*v24*v50/4)*v17*v20+2*v26*v37*v20+2*v27*v38*v20+v9*(-v5*v13*v35*v15+v2*v12*v35*v15-2*v3*v5*v11*v35*v15+2*v32*v2*v11*v35*v15+3*v5*v22*v13*v52*v15-3*v2*v22*v12*v52*v15-v3*v5*v33*v24*v34+v32*v2*v33*v24*v34-v51*v5*v13*v24*v34/2+v2*v51*v12*v24*v34/2+v5*v11*v13*v33*v35*v34-v2*v11*v12*v33*v35*v34+3*v5*v13*v49*v24*v50/4-3*v2*v12*v49*v24*v50/4)*v20-v38*v18*v28*v29-v37*v17*v28*v29-v26*v30*v28*v29-v27*v31*v28*v29-v9*v36*v28*v29-v48*v31*v18*v29/2-v48*v30*v17*v29/2-v48*v9*v25*v29/2+3*v31*v18*v46*v47/4+3*v30*v17*v46*v47/4+3*v9*v25*v46*v47/4)*v42+v43*v40*v44*v45-v21*v39*v44*v45)*rad_subtraction(atan2(v40,v21), eq) ; }

double HarmonicDihedralConstraintFunctions::hessianZcXd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = xd-xc ; v2 = yc-yb ; v3 = -xb ; v4 = xc+v3 ; v5 = -yc ; v6 = yd+v5 ; v7 = v4*v6-v1*v2 ; v8 = zb-za ; v9 = xb-xa ; v10 = zc-zb ; v11 = v4*v8-v9*v10 ; v12 = pow(v10,2) ; v13 = sqrt(pow(v4,2)+pow(v2,2)+v12) ; v14 = 1/v13 ; v15 = yb-ya ; v16 = v9*v2-v4*v15 ; v17 = v15*v10-v2*v8 ; v18 = sqrt(pow(v17,2)+pow(v16,2)+pow(v11,2)) ; v19 = 1/v18 ; v20 = v2*v17*v14*v19-v4*v11*v14*v19 ; v21 = v5+yb ; v22 = zd-zc ; v23 = v1*v10-v4*v22 ; v24 = 2*v10*v23+2*v21*v7 ; v25 = v2*v22-v6*v10 ; v26 = sqrt(pow(v7,2)+pow(v25,2)+pow(v23,2)) ; v27 = 1/pow(v26,3) ; v28 = v4*v16*v14*v19-v10*v17*v14*v19 ; v29 = v10*v11*v14*v19-v2*v16*v14*v19 ; v30 = 1/v26 ; v31 = v10*v28*v30+v21*v20*v30-v29*v25*v24*v27/2-v28*v23*v24*v27/2-v7*v20*v24*v27/2 ; v32 = v17*v19*v25*v30+v11*v19*v23*v30+v16*v7*v19*v30 ; v33 = v29*v25*v30+v28*v23*v30+v7*v20*v30 ; v34 = pow(v33,2)+pow(v32,2) ; v35 = 1/v34 ; v36 = v10*v11*v19*v30+v21*v16*v19*v30-v17*v19*v25*v24*v27/2-v11*v19*v23*v24*v27/2-v16*v7*v19*v24*v27/2 ; v37 = xd+v3 ; v38 = yb-yd ; v39 = 2*v38*v25+2*v37*v23 ; v40 = v3+xa ; v41 = 2*v15*v17+2*v40*v11 ; v42 = 1/pow(v18,3) ; v43 = 1/pow(v13,3) ; v44 = v15*v2*v14*v19-v40*v4*v14*v19-v2*v10*v17*v43*v19+v4*v10*v11*v43*v19-v2*v17*v41*v14*v42/2+v4*v11*v41*v14*v42/2 ; v45 = -v17*v14*v19-v15*v10*v14*v19+v12*v17*v43*v19-v4*v16*v10*v43*v19+v10*v17*v41*v14*v42/2-v4*v16*v41*v14*v42/2 ; v46 = v11*v14*v19+v40*v10*v14*v19-v12*v11*v43*v19+v2*v16*v10*v43*v19-v10*v11*v41*v14*v42/2+v2*v16*v41*v14*v42/2 ; v47 = v46*v25*v30+v45*v23*v30+v37*v28*v30+v38*v29*v30+v7*v44*v30-v29*v25*v39*v27/2-v28*v23*v39*v27/2-v7*v20*v39*v27/2 ; v48 = v15*v19*v25*v30-v17*v41*v42*v25*v30/2+v40*v19*v23*v30-v11*v41*v42*v23*v30/2+v38*v17*v19*v30+v37*v11*v19*v30-v16*v7*v41*v42*v30/2-v17*v19*v25*v39*v27/2-v11*v19*v23*v39*v27/2-v16*v7*v19*v39*v27/2 ; v49 = 2*v31*v33+2*v36*v32 ; v50 = 1/pow(v34,2) ; v51 = 1/pow(v26,5) ; v52 = 2*v23+2*v37*v10 ; return 2*k*(-(v11*v19*v30+v40*v10*v19*v30-v10*v11*v41*v42*v30/2-v21*v16*v41*v42*v30/2-v10*v11*v19*v39*v27/2-v21*v16*v19*v39*v27/2-v15*v19*v25*v24*v27/2+v17*v41*v42*v25*v24*v27/4-v40*v19*v23*v24*v27/2+v11*v41*v42*v23*v24*v27/4-v38*v17*v19*v24*v27/2-v37*v11*v19*v24*v27/2+v16*v7*v41*v42*v24*v27/4-v17*v19*v25*v52*v27/2-v11*v19*v23*v52*v27/2-v16*v7*v19*v52*v27/2+3*v17*v19*v25*v24*v39*v51/4+3*v11*v19*v23*v24*v39*v51/4+3*v16*v7*v19*v24*v39*v51/4)*v33*v35+v36*v47*v35+(v28*v30+v10*v45*v30+v21*v44*v30-v10*v28*v39*v27/2-v21*v20*v39*v27/2-v46*v25*v24*v27/2-v45*v23*v24*v27/2-v37*v28*v24*v27/2-v38*v29*v24*v27/2-v7*v44*v24*v27/2-v29*v25*v52*v27/2-v28*v23*v52*v27/2-v7*v20*v52*v27/2+3*v29*v25*v24*v39*v51/4+3*v28*v23*v24*v39*v51/4+3*v7*v20*v24*v39*v51/4)*v32*v35-v31*v48*v35+v48*v33*v49*v50-v32*v47*v49*v50)*rad_subtraction(atan2(v33,v32), eq)+2*k*(v31*v32*v35-v36*v33*v35)*(v32*v47*v35-v48*v33*v35) ; }

double HarmonicDihedralConstraintFunctions::hessianZcYd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = xd-xc ; v2 = yc-yb ; v3 = -xb ; v4 = xc+v3 ; v5 = yd-yc ; v6 = v4*v5-v1*v2 ; v7 = zb-za ; v8 = xb-xa ; v9 = zc-zb ; v10 = v4*v7-v8*v9 ; v11 = pow(v9,2) ; v12 = sqrt(pow(v4,2)+pow(v2,2)+v11) ; v13 = 1/v12 ; v14 = yb-ya ; v15 = v8*v2-v4*v14 ; v16 = v14*v9-v2*v7 ; v17 = sqrt(pow(v16,2)+pow(v15,2)+pow(v10,2)) ; v18 = 1/v17 ; v19 = v2*v16*v13*v18-v4*v10*v13*v18 ; v20 = -zc ; v21 = v20+zb ; v22 = zd+v20 ; v23 = v2*v22-v5*v9 ; v24 = 2*v21*v23+2*v4*v6 ; v25 = v1*v9-v4*v22 ; v26 = sqrt(pow(v6,2)+pow(v25,2)+pow(v23,2)) ; v27 = 1/pow(v26,3) ; v28 = v4*v15*v13*v18-v9*v16*v13*v18 ; v29 = v9*v10*v13*v18-v2*v15*v13*v18 ; v30 = 1/v26 ; v31 = v4*v19*v30+v21*v29*v30-v29*v23*v24*v27/2-v28*v25*v24*v27/2-v6*v19*v24*v27/2 ; v32 = v16*v18*v23*v30+v10*v18*v25*v30+v15*v6*v18*v30 ; v33 = v29*v23*v30+v28*v25*v30+v6*v19*v30 ; v34 = pow(v33,2)+pow(v32,2) ; v35 = 1/v34 ; v36 = v21*v16*v18*v30+v4*v15*v18*v30-v16*v18*v23*v24*v27/2-v10*v18*v25*v24*v27/2-v15*v6*v18*v24*v27/2 ; v37 = xd+v3 ; v38 = yb-yd ; v39 = 2*v38*v23+2*v37*v25 ; v40 = v3+xa ; v41 = 2*v14*v16+2*v40*v10 ; v42 = 1/pow(v17,3) ; v43 = 1/pow(v12,3) ; v44 = v14*v2*v13*v18-v40*v4*v13*v18-v2*v9*v16*v43*v18+v4*v9*v10*v43*v18-v2*v16*v41*v13*v42/2+v4*v10*v41*v13*v42/2 ; v45 = -v16*v13*v18-v14*v9*v13*v18+v11*v16*v43*v18-v4*v15*v9*v43*v18+v9*v16*v41*v13*v42/2-v4*v15*v41*v13*v42/2 ; v46 = v10*v13*v18+v40*v9*v13*v18-v11*v10*v43*v18+v2*v15*v9*v43*v18-v9*v10*v41*v13*v42/2+v2*v15*v41*v13*v42/2 ; v47 = v46*v23*v30+v45*v25*v30+v37*v28*v30+v38*v29*v30+v6*v44*v30-v29*v23*v39*v27/2-v28*v25*v39*v27/2-v6*v19*v39*v27/2 ; v48 = v14*v18*v23*v30-v16*v41*v42*v23*v30/2+v40*v18*v25*v30-v10*v41*v42*v25*v30/2+v38*v16*v18*v30+v37*v10*v18*v30-v15*v6*v41*v42*v30/2-v16*v18*v23*v39*v27/2-v10*v18*v25*v39*v27/2-v15*v6*v18*v39*v27/2 ; v49 = 2*v31*v33+2*v36*v32 ; v50 = 1/pow(v34,2) ; v51 = 1/pow(v26,5) ; v52 = 2*v38*v21-2*v23 ; return 2*k*(-(-v16*v18*v30+v14*v21*v18*v30-v21*v16*v41*v42*v30/2-v4*v15*v41*v42*v30/2-v14*v18*v23*v24*v27/2+v16*v41*v42*v23*v24*v27/4-v40*v18*v25*v24*v27/2+v10*v41*v42*v25*v24*v27/4-v38*v16*v18*v24*v27/2-v37*v10*v18*v24*v27/2+v15*v6*v41*v42*v24*v27/4-v21*v16*v18*v39*v27/2-v4*v15*v18*v39*v27/2-v16*v18*v23*v52*v27/2-v10*v18*v25*v52*v27/2-v15*v6*v18*v52*v27/2+3*v16*v18*v23*v39*v24*v51/4+3*v10*v18*v25*v39*v24*v51/4+3*v15*v6*v18*v39*v24*v51/4)*v33*v35+v36*v47*v35+(-v29*v30+v21*v46*v30+v4*v44*v30-v46*v23*v24*v27/2-v45*v25*v24*v27/2-v37*v28*v24*v27/2-v38*v29*v24*v27/2-v6*v44*v24*v27/2-v4*v19*v39*v27/2-v21*v29*v39*v27/2-v29*v23*v52*v27/2-v28*v25*v52*v27/2-v6*v19*v52*v27/2+3*v29*v23*v39*v24*v51/4+3*v28*v25*v39*v24*v51/4+3*v6*v19*v39*v24*v51/4)*v32*v35-v31*v48*v35+v48*v33*v49*v50-v32*v47*v49*v50)*rad_subtraction(atan2(v33,v32), eq)+2*k*(v31*v32*v35-v36*v33*v35)*(v32*v47*v35-v48*v33*v35) ; }

double HarmonicDihedralConstraintFunctions::hessianZcZd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = -xb ; v5 = xc+v4 ; v6 = yd-yc ; v7 = v5*v6-v2*v3 ; v8 = zb-za ; v9 = xb-xa ; v10 = zc-zb ; v11 = v5*v8-v9*v10 ; v12 = pow(v10,2) ; v13 = sqrt(pow(v5,2)+pow(v3,2)+v12) ; v14 = 1/v13 ; v15 = yb-ya ; v16 = v9*v3-v5*v15 ; v17 = v15*v10-v3*v8 ; v18 = sqrt(pow(v17,2)+pow(v16,2)+pow(v11,2)) ; v19 = 1/v18 ; v20 = v3*v17*v14*v19-v5*v11*v14*v19 ; v21 = v1+xb ; v22 = zd-zc ; v23 = v2*v10-v5*v22 ; v24 = v3*v22-v6*v10 ; v25 = 2*v3*v24+2*v21*v23 ; v26 = sqrt(pow(v7,2)+pow(v24,2)+pow(v23,2)) ; v27 = 1/pow(v26,3) ; v28 = v5*v16*v14*v19-v10*v17*v14*v19 ; v29 = v10*v11*v14*v19-v3*v16*v14*v19 ; v30 = 1/v26 ; v31 = v21*v28*v30+v3*v29*v30-v29*v24*v25*v27/2-v28*v23*v25*v27/2-v7*v20*v25*v27/2 ; v32 = v17*v19*v24*v30+v11*v19*v23*v30+v16*v7*v19*v30 ; v33 = v29*v24*v30+v28*v23*v30+v7*v20*v30 ; v34 = pow(v33,2)+pow(v32,2) ; v35 = 1/v34 ; v36 = v3*v17*v19*v30+v21*v11*v19*v30-v17*v19*v24*v25*v27/2-v11*v19*v23*v25*v27/2-v16*v7*v19*v25*v27/2 ; v37 = xd+v4 ; v38 = yb-yd ; v39 = 2*v38*v24+2*v37*v23 ; v40 = v4+xa ; v41 = 2*v15*v17+2*v40*v11 ; v42 = 1/pow(v18,3) ; v43 = 1/pow(v13,3) ; v44 = v15*v3*v14*v19-v40*v5*v14*v19-v3*v10*v17*v43*v19+v5*v10*v11*v43*v19-v3*v17*v41*v14*v42/2+v5*v11*v41*v14*v42/2 ; v45 = -v17*v14*v19-v15*v10*v14*v19+v12*v17*v43*v19-v5*v16*v10*v43*v19+v10*v17*v41*v14*v42/2-v5*v16*v41*v14*v42/2 ; v46 = v11*v14*v19+v40*v10*v14*v19-v12*v11*v43*v19+v3*v16*v10*v43*v19-v10*v11*v41*v14*v42/2+v3*v16*v41*v14*v42/2 ; v47 = v46*v24*v30+v45*v23*v30+v37*v28*v30+v38*v29*v30+v7*v44*v30-v29*v24*v39*v27/2-v28*v23*v39*v27/2-v7*v20*v39*v27/2 ; v48 = v15*v19*v24*v30-v17*v41*v42*v24*v30/2+v40*v19*v23*v30-v11*v41*v42*v23*v30/2+v38*v17*v19*v30+v37*v11*v19*v30-v16*v7*v41*v42*v30/2-v17*v19*v24*v39*v27/2-v11*v19*v23*v39*v27/2-v16*v7*v19*v39*v27/2 ; v49 = 2*v31*v33+2*v36*v32 ; v50 = 1/pow(v34,2) ; v51 = 1/pow(v26,5) ; v52 = 2*v3*v38+2*v21*v37 ; return 2*k*(-(v15*v3*v19*v30+v40*v21*v19*v30-v3*v17*v41*v42*v30/2-v21*v11*v41*v42*v30/2-v3*v17*v19*v39*v27/2-v21*v11*v19*v39*v27/2-v15*v19*v24*v25*v27/2+v17*v41*v42*v24*v25*v27/4-v40*v19*v23*v25*v27/2+v11*v41*v42*v23*v25*v27/4-v38*v17*v19*v25*v27/2-v37*v11*v19*v25*v27/2+v16*v7*v41*v42*v25*v27/4-v52*v17*v19*v24*v27/2-v52*v11*v19*v23*v27/2-v16*v52*v7*v19*v27/2+3*v17*v19*v24*v25*v39*v51/4+3*v11*v19*v23*v25*v39*v51/4+3*v16*v7*v19*v25*v39*v51/4)*v33*v35+v36*v47*v35+(v21*v45*v30+v3*v46*v30-v21*v28*v39*v27/2-v3*v29*v39*v27/2-v46*v24*v25*v27/2-v45*v23*v25*v27/2-v37*v28*v25*v27/2-v38*v29*v25*v27/2-v7*v44*v25*v27/2-v52*v29*v24*v27/2-v52*v28*v23*v27/2-v52*v7*v20*v27/2+3*v29*v24*v25*v39*v51/4+3*v28*v23*v25*v39*v51/4+3*v7*v20*v25*v39*v51/4)*v32*v35-v31*v48*v35+v48*v33*v49*v50-v32*v47*v49*v50)*rad_subtraction(atan2(v33,v32), eq)+2*k*(v31*v32*v35-v36*v33*v35)*(v32*v47*v35-v48*v33*v35) ; }

double HarmonicDihedralConstraintFunctions::hessianXdXd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38 ; v1 = xd-xc ; v2 = yc-yb ; v3 = xc-xb ; v4 = -yc ; v5 = yd+v4 ; v6 = v3*v5-v1*v2 ; v7 = zb-za ; v8 = xb-xa ; v9 = zc-zb ; v10 = v3*v7-v8*v9 ; v11 = pow(v9,2) ; v12 = 1/sqrt(pow(v3,2)+pow(v2,2)+v11) ; v13 = yb-ya ; v14 = v8*v2-v3*v13 ; v15 = v13*v9-v2*v7 ; v16 = 1/sqrt(pow(v15,2)+pow(v14,2)+pow(v10,2)) ; v17 = v2*v15*v12*v16-v3*v10*v12*v16 ; v18 = v4+yb ; v19 = zd-zc ; v20 = v1*v9-v3*v19 ; v21 = 2*v9*v20+2*v18*v6 ; v22 = v2*v19-v5*v9 ; v23 = sqrt(pow(v6,2)+pow(v22,2)+pow(v20,2)) ; v24 = 1/pow(v23,3) ; v25 = v3*v14*v12*v16-v9*v15*v12*v16 ; v26 = v9*v10*v12*v16-v2*v14*v12*v16 ; v27 = 1/v23 ; v28 = v9*v25*v27+v18*v17*v27-v26*v22*v21*v24/2-v25*v20*v21*v24/2-v6*v17*v21*v24/2 ; v29 = v15*v16*v22*v27+v10*v16*v20*v27+v14*v6*v16*v27 ; v30 = v26*v22*v27+v25*v20*v27+v6*v17*v27 ; v31 = pow(v30,2)+pow(v29,2) ; v32 = 1/v31 ; v33 = v9*v10*v16*v27+v18*v14*v16*v27-v15*v16*v22*v21*v24/2-v10*v16*v20*v21*v24/2-v14*v6*v16*v21*v24/2 ; v34 = 2*v28*v30+2*v33*v29 ; v35 = 1/pow(v31,2) ; v36 = pow(v21,2) ; v37 = 1/pow(v23,5) ; v38 = 2*pow(v18,2)+2*v11 ; return 2*pow(v28*v29*v32-v33*v30*v32,2)*k+2*k*(-(-v9*v10*v16*v21*v24-v18*v14*v16*v21*v24-v15*v38*v16*v22*v24/2-v10*v38*v16*v20*v24/2-v14*v6*v38*v16*v24/2+3*v15*v16*v22*v36*v37/4+3*v10*v16*v20*v36*v37/4+3*v14*v6*v16*v36*v37/4)*v30*v32+(-v9*v25*v21*v24-v18*v17*v21*v24-v38*v26*v22*v24/2-v38*v25*v20*v24/2-v6*v38*v17*v24/2+3*v26*v22*v36*v37/4+3*v25*v20*v36*v37/4+3*v6*v17*v36*v37/4)*v29*v32+v33*v30*v34*v35-v28*v29*v34*v35)*rad_subtraction(atan2(v30,v29), eq) ; }

double HarmonicDihedralConstraintFunctions::hessianXdYd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40 ; v1 = xd-xc ; v2 = yc-yb ; v3 = xc-xb ; v4 = -yc ; v5 = yd+v4 ; v6 = v3*v5-v1*v2 ; v7 = zb-za ; v8 = xb-xa ; v9 = zc-zb ; v10 = v3*v7-v8*v9 ; v11 = 1/sqrt(pow(v9,2)+pow(v3,2)+pow(v2,2)) ; v12 = yb-ya ; v13 = v8*v2-v3*v12 ; v14 = v12*v9-v2*v7 ; v15 = 1/sqrt(pow(v14,2)+pow(v13,2)+pow(v10,2)) ; v16 = v2*v14*v11*v15-v3*v10*v11*v15 ; v17 = v4+yb ; v18 = -zc ; v19 = zd+v18 ; v20 = v1*v9-v3*v19 ; v21 = 2*v9*v20+2*v17*v6 ; v22 = v2*v19-v5*v9 ; v23 = sqrt(pow(v6,2)+pow(v22,2)+pow(v20,2)) ; v24 = 1/pow(v23,3) ; v25 = v3*v13*v11*v15-v9*v14*v11*v15 ; v26 = v9*v10*v11*v15-v2*v13*v11*v15 ; v27 = 1/v23 ; v28 = v9*v25*v27+v17*v16*v27-v26*v22*v21*v24/2-v25*v20*v21*v24/2-v6*v16*v21*v24/2 ; v29 = v14*v15*v22*v27+v10*v15*v20*v27+v13*v6*v15*v27 ; v30 = v26*v22*v27+v25*v20*v27+v6*v16*v27 ; v31 = pow(v30,2)+pow(v29,2) ; v32 = 1/v31 ; v33 = v9*v10*v15*v27+v17*v13*v15*v27-v14*v15*v22*v21*v24/2-v10*v15*v20*v21*v24/2-v13*v6*v15*v21*v24/2 ; v34 = v18+zb ; v35 = 2*v34*v22+2*v3*v6 ; v36 = v3*v16*v27+v34*v26*v27-v26*v22*v35*v24/2-v25*v20*v35*v24/2-v6*v16*v35*v24/2 ; v37 = v34*v14*v15*v27+v3*v13*v15*v27-v14*v15*v22*v35*v24/2-v10*v15*v20*v35*v24/2-v13*v6*v15*v35*v24/2 ; v38 = 2*v36*v30+2*v37*v29 ; v39 = 1/pow(v31,2) ; v40 = 1/pow(v23,5) ; return 2*k*(-(-v9*v10*v15*v35*v24/2-v17*v13*v15*v35*v24/2-v34*v14*v15*v21*v24/2-v3*v13*v15*v21*v24/2-v3*v17*v14*v15*v22*v24-v3*v17*v10*v15*v20*v24-v3*v17*v13*v6*v15*v24+3*v14*v15*v22*v21*v35*v40/4+3*v10*v15*v20*v21*v35*v40/4+3*v13*v6*v15*v21*v35*v40/4)*v30*v32+(-v9*v25*v35*v24/2-v17*v16*v35*v24/2-v3*v16*v21*v24/2-v34*v26*v21*v24/2-v3*v17*v26*v22*v24-v3*v17*v25*v20*v24-v3*v17*v6*v16*v24+3*v26*v22*v21*v35*v40/4+3*v25*v20*v21*v35*v40/4+3*v6*v16*v21*v35*v40/4)*v29*v32+v37*v28*v32-v33*v36*v32+v33*v30*v38*v39-v28*v29*v38*v39)*rad_subtraction(atan2(v30,v29), eq)+2*k*(v28*v29*v32-v33*v30*v32)*(v36*v29*v32-v37*v30*v32) ; }

double HarmonicDihedralConstraintFunctions::hessianXdZd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = xc-xb ; v5 = -yc ; v6 = yd+v5 ; v7 = v4*v6-v2*v3 ; v8 = zb-za ; v9 = xb-xa ; v10 = zc-zb ; v11 = v4*v8-v9*v10 ; v12 = 1/sqrt(pow(v4,2)+pow(v3,2)+pow(v10,2)) ; v13 = yb-ya ; v14 = v9*v3-v4*v13 ; v15 = v13*v10-v3*v8 ; v16 = 1/sqrt(pow(v15,2)+pow(v14,2)+pow(v11,2)) ; v17 = v3*v15*v12*v16-v4*v11*v12*v16 ; v18 = v5+yb ; v19 = zd-zc ; v20 = v2*v10-v4*v19 ; v21 = 2*v10*v20+2*v18*v7 ; v22 = v3*v19-v6*v10 ; v23 = sqrt(pow(v7,2)+pow(v22,2)+pow(v20,2)) ; v24 = 1/pow(v23,3) ; v25 = v4*v14*v12*v16-v10*v15*v12*v16 ; v26 = v10*v11*v12*v16-v3*v14*v12*v16 ; v27 = 1/v23 ; v28 = v10*v25*v27+v18*v17*v27-v26*v22*v21*v24/2-v25*v20*v21*v24/2-v7*v17*v21*v24/2 ; v29 = v15*v16*v22*v27+v11*v16*v20*v27+v14*v7*v16*v27 ; v30 = v26*v22*v27+v25*v20*v27+v7*v17*v27 ; v31 = pow(v30,2)+pow(v29,2) ; v32 = 1/v31 ; v33 = v10*v11*v16*v27+v18*v14*v16*v27-v15*v16*v22*v21*v24/2-v11*v16*v20*v21*v24/2-v14*v7*v16*v21*v24/2 ; v34 = v1+xb ; v35 = 2*v3*v22+2*v34*v20 ; v36 = v34*v25*v27+v3*v26*v27-v26*v22*v35*v24/2-v25*v20*v35*v24/2-v7*v17*v35*v24/2 ; v37 = v3*v15*v16*v27+v34*v11*v16*v27-v15*v16*v22*v35*v24/2-v11*v16*v20*v35*v24/2-v14*v7*v16*v35*v24/2 ; v38 = 2*v36*v30+2*v37*v29 ; v39 = 1/pow(v31,2) ; v40 = 1/pow(v23,5) ; return 2*k*(-(-v10*v11*v16*v35*v24/2-v18*v14*v16*v35*v24/2-v3*v15*v16*v21*v24/2-v34*v11*v16*v21*v24/2-v34*v10*v15*v16*v22*v24-v34*v10*v11*v16*v20*v24-v34*v14*v7*v10*v16*v24+3*v15*v16*v22*v21*v35*v40/4+3*v11*v16*v20*v21*v35*v40/4+3*v14*v7*v16*v21*v35*v40/4)*v30*v32+(-v10*v25*v35*v24/2-v18*v17*v35*v24/2-v34*v25*v21*v24/2-v3*v26*v21*v24/2-v34*v10*v26*v22*v24-v34*v10*v25*v20*v24-v34*v7*v10*v17*v24+3*v26*v22*v21*v35*v40/4+3*v25*v20*v21*v35*v40/4+3*v7*v17*v21*v35*v40/4)*v29*v32+v37*v28*v32-v33*v36*v32+v33*v30*v38*v39-v28*v29*v38*v39)*rad_subtraction(atan2(v30,v29), eq)+2*k*(v28*v29*v32-v33*v30*v32)*(v36*v29*v32-v37*v30*v32) ; }

double HarmonicDihedralConstraintFunctions::hessianYdYd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38 ; v1 = xd-xc ; v2 = yc-yb ; v3 = xc-xb ; v4 = yd-yc ; v5 = v3*v4-v1*v2 ; v6 = zb-za ; v7 = xb-xa ; v8 = zc-zb ; v9 = v3*v6-v7*v8 ; v10 = pow(v3,2) ; v11 = 1/sqrt(pow(v8,2)+pow(v2,2)+v10) ; v12 = yb-ya ; v13 = v7*v2-v3*v12 ; v14 = v12*v8-v2*v6 ; v15 = 1/sqrt(pow(v9,2)+pow(v14,2)+pow(v13,2)) ; v16 = v2*v14*v11*v15-v3*v9*v11*v15 ; v17 = -zc ; v18 = v17+zb ; v19 = zd+v17 ; v20 = v2*v19-v4*v8 ; v21 = 2*v18*v20+2*v3*v5 ; v22 = v1*v8-v3*v19 ; v23 = sqrt(pow(v5,2)+pow(v22,2)+pow(v20,2)) ; v24 = 1/pow(v23,3) ; v25 = v3*v13*v11*v15-v8*v14*v11*v15 ; v26 = v8*v9*v11*v15-v2*v13*v11*v15 ; v27 = 1/v23 ; v28 = v3*v16*v27+v18*v26*v27-v26*v20*v21*v24/2-v25*v22*v21*v24/2-v5*v16*v21*v24/2 ; v29 = v14*v15*v20*v27+v9*v15*v22*v27+v13*v5*v15*v27 ; v30 = v26*v20*v27+v25*v22*v27+v5*v16*v27 ; v31 = pow(v30,2)+pow(v29,2) ; v32 = 1/v31 ; v33 = v18*v14*v15*v27+v3*v13*v15*v27-v14*v15*v20*v21*v24/2-v9*v15*v22*v21*v24/2-v13*v5*v15*v21*v24/2 ; v34 = 2*v28*v30+2*v33*v29 ; v35 = 1/pow(v31,2) ; v36 = pow(v21,2) ; v37 = 1/pow(v23,5) ; v38 = 2*pow(v18,2)+2*v10 ; return 2*pow(v28*v29*v32-v33*v30*v32,2)*k+2*k*(-(-v18*v14*v15*v21*v24-v3*v13*v15*v21*v24-v38*v14*v15*v20*v24/2-v38*v9*v15*v22*v24/2-v13*v5*v38*v15*v24/2+3*v14*v15*v20*v36*v37/4+3*v9*v15*v22*v36*v37/4+3*v13*v5*v15*v36*v37/4)*v30*v32+(-v3*v16*v21*v24-v18*v26*v21*v24-v38*v26*v20*v24/2-v38*v25*v22*v24/2-v5*v38*v16*v24/2+3*v26*v20*v36*v37/4+3*v25*v22*v36*v37/4+3*v5*v16*v36*v37/4)*v29*v32+v33*v30*v34*v35-v28*v29*v34*v35)*rad_subtraction(atan2(v30,v29), eq) ; }

double HarmonicDihedralConstraintFunctions::hessianYdZd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = xc-xb ; v5 = yd-yc ; v6 = v4*v5-v2*v3 ; v7 = zb-za ; v8 = xb-xa ; v9 = zc-zb ; v10 = v4*v7-v8*v9 ; v11 = 1/sqrt(pow(v9,2)+pow(v4,2)+pow(v3,2)) ; v12 = yb-ya ; v13 = v8*v3-v4*v12 ; v14 = v12*v9-v3*v7 ; v15 = 1/sqrt(pow(v14,2)+pow(v13,2)+pow(v10,2)) ; v16 = v3*v14*v11*v15-v4*v10*v11*v15 ; v17 = v1+xb ; v18 = -zc ; v19 = zd+v18 ; v20 = v2*v9-v4*v19 ; v21 = v3*v19-v5*v9 ; v22 = 2*v3*v21+2*v17*v20 ; v23 = sqrt(pow(v6,2)+pow(v21,2)+pow(v20,2)) ; v24 = 1/pow(v23,3) ; v25 = v4*v13*v11*v15-v9*v14*v11*v15 ; v26 = v9*v10*v11*v15-v3*v13*v11*v15 ; v27 = 1/v23 ; v28 = v17*v25*v27+v3*v26*v27-v26*v21*v22*v24/2-v25*v20*v22*v24/2-v6*v16*v22*v24/2 ; v29 = v14*v15*v21*v27+v10*v15*v20*v27+v13*v6*v15*v27 ; v30 = v26*v21*v27+v25*v20*v27+v6*v16*v27 ; v31 = pow(v30,2)+pow(v29,2) ; v32 = 1/v31 ; v33 = v3*v14*v15*v27+v17*v10*v15*v27-v14*v15*v21*v22*v24/2-v10*v15*v20*v22*v24/2-v13*v6*v15*v22*v24/2 ; v34 = v18+zb ; v35 = 2*v34*v21+2*v4*v6 ; v36 = v4*v16*v27+v34*v26*v27-v26*v21*v35*v24/2-v25*v20*v35*v24/2-v6*v16*v35*v24/2 ; v37 = v34*v14*v15*v27+v4*v13*v15*v27-v14*v15*v21*v35*v24/2-v10*v15*v20*v35*v24/2-v13*v6*v15*v35*v24/2 ; v38 = 2*v28*v30+2*v33*v29 ; v39 = 1/pow(v31,2) ; v40 = 1/pow(v23,5) ; return 2*k*(-(-v3*v14*v15*v35*v24/2-v17*v10*v15*v35*v24/2-v34*v14*v15*v22*v24/2-v4*v13*v15*v22*v24/2-v3*v34*v14*v15*v21*v24-v3*v34*v10*v15*v20*v24-v3*v13*v6*v34*v15*v24+3*v14*v15*v21*v22*v35*v40/4+3*v10*v15*v20*v22*v35*v40/4+3*v13*v6*v15*v22*v35*v40/4)*v30*v32+(-v17*v25*v35*v24/2-v3*v26*v35*v24/2-v4*v16*v22*v24/2-v34*v26*v22*v24/2-v3*v34*v26*v21*v24-v3*v34*v25*v20*v24-v3*v6*v34*v16*v24+3*v26*v21*v22*v35*v40/4+3*v25*v20*v22*v35*v40/4+3*v6*v16*v22*v35*v40/4)*v29*v32-v37*v28*v32+v33*v36*v32+v37*v30*v38*v39-v36*v29*v38*v39)*rad_subtraction(atan2(v30,v29), eq)+2*k*(v28*v29*v32-v33*v30*v32)*(v36*v29*v32-v37*v30*v32) ; }

double HarmonicDihedralConstraintFunctions::hessianZdZd(double k, double xa, double ya, double za, double xb, double yb, double zb, double xc, double yc, double zc, double xd, double yd, double zd, double eq){
double v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38 ; v1 = -xc ; v2 = xd+v1 ; v3 = yc-yb ; v4 = xc-xb ; v5 = yd-yc ; v6 = v4*v5-v2*v3 ; v7 = zb-za ; v8 = xb-xa ; v9 = zc-zb ; v10 = v4*v7-v8*v9 ; v11 = pow(v3,2) ; v12 = 1/sqrt(pow(v9,2)+pow(v4,2)+v11) ; v13 = yb-ya ; v14 = v8*v3-v4*v13 ; v15 = v13*v9-v3*v7 ; v16 = 1/sqrt(pow(v15,2)+pow(v14,2)+pow(v10,2)) ; v17 = v3*v15*v12*v16-v4*v10*v12*v16 ; v18 = v1+xb ; v19 = zd-zc ; v20 = v2*v9-v4*v19 ; v21 = v3*v19-v5*v9 ; v22 = 2*v3*v21+2*v18*v20 ; v23 = sqrt(pow(v6,2)+pow(v21,2)+pow(v20,2)) ; v24 = 1/pow(v23,3) ; v25 = v4*v14*v12*v16-v9*v15*v12*v16 ; v26 = v9*v10*v12*v16-v3*v14*v12*v16 ; v27 = 1/v23 ; v28 = v18*v25*v27+v3*v26*v27-v26*v21*v22*v24/2-v25*v20*v22*v24/2-v6*v17*v22*v24/2 ; v29 = v15*v16*v21*v27+v10*v16*v20*v27+v14*v6*v16*v27 ; v30 = v26*v21*v27+v25*v20*v27+v6*v17*v27 ; v31 = pow(v30,2)+pow(v29,2) ; v32 = 1/v31 ; v33 = v3*v15*v16*v27+v18*v10*v16*v27-v15*v16*v21*v22*v24/2-v10*v16*v20*v22*v24/2-v14*v6*v16*v22*v24/2 ; v34 = 2*v28*v30+2*v33*v29 ; v35 = 1/pow(v31,2) ; v36 = pow(v22,2) ; v37 = 1/pow(v23,5) ; v38 = 2*pow(v18,2)+2*v11 ; return 2*pow(v28*v29*v32-v33*v30*v32,2)*k+2*k*(-(-v3*v15*v16*v22*v24-v18*v10*v16*v22*v24-v38*v15*v16*v21*v24/2-v38*v10*v16*v20*v24/2-v14*v38*v6*v16*v24/2+3*v15*v16*v21*v36*v37/4+3*v10*v16*v20*v36*v37/4+3*v14*v6*v16*v36*v37/4)*v30*v32+(-v18*v25*v22*v24-v3*v26*v22*v24-v38*v26*v21*v24/2-v38*v25*v20*v24/2-v38*v6*v17*v24/2+3*v26*v21*v36*v37/4+3*v25*v20*v36*v37/4+3*v6*v17*v36*v37/4)*v29*v32+v33*v30*v34*v35-v28*v29*v34*v35)*rad_subtraction(atan2(v30,v29), eq) ; }
